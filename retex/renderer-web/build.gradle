import org.docstr.gradle.plugins.gwt.GwtDev

plugins {
    id 'java-library'
    alias libs.plugins.gwt
}

gwt {
    maxHeapSize = '2000M'
    gwtVersion = libs.versions.gwt.get()
    // only compilable module
    modules 'com.himamis.retex.renderer.JLaTeXMathGWTExportedLibrary'
    devModules 'com.himamis.retex.renderer.JLaTeXMathGWTDev'
    compiler {
        if (project.hasProperty("gdetailed")) {
            style = org.docstr.gradle.plugins.gwt.Style.DETAILED
        } else {
            disableClassMetadata = true
        }
    }
    jsInteropExports {
        shouldGenerate = true;
    }
}

evaluationDependsOn ':renderer-base'
evaluationDependsOn ':gwtutil'

dependencies {
    api project(':renderer-base'),
            project(':gwtutil'),
            files(project(':renderer-base').sourceSets.main.java.srcDirs),
            files(project(':gwtutil').sourceSets.main.java.srcDirs),
            files(project(':gwtutil').sourceSets.main.resources.srcDirs),
            files(file("build/generated/sources/annotationProcessor/java/main/")),
            libs.gwt.core, libs.gwt.dev, libs.gwt.user, libs.gwt.widgets,
            variantOf(libs.gwt.widgets) { classifier("sources") }

    testImplementation libs.gwt.user, libs.gwt.widgets,
            variantOf(libs.gwt.widgets) { classifier("sources") }

    annotationProcessor project(":gwtutil"), libs.gwt.resources.processor
}

compileJava.options.sourcepath = files(processResources.destinationDir).builtBy(processResources)

tasks.register('run', GwtDev) {
    dependsOn jar
    war = file('war')
    cacheDir = file('build/gwt/devModeCache')
    maxHeapSize = '4096m'
    description 'Starts a codeserver, and a simple webserver for development'
}

tasks.register('jarAll', Jar) {
    archiveClassifier = 'all'
    from project.sourceSets.main.java
    from project.sourceSets.main.output
    from project(':renderer-base').sourceSets.main.java
    from project(':renderer-base').sourceSets.main.output
}

tasks.register('jarSources', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

tasks.register('cleanDist', Delete) {
    delete 'dist'
}

task dist(type: Copy, dependsOn: cleanDist) {
    from compileGwt
    into 'dist'
    doLast {
        // rename library
        File jsFile = file('dist/jlatexmath/jlatexmath.nocache.js')
        File newFile = file('dist/jlatexmath/jlatexmath.js')
        jsFile.renameTo(newFile)

        // remove unneeded artifacts
        File clearCacheGif = file('dist/jlatexmath/clear.cache.gif')
        clearCacheGif.delete();
        File webInfFolder = file('dist/WEB-INF')
        deleteDir(webInfFolder)
    }
}

task zipDist(type: Zip, dependsOn: dist) {
    from 'dist/jlatexmath'
    destinationDirectory = file('dist/')
}

def deleteDir(dir) {
    if (dir.isDirectory()) {
        String[] children = dir.list();
        for (int i = 0; i < children.length; i++) {
            boolean success = deleteDir(new File(dir, children[i]));
            if (!success) {
                return false;
            }
        }
    }
    return dir.delete();
}

// https://issues.gradle.org/browse/GRADLE-2778
// http://discuss.gradle.org/t/javadoc-generation-failed-with-vaadin-dependency/2502/12
javadoc {
    options.addStringOption("sourcepath", "")
}
