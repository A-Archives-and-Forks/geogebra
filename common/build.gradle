plugins {
    id 'java-library'
    alias libs.plugins.geogebra.pmd
    alias libs.plugins.geogebra.checkstyle
    alias libs.plugins.geogebra.spotbugs
    alias libs.plugins.geogebra.sourcesets
    alias libs.plugins.javacc
}

description 'Common parts of GeoGebra for various platforms'

dependencies {
    javacc libs.javacc
    api project(':editor-base')
    api project(':renderer-base')
    api libs.spotbugs.annotations
    api libs.findbugs.annotations
    implementation libs.j2objc.annotations
}

sourceSets {
    main {
        java {
            srcDir compileJavacc.outputDirectory
            srcDir compileJavacc.inputDirectory
        }
    }
}

compileJavacc {
    arguments = [static: 'false', JAVA_TEMPLATE_TYPE: 'modern', LEGACY_EXCEPTION_HANDLING: 'false']
}

compileJava {
    options.encoding = 'UTF-8'
}

tasks.register('cleanJavacc', Delete) {
    description 'Cleans the javacc generated files.'
    delete compileJavacc
}

import java.text.DateFormat
import java.text.SimpleDateFormat

tasks.register('versionBump') {
    doLast {
        def version = "undef"
        def constants = file('../common/src/main/java/org/geogebra/common/GeoGebraConstants.java')
        constants.eachLine { line ->
            def pattern = ~/ VERSION_STRING = "(.*)"/
            def matcher = (line =~ pattern)
            if (matcher) {
                version = line.substring(matcher.start(1), matcher.end(1))
            }
        }
        def parts = version.split("\\.").collect({ f -> Integer.parseInt(f) })
        parts[2]++
        parts[3] = 0
        version = parts[0] + "." + parts[1] + "." + parts[2] + "." + parts[3]
        String t = constants.getText()
        DateFormat df = new SimpleDateFormat("dd MMMM Y", Locale.US)
        t = t.replaceAll("BUILD_DATE.*", "BUILD_DATE = \"" + df.format(new Date()) + "\";")
        t = t.replaceAll("final String VERSION_STRING.*", "final String VERSION_STRING = \"" + version + "\";")
        constants.text = t
        // version.txt for Jenkins build number
        file("build/").mkdirs()
        file("build/version.txt").text = version
    }
}

test {
    ignoreFailures = true
}

spotbugsMain.maxHeapSize = '1g'
