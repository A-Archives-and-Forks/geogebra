@startuml
skinparam classAttributeIconSize 0
class BernsteinPlotterVisualDebug{
- bounds : EuclidianViewBounds
- cells : List<BernsteinPlotCell>
BernsteinPlotterVisualDebug(bounds : EuclidianViewBounds)
+ draw(g2 : GGraphics2D) : void
- drawCell(g2 : GGraphics2D, cell : BernsteinPlotCell) : void
+ setData(cells : List<BernsteinPlotCell>) : void
}
BernsteinPlotterVisualDebug ..|> VisualDebug
class BernsteinBoundingBox{
- x1 : double
- y1 : double
- x2 : double
- y2 : double
- xHalf : double
- yHalf : double
+ BernsteinBoundingBox(x1 : double, y1 : double, x2 : double, y2 : double)
+ BernsteinBoundingBox(limits : BoundsRectangle)
+ split() : BernsteinBoundingBox[]
+ equals(o : Object) : boolean
+ hashCode() : int
+ toString() : String
+ getX1() : double
+ getY1() : double
+ getX2() : double
+ getY2() : double
+ getXHalf() : double
+ getYHalf() : double
+ getWidth() : double
+ getHeight() : double
}
BernsteinBoundingBox ..|> Splittable
class BernsteinCellGrid{
- cells : BernsteinPlotCell[][]
+ resize(bounds : EuclidianViewBounds) : void
+ toList() : List<BernsteinPlotCell>
+ put(cell : BernsteinPlotCell, row : int, column : int) : void
}
BernsteinCellGrid ..|> CellGrid
class CoordSystemAnimatedPlotter{
- updateEnabled : boolean
+ onZoomStop(info : CoordSystemInfo) : void
+ onMove(info : CoordSystemInfo) : void
+ onMoveStop() : void
+ updateOnDemand() : void
+ {abstract} update() : void
- enableUpdate() : void
- disableUpdate() : void
+ {abstract} draw(g2 : GGraphics2D) : void
}
CoordSystemAnimatedPlotter ..|> CoordSystemAnimationListener
class BernsteinPlotCellEdge{
parent : BernsteinPlotCell
- polynomial : BernsteinPolynomial
- coordMin : double
- coordMax : double
- fixedCoord : double
- length : double
- kind : EdgeKind
- startPoint : GPoint2D
- BernsteinPlotCellEdge(parent : BernsteinPlotCell, polynomial : BernsteinPolynomial, coordMin : double, coordMax : double, fixedCoord : double, kind : EdgeKind)
+ {static} create(parent : BernsteinPlotCell, polynomial : BernsteinPolynomial, coordMin : double, coordMax : double, fixedCoord : double, kind : EdgeKind) : BernsteinPlotCellEdge
+ split() : BernsteinPlotCellEdge[]
+ toString() : String
+ mightHaveSolutions() : boolean
+ isDerivativeSignDiffer() : boolean
+ isUnderSize(pixelInRW : GPoint2D) : boolean
+ startPoint() : GPoint2D
+ length() : double
+ getKind() : EdgeKind
+ isHorizontal() : boolean
+ hasIntersect() : boolean
- isVerticalEqual(p : GPoint2D, eps : double) : boolean
- isHorizontalEqual(p : GPoint2D, eps : double) : boolean
}
BernsteinPlotCellEdge ..|> Splittable
class BernsteinPlotCell{
boundingBox : BernsteinBoundingBox
polynomial : BernsteinPolynomial
- kind : BernsteinPlotCellKind
- edges : Map<EdgeKind,BernsteinPlotCellEdge>
+ BernsteinPlotCell(box : BernsteinBoundingBox, polynomial : BernsteinPolynomial)
getKind() : BernsteinPlotCellKind
+ getEdges() : Collection<BernsteinPlotCellEdge>
+ center() : GPoint2D
- classify() : BernsteinPlotCellKind
+ split() : BernsteinPlotCell[]
createEdges() : void
+ toString() : String
+ mightHaveSolution() : boolean
}
BernsteinPlotCell ..|> Splittable
class BernsteinPlotter{
+ {static} VISUAL_DEBUG_ENABLED : boolean
+ {static} SMALLEST_BOX_IN_PIXELS : int
+ {static} SMALLEST_EDGE_IN_PIXELS : double
- bounds : EuclidianViewBounds
- gp : GeneralPathClippedForCurvePlotter
- visualDebug : VisualDebug<BernsteinPlotCell>
- algo : PlotterAlgo
- grid : CellGrid<BernsteinPlotCell>
+ BernsteinPlotter(curve : GeoElement, bounds : EuclidianViewBounds, gp : GeneralPathClippedForCurvePlotter)
+ draw(g2 : GGraphics2D) : void
+ update() : void
- drawResults(g2 : GGraphics2D) : void
- drawPointToScreen(p : GPoint2D) : void
+ plotCellCount() : int
}
BernsteinPlotter --|> CoordSystemAnimatedPlotter
class BernsteinImplicitAlgo{
- grid : CellGrid<BernsteinPlotCell>
- bounds : EuclidianViewBounds
- curve : GeoElement
- converter : BernsteinPolynomialConverter
+ BernsteinImplicitAlgo(grid : CellGrid<BernsteinPlotCell>, bounds : EuclidianViewBounds, curve : GeoElement)
+ compute() : void
- initialSplit(rootCell : BernsteinPlotCell) : List<BernsteinPlotCell>
- createRootCell() : BernsteinPlotCell
- findSolutions(cell : BernsteinPlotCell) : void
- {static} cellsWithPossibleSolution(list : List<BernsteinPlotCell>) : List<BernsteinPlotCell>
- findSolutionsInFaces(cell : BernsteinPlotCell) : void
- isBoxSmallEnough(box : BernsteinBoundingBox) : boolean
- findSolutionsInEdges(context : BernsteinPlotCell) : void
- findSolutionsInOneEdge(startEdge : BernsteinPlotCellEdge) : void
- findSignChangeInEdge(startEdge : BernsteinPlotCellEdge) : void
- addIntersect(edge : BernsteinPlotCellEdge) : void
- putToGrid(cell : BernsteinPlotCell) : void
- isEdgeSmallEnough(edge : BernsteinPlotCellEdge) : boolean
}
BernsteinImplicitAlgo ..|> PlotterAlgo
BernsteinPlotCellEdge--"parent" BernsteinPlotCell
BernsteinPlotCellEdge--"- kind" EdgeKind
BernsteinPlotCell--"boundingBox" BernsteinBoundingBox
BernsteinPlotCell--"- kind" BernsteinPlotCellKind
BernsteinPlotter--"- algo" PlotterAlgo
interface VisualDebug{
draw(g2 : GGraphics2D) : void
setData(data : List<T>) : void
}
interface PlotterAlgo{
compute() : void
}
interface CellGrid{
resize(bounds : EuclidianViewBounds) : void
toList() : List<BernsteinPlotCell>
put(cell : T, row : int, column : int) : void
}
enum BernsteinPlotCellKind{
CELL0
CELL1
CELL2
}
enum EdgeKind{
TOP
LEFT
BOTTOM
RIGHT
}
@enduml