plugins {
    id 'java'
}

pluginManager.apply(libs.plugins.gwt.get().getPluginId())

def resolveDependencies(ConfigurationContainer configurations) {
    configurations.configureEach { configuration ->
        if (["implementation", "api"].contains(configuration.name)) {
            configuration.dependencies.configureEach { dependency ->
                if (dependency instanceof ProjectDependency) {
                    if (dependency.dependencyProject.pluginManager.hasPlugin("java")) {
                        logger.debug "GWT Conventions: Adding sources dependency to project ${dependency.dependencyProject.name}"
                        def javaSources = dependency.dependencyProject.sourceSets.main.allSource.srcDirs
                        def javaSourceFiles = project.files(javaSources)
                        project.dependencies.add("gwt", javaSourceFiles)

                        logger.debug "GWT Conventions: Recursively adding dependencies from ${dependency.dependencyProject.name}"
                        resolveDependencies(dependency.dependencyProject.configurations)
                    }
                } else if (dependency instanceof MinimalExternalModuleDependency) {
                    logger.debug "GWT Conventions: Adding sources dependency to external dependency ${dependency.toString()}"
                    def dependencyProvider = provider { dependency }
                    def variant = project.dependencies.variantOf(dependencyProvider) { classifier("sources") }

                    project.dependencies.add("gwt", variant)
                } else if (dependency instanceof FileCollectionDependency) {
                    logger.debug "GWT Conventions: Adding dependency to file collection ${dependency.files}"

                    project.dependencies.add("gwt", dependency)
                }
            }
        }
    }
}

logger.debug "GWT Conventions: Configuring project $name"

resolveDependencies(configurations)

gwt {
    gwtVersion = libs.versions.gwt.get()

    maxHeapSize = '2000M'

    jsInteropExports {
        shouldGenerate = true
    }

    compiler {
        // Customize the GWT compiler here
        strict = true
        disableCastChecking = true

        if (project.hasProperty("greport")) {
            compileReport = true
        }
        if (project.hasProperty("gdraft")) {
            draftCompile = true
        }
        if (project.hasProperty("gworkers")) {
            localWorkers = project.getProperty("gworkers")
        }
        if (project.hasProperty("gdetailed")) {
            style = org.docstr.gradle.plugins.gwt.Style.DETAILED
        } else {
            disableClassMetadata = true
        }
        if (project.hasProperty("gsoyc")) {
            soycDetailed = true
        }
    }
}
