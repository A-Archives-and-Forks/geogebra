plugins {
    id 'java-library'
    id 'java-test-fixtures'
    id 'pmd-conventions'
    id 'checkstyle-conventions'
    id 'jacoco'
    id 'spotbugs-conventions'
}

description 'Common parts of GeoGebra that depends on JRE support.'

dependencies {
    api project(':common')
    api libs.mozilla.rhino

    implementation project(':giac-jni')
    implementation project(':renderer-base')
    implementation project(':editor-base')

    testImplementation project(':ggbjdk')
    testImplementation libs.junit, libs.hamcrest, libs.mockito.core

    testFixturesImplementation project(':ggbjdk'), libs.junit, libs.hamcrest, libs.mockito.core
}

sourceSets {
    nonfree
    main {
        resources {
            if (!project.hasProperty("usegpl")) {
                srcDirs += nonfree.resources.srcDirs
            }
        }
    }
}

spotbugs {
    ignoreFailures = true
    excludeFilter = file("../config/spotbugs.xml")
}

pmd {
    ignoreFailures = true
    ruleSets = []
    ruleSetFiles = files("../config/pmd.xml")
}

test {
    ignoreFailures = true
}

// http://stackoverflow.com/questions/20638039/gradle-and-jacoco-instrument-classes-from-a-separate-subproject
//gradle.projectsEvaluated {
//    // include src from all dependent projects (compile dependency) in JaCoCo test report
//    jacocoTestReport {
//        // get all projects we have a (compile) dependency on
//        def projs = configurations.implementation.getAllDependencies().withType(ProjectDependency).collect { it.getDependencyProject() }
//        projs.each {
//            additionalSourceDirs files(it.sourceSets.main.java.srcDirs)
//            additionalClassDirs files(files(it.sourceSets.main['java'].destinationDirectory).collect({
//                File f -> fileTree(dir: f, exclude: ['org/apache/**', 'edu/**', 'org/geogebra/common/kernel/barycentric/**'])
//            }))
//        }
//    }
//}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = false
    }
}