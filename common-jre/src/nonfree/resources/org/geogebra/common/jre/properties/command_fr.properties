# Copyright (c) GeoGebra GmbH, office@geogebra.org
# The GeoGebra language files are licensed to you under the terms of the
# Creative Commons Attribution-NonCommercial-ShareAlike licence (version 3.0 or later),
# the current text of which can be found via this link:
# https://creativecommons.org/licenses/by-nc-sa/3.0/legalcode.
# Attribution (as required by that Creative Commons license) should take the form of
# (at least) a mention of our name, an appropriate copyright notice and a link to our
# website located at https://www.geogebra.org.
# For further details, please see https://www.geogebra.org/license
ANOVA=AnalyseVariance
ANOVA.Syntax=[ <Liste>, <Liste>, ... ]
AffineRatio=RapportColin??arit??
AffineRatio.Syntax=[ <Point>, <Point>, <Point> ]
Angle.Syntax=[ <Objet> ]\n[ <Vecteur>, <Vecteur> ]\n[ <Droite>, <Droite> ]\n[ <Point>, <Sommet>, <Point> ]\n[ <Point>, <Sommet>, <Angle> ]
Angle.Syntax3D=[ <Objet> ]\n[ <Vecteur>, <Vecteur> ]\n[ <Droite>, <Droite> ]\n[ <Droite>, <Plan> ]\n[ <Plan>, <Plan> ]\n[ <Point>, <Sommet>, <Point> ]\n[ <Point>, <Sommet>, <Angle> ]\n[ <Point>, <Point>, <Point>, <Direction> ]
AngularBisector=Bissectrice
AngularBisector.Syntax=[ <Droite>, <Droite> ]\n[ <Point>, <Point>, <Point> ]
Append=Ajouter
Append.Syntax=[ <Liste>, <Objet> ]\n[ <Objet>, <Liste> ]
ApplyMatrix=AppliquerMatrice
ApplyMatrix.Syntax=[ <Matrice>, <Objet> ]
Arc.Syntax=[ <Cercle>, <Point>, <Point> ]\n[ <Ellipse>, <Point>, <Point> ]\n[ <Cercle>, <Valeur Param??tre>, <Valeur Param??tre> ]\n[ <Ellipse>, <Valeur Param??tre>, <Valeur Param??tre> ]
AreCollinear=SontAlign??s
AreCollinear.Syntax=[ <Point>, <Point>, <Point> ]
AreConcurrent=SontConcourantes
AreConcurrent.Syntax=[ <Droite>, <Droite>, <Droite> ]
AreConcyclic=SontCocycliques
AreConcyclic.Syntax=[ <Point>, <Point>, <Point>, <Point> ]
AreCongruent=SontIsom??triques
AreCongruent.Syntax=[ <Objet>, <Objet> ]
AreEqual=Sont??gaux
AreEqual.Syntax=[ <Objet>, <Objet> ]
AreParallel=SontParall??les
AreParallel.Syntax=[ <Droite>, <Droite> ]
ArePerpendicular=SontPerpendiculaires
ArePerpendicular.Syntax=[ <Droite>, <Droite> ]
Area=Aire
Area.Syntax=[ <Conique> ]\n[ <Polygone> ]\n[ <Point>, ..., <Point> ]
Assume=Sachant
Assume.SyntaxCAS=[ <Condition>, <Expression> ]
Asymptote.Syntax=[ <Objet> ]
AttachCopyToView=AttacherCopieAVue
AttachCopyToView.Syntax=[ <Objet>, <Vue 0|1|2> ]\n[ <Objet>, <Vue 0|1|2>, <Point 1>, <Point 2>, <??cran Point 1>, <??cran Point 2> ]
Axes.Syntax=[ <Conique> ]
Axes.Syntax3D=[ <Conique> ]\n[ <Quadrique> ]
AxisStepX=PasAxeX
AxisStepX.Syntax=[ ]
AxisStepY=PasAxeY
AxisStepY.Syntax=[ ]
BarChart=Barres
BarChart.Syntax=[ <Liste Donn??es>, <Liste Effectifs> ]\n[ <S??rie brute>, <Largeur Barres>, <Echelle (optionnelle)> ]\n[ <Liste Donn??es>, <Liste Effectifs>, <Largeur Barres> ]\n[ <Valeur D??but>, <Valeur Fin>, <Liste Hauteurs> ]\n[ <Valeur D??but>, <Valeur Fin>, <Expression>, <Variable>, <de>, <??> ]\n[ <Valeur D??but>, <Valeur Fin>, <Expression>, <Variable>, <de>, <??>, <pas> ]
Barycenter=Barycentre
Barycenter.Syntax=[ <Liste Points>, <Liste Masses> ]
Bernoulli.Syntax=[ <Probabilit??>, <Bool??en Cumul> ]
BetaDist.Syntax=[ <Alpha>, <Beta>, <Nombre Succ??s> ]\n[ <Alpha>, <Beta>, <Nombre Succ??s>, <Bool??en Cumul>  ]\n[ <Alpha>, <Beta>, x, <Bool??en Cumul> ]
Binomial=Combinaison
Binomial.Syntax=[ <Nombre n>, <Nombre p> ]
BinomialDist=Binomiale
BinomialDist.Syntax=[ <Nombre d'essais>, <Probabilit?? du Succ??s> ]\n[ <Nombre d'essais>, <Probabilit?? du Succ??s>, <Bool??en Cumul> ]\n[ <Nombre d'essais>, <Probabilit?? du Succ??s>, <Liste des valeurs> ]\n[ <Nombre d'essais>, <Probabilit?? du Succ??s>, <Nombre Succ??s>, <Bool??en Cumul> ]
BinomialDist.SyntaxCAS=[ <Nombre d'essais>, <Probabilit?? du Succ??s>, <Nombre Succ??s>, <Bool??en Cumul> ]
Bottom=EnBas
Bottom.Syntax=[ <Quadrique> ]
BoxPlot=BoiteMoustaches
BoxPlot.Syntax=[ <Ordonn??e>, <Demi hauteur>, <S??rie brute> ]\n[ <Ordonn??e>, <Demi hauteur>, <S??rie brute>, <Bool??en Aberrantes> ]\n[ <Ordonn??e>, <Demi hauteur>, <Liste Donn??es>, <Liste Effectifs>, <Bool??en Aberrantes> ]\n[ <Ordonn??e>, <Demi hauteur>, <Valeur D??but>, <Q1>, <M??diane>, <Q3>, <Valeur Fin> ]
Button=Bouton
Button.Syntax=[ ]\n[ <L??gende> ]
CASLoaded.Syntax=[]
CFactor=CFactorisation
CFactor.SyntaxCAS=[ <Expression> ]\n[ <Expression>, <Variable> ]
CIFactor=FactoriseCI
CIFactor.SyntaxCAS=[ <Expression> ]\n[ <Expression>, <Variable> ]
CSolutions.SyntaxCAS=[ <??quation> ]\n[ <??quation>, <Variable> ]\n[ <Liste ??quations>, <Liste Variables> ]
CSolve=CR??soudre
CSolve.SyntaxCAS=[ <??quation> ]\n[ <??quation>, <Variable> ]\n[ <Liste ??quations>, <Liste Variables> ]
Cauchy.Syntax=[ <M??diane>, <??chelle>, <Nombre Succ??s> ]\n[ <M??diane>, <??chelle>, <Nombre Succ??s>, <Bool??en Cumul>  ]\n[ <M??diane>, <??chelle>, x, <Bool??en Cumul> ]
Cauchy.SyntaxCAS=[ <M??diane>, <??chelle>, <Nombre Succ??s> ]
Cell=Cellule
Cell.Syntax=[ <Colonne>, <Ligne> ]
CellRange=Plage
CellRange.Syntax=[ <Cellule D??but>, <Cellule Fin> ]
Center=Centre
Center.Syntax=[ <Conique> ]
Center.Syntax3D=[ <Conique> ]\n[ <Quadrique> ]
CenterView=CentreVue
CenterView.Syntax=[ <Centre> ]
Centroid=CentreGravit??
Centroid.Syntax=[ <Polygone> ]
CharacteristicPolynomial=Polyn??meCaract??ristique
CharacteristicPolynomial.Syntax=[ <Matrice> ]
Checkbox=CaseACocher
Checkbox.Syntax=[ ]\n[ <L??gende> ]\n[ <Liste> ]\n[ <L??gende>, <Liste> ]
ChiSquared=KhiCarr??
ChiSquared.Syntax=[ <Degr?? de libert??>, <Nombre Succ??s> ]\n[ <Degr?? de libert??>, <Nombre Succ??s>, <Bool??en Cumul> ]\n[ <Degr?? de libert??>, x, <Bool??en Cumul> ]
ChiSquared.SyntaxCAS=[ <Degr?? de libert??>, <Variable> ]
ChiSquaredTest=KhiCarr??Test
ChiSquaredTest.Syntax=[ <Matrice> ]\n[ <Liste>, <Liste> ]\n[ <Matrice>, <Matrice> ]
Circle=Cercle
Circle.Syntax=[ <Point>, <Rayon> ]\n[ <Point>, <Segment> ]\n[ <Point>, <Point> ]\n[ <Point>, <Point>, <Point> ]
Circle.Syntax3D=[ <Point>, <Rayon> ]\n[ <Point>, <Segment> ]\n[ <Point>, <Point> ]\n[ <Point>, <Point>, <Point> ]\n[ <Droite>, <Point> ]\n[ <Point>, <Rayon>, <Direction> ]\n[ <Point>, <Point>, <Direction> ]
CircleArc=ArcCercle
CircleArc.Syntax=[ <Centre>, <Point>, <Point> ]
CircleSector=SecteurCirculaire
CircleSector.Syntax=[ <Centre>, <Point>, <Point> ]
CircumcircleArc=ArcCercleCirconscrit
CircumcircleArc.Syntax=[ <Point>, <Point>, <Point> ]
CircumcircleSector=SecteurCirculaire3points
CircumcircleSector.Syntax=[ <Point>, <Point>, <Point> ]
Circumference=Circonf??rence
Circumference.Syntax=[ <Conique> ]
Classes.Syntax=[ <Liste Donn??es>, <Nombre Classes> ]\n[ <Liste Donn??es>, <D??but>, <Largeur Classes> ]
ClosestPoint=PointPlusProche
ClosestPoint.Syntax=[ <Chemin>, <Point> ]\n[ <Droite>, <Droite> ]
ClosestPointRegion=PointPlusProcheR??gion
ClosestPointRegion.Syntax=[ <R??gion>, <Point> ]
Coefficients.Syntax=[ <Polyn??me> ]\n[ <Conique> ]
Coefficients.SyntaxCAS=[ <Polyn??me> ]\n[ <Polyn??me>, <Variable> ]
Column=Colonne
Column.Syntax=[ <Cellule> ]
ColumnName=NomColonne
ColumnName.Syntax=[ <Cellule> ]
Command=Commande
CommonDenominator=D??nominateurCommun
CommonDenominator.Syntax=[ <Expression>, <Expression> ]
CompleteSquare=FormeCanonique
CompleteSquare.Syntax=[ <Fonction 2d degr??> ]
ComplexRoot=RacineComplexe
ComplexRoot.Syntax=[ <Polyn??me> ]
Cone=C??ne
Cone.Syntax=[ <Cercle>, <Hauteur> ]\n[ <Point>, <Point>, <Rayon> ]\n[ <Point>, <Vecteur>, <Angle> ]
ConeInfinite=C??neInfini
ConeInfinite.Syntax=[ <Point>, <Vecteur>, <Angle> ]\n[ <Point>, <Point>, <Angle> ]\n[ <Point>, <Droite>, <Angle> ]
Conic=Conique
Conic.Syntax=[ <Liste> ]\n[ <Point>, <Point>, <Point>, <Point>, <Point> ]\n[ <Nombre>, <Nombre>, <Nombre>, <Nombre>, <Nombre>, <Nombre> ]
ConstructionStep=EtapeConstruction
ConstructionStep.Syntax=[ ]\n[ <Objet> ]
ContingencyTable=TableContingences
ContingencyTable.Syntax=[ <Liste de textes>, <Liste de textes> ]\n[ <Liste de textes>, <Liste de textes>, <Options> ]\n[ <Liste TitresLignes>, <Liste TitresColonnes>, <Matrice D??pouill??e> ]\n[ <Liste TitresLignes>, <Liste TitresColonnes>, <Matrice D??pouill??e> , <Options> ]
ContinuedFraction=FractionContinue
ContinuedFraction.Syntax=[ <Nombre> ]\n[ <Nombre>, <Niveau> ]\n[ <Nombre>, <Niveau>, <Enligne true|false> ]
ConvexHull=EnveloppeConvexe
ConvexHull.Syntax=[ <Liste Points> ]
CopyFreeObject=CopierObjetLibre
CopyFreeObject.Syntax=[ <Objet> ]
Corner=Coin
Corner.Syntax=[ <Num??ro> ]\n[ <Image>, <Num??ro> ]\n[ <Texte>, <Num??ro> ]\n[ <Vue graphique>, <Num??ro> ]
CountIf=NbSi
CountIf.Syntax=[ <Condition>, <Liste> ]\n[ <Condition>, <Variable>, <Liste> ]
Covariance.Syntax=[ <Liste Points> ]\n[ <Liste Nombres>, <Liste Nombres> ]
Cross=ProduitVectoriel
Cross.Syntax=[ <Vecteur>, <Vecteur> ]
CrossRatio=Birapport
CrossRatio.Syntax=[ <Point>, <Point>, <Point>, <Point> ]
Cube.Syntax=[ <Carr??> ]\n[ <Point>, <Point>, <Point> ]\n[ <Point>, <Point>, <Direction> ]
Cubic=Cubique
Cubic.Syntax=[ <Point>, <Point>, <Point>, <Nombre> ]
Curvature=Courbure
Curvature.Syntax=[ <Point>, <Objet> ]
CurvatureVector=VecteurCourbure
CurvatureVector.Syntax=[ <Point>, <Objet> ]
CurveCartesian=Courbe
CurveCartesian.Syntax=[ <Expression>, <Expression>, <Variable>, <Valeur D??but>, <Valeur Fin> ]
CurveCartesian.Syntax3D=[ <Expression>, <Expression>, <Variable>, <Valeur D??but>, <Valeur Fin> ]\n[ <Expression>, <Expression>, <Expression>, <Variable>, <Valeur D??but>, <Valeur Fin> ]
Cylinder=Cylindre
Cylinder.Syntax=[ <Cercle>, <Hauteur> ]\n[ <Point>, <Point>, <Rayon> ]
CylinderInfinite=CylindreInfini
CylinderInfinite.Syntax=[ <Droite>, <Rayon> ]\n[ <Point>, <Vecteur>, <Rayon> ]\n[ <Point>, <Point>, <Rayon> ]
DataFunction=FonctionDonn??es
DataFunction.Syntax=[ <Liste Nombres>, <Liste Nombres> ]
Defined=EstD??fini
Defined.Syntax=[ <Objet> ]
Degree=Degr??
Degree.Syntax=[ <Polyn??me> ]
Degree.SyntaxCAS=[ <Polyn??me> ]\n[ <Polyn??me>, <Variable> ]
DelauneyTriangulation=TriangulationDelaunay
DelauneyTriangulation.Syntax=[ <Liste Points> ]
Delete=Effacer
Delete.Syntax=[ <Objet> ]
Denominator=D??nominateur
Denominator.Syntax=[ <Nombre> ]\n[ <Fonction> ]
Denominator.SyntaxCAS=[ <Expression> ]
DensityPlot=Trac??Densit??
Derivative=D??riv??e
Derivative.Syntax=[ <Fonction> ]\n[ <Courbe> ]\n[ <Fonction>, <Nombre> ]\n[ <Fonction>, <Variable> ]\n[ <Courbe>, <Nombre> ]\n[ <Fonction>, <Variable>, <Nombre> ]
Derivative.SyntaxCAS=[ <Expression> ]\n[ <Expression>, <Variable> ]\n[ <Expression>, <Variable>, <Nombre> ]
Determinant=D??terminant
Determinant.Syntax=[ <Matrice> ]
Diameter=Diam??tre
Diameter.Syntax=[ <Vecteur>, <Conique> ]\n[ <Droite>, <Conique> ]
Difference=Diff??rence
Difference.Syntax=[ <Polygone>, <Polygone> ]
Dilate=Homoth??tie
Dilate.Syntax=[ <Objet>, <Rapport> ]\n[ <Objet>, <Rapport>, <Centre> ]
Dimension.Syntax=[ <Objet> ]
Direction.Syntax=[ <Droite> ]
Directrix=Directrice
Directrix.Syntax=[ <Conique> ]
Distance.Syntax=[ <Point>, <Objet> ]\n[ <Droite>, <Droite> ]\n[ <Plan>, <Plan> ]
Distance.SyntaxCAS=[ <Point>, <Objet> ]
Div=Quotient
Div.Syntax=[ <Dividende>, <Diviseur> ]\n[ <Polyn??me Dividende>, <Polyn??me Diviseur> ]
Division.Syntax=[ <Dividende>, <Diviseur> ]\n[ <Polyn??me Dividende>, <Polyn??me Diviseur> ]
Divisors=Diviseurs
Divisors.Syntax=[ <Nombre> ]
DivisorsList=ListeDiviseurs
DivisorsList.Syntax=[ <Nombre> ]
DivisorsSum=SommeDiviseurs
DivisorsSum.Syntax=[ <Nombre> ]
Dodecahedron=Dod??ca??dre
Dodecahedron.Syntax=[ <Pentagone r??gulier> ]\n[ <Point>, <Point>, <Point> ]\n[ <Point>, <Point>, <Direction> ]
Dot=ProduitScalaire
Dot.Syntax=[ <Vecteur>, <Vecteur> ]
DotPlot=NuagePoints
DotPlot.Syntax=[ <S??rie brute>, <Empiler Points adjacents (optionnel)>, <Echelle (optionnelle)>]
DynamicCoordinates=Coordonn??esDynamiques
DynamicCoordinates.Syntax=[ <Point>, <Nombre>, <Nombre> ]\n[ <Point>, <Nombre>, <Nombre>, <Nombre> ]
Eccentricity=Excentricit??
Eccentricity.Syntax=[ <Conique> ]
Eigenvalues=ValeursPropres
Eigenvalues.SyntaxCAS=[ <Matrice> ]
Eigenvectors=VecteursPropres
Eigenvectors.SyntaxCAS=[ <Matrice> ]
Element=El??ment
Element.Syntax=[ <Liste>, <Position> ]\n[ <Matrice>, <Ligne>, <Colonne> ]\n[ <Liste>, <Index1>, <Index2>, ... ]
Element.SyntaxCAS=[ <Liste>, <Position> ]\n[ <Matrice>, <Ligne>, <Colonne> ]
Eliminate=Elimination
Eliminate.Syntax=[ <Liste Polyn??mes>, <Liste Variables> ]
Ellipse.Syntax=[ <Foyer>, <Foyer>, <Demi Longueur Axe Principal> ]\n[ <Foyer>, <Foyer>, <Segment> ]\n[ <Foyer>, <Foyer>, <Point> ]
Ends=Finaux
Ends.Syntax=[ <Quadrique> ]
Envelope=Enveloppe
Envelope.Syntax=[ <Chemin>, <Point> ]
Erlang.Syntax=[ <Forme>, <Intensit??>, <Nombre Succ??s> ]\n[ <Forme>, <Intensit??>, <Nombre Succ??s>, <Bool??en Cumul> ]\n[ <Forme>, <Intensit??>, x, <Bool??en Cumul> ]
Evaluate=Evaluer
Excentricity=Excentricit??Lin??aire
Excentricity.Syntax=[ <Conique> ]
Execute=Ex??cute
Execute.Syntax=[ <Liste de textes> ]\n[ <Liste de textes>, <Param??tre>, <Param??tre>, ... ]
Expand=D??velopper
Expand.Syntax=[ <Expression> ]
Exponential=Exponentielle
Exponential.Syntax=[ <Lambda>, <Nombre Succ??s> ]\n[ <Lambda>, <Nombre Succ??s>, <Bool??en Cumul> ]\n[ <Lambda>, x, <Bool??en Cumul> ]
Exponential.SyntaxCAS=[ <Lambda>, <Nombre Succ??s> ]
ExportImage=ExporterImage
ExportImage.Syntax=[ <Param??tre>, <Valeur>, <Param??tre>, <Valeur>, ... ]
ExtendedGCD=B??zout
ExtendedGCD.Syntax=[ <Entier naturel>, <Entier naturel>]\n[ <Polyn??me>, <Polyn??me>]
Extremum.Syntax=[ <Polyn??me> ]\n[ <Fonction>, <x initial>, <x final> ]
Extremum.SyntaxCAS=[ <Fonction> ]\n[ <Fonction>, <x initial>, <x final> ]
FDistribution.Syntax=[ <Degr?? libert?? Num??rateur>, <Degr?? libert?? D??nominateur>, <Nombre Succ??s> ]\n[ <Degr?? libert?? Num??rateur>, <Degr?? libert?? D??nominateur>, <Nombre Succ??s>, <Bool??en Cumul> ]\n[ <Degr?? libert?? Num??rateur>, <Degr?? libert?? D??nominateur>, x, <Bool??en Cumul> ]
FDistribution.SyntaxCAS=[ <Degr?? libert?? Num??rateur>, <Degr?? libert?? D??nominateur>, <Nombre Succ??s> ]
Factor=Factoriser
Factor.Syntax=[ <Polyn??me> ]
Factor.SyntaxCAS=[ <Nombre> ]\n[ <Polyn??me> ]\n[ <Expression>, <Variable> ]
Factors=Facteurs
Factors.Syntax=[ <Polyn??me> ]\n[ <Nombre> ]
FillCells=RemplirCellules
FillCells.Syntax=[ <Plage>, <Objet> ]\n[ <Cellule>, <Liste> ]\n[ <Cellule>, <Matrice> ]
FillColumn=RemplirColonne
FillColumn.Syntax=[ <Colonne>, <Liste> ]
FillRow=RemplirLigne
FillRow.Syntax=[ <Ligne>, <Liste> ]
First=Premiers
First.Syntax=[ <Liste> ]\n[ <Texte> ]\n[ <Liste>, <Nombre> ]\n[ <Texte>, <Nombre> ]\n[ <Lieu>, <Nombre> ]
First.SyntaxCAS=[ <Liste> ]\n[ <Liste>, <Nombre> ]
FirstAxis=GrandAxe
FirstAxis.Syntax=[ <Conique> ]
FirstAxisLength=LDemiGrandAxe
FirstAxisLength.Syntax=[ <Conique> ]
Fit=Ajustement
Fit.Syntax=[ <Liste Points>, <Liste Fonctions> ]\n[ <Liste Points>, <Fonction> ]
FitExp=AjustExp
FitExp.Syntax=[ <Liste Points> ]
FitGrowth=AjustCroissance
FitGrowth.Syntax=[ <Liste Points> ]
FitImplicit=AjustImplicite
FitImplicit.Syntax=[ <Liste Points>, <Ordre> ]
FitLineX=AjustLinX
FitLineX.Syntax=[ <Liste Points> ]
FitLineY=AjustLin
FitLineY.Syntax=[ <Liste Points> ]
FitLog=AjustLog
FitLog.Syntax=[ <Liste Points> ]
FitLogistic=AjustLogistique
FitLogistic.Syntax=[ <Liste Points> ]
FitPoly=AjustPoly
FitPoly.Syntax=[ <Liste Points>, <Degr??> ]\n[ <Fonction ?? main lev??e>, <Degr??> ]
FitPow=AjustPuissance
FitPow.Syntax=[ <Liste Points> ]
FitSin=AjustSin
FitSin.Syntax=[ <Liste Points> ]
Flatten=Aplatir
Flatten.Syntax=[ <Liste> ]
Focus=Foyer
Focus.Syntax=[ <Conique> ]
FractionText=FractionTexte
FractionText.Syntax=[ <Nombre> ]\n[ <Point> ]\n[ <Nombre>, <Bool??en> ]
Frequency=Effectifs
Frequency.Syntax=[ <S??rie brute> ]\n[ <Bool??en Cumul>, <S??rie brute> ]\n[ <Liste des bornes des classes>, <S??rie brute> ]\n[ <Liste de textes>, <Liste de textes> ]\n[ <Bool??en Cumul>, <Liste des bornes des classes>, <S??rie brute> ]\n[ <Liste des bornes des classes>, <S??rie brute>, <Densit?? true|false>, <Echelle (optionnel)> ]\n[ <Bool??en Cumul>, <Liste des bornes des classes>, <S??rie brute>, <Densit?? true|false>, <Echelle (optionnel)> ]
FrequencyPolygon=PolygoneEffectifs
FrequencyPolygon.Syntax=[ <Liste des bornes des classes>, <Liste Hauteurs> ]\n[ <Liste des bornes des classes>, <S??rie brute>, <Densit?? true|false>, <Echelle (optionnel)> ]\n[ <Bool??en Cumul>, <Liste des bornes des classes>, <S??rie brute>, <Densit?? true|false>, <Echelle (optionnel)> ]
FrequencyTable=TableauEffectifs
FrequencyTable.Syntax=[ <S??rie brute>, <Echelle (optionnelle)> ]\n[ <Bool??en Cumul>, <S??rie brute> ]\n[ <Liste des bornes des classes>, <S??rie brute> ]\n[ <Bool??en Cumul>, <Liste des bornes des classes>, <S??rie brute> ]\n[ <Liste des bornes des classes>, <S??rie brute>, <Densit?? true|false>, <Echelle (optionnel)> ]\n[ <Bool??en Cumul>, <Liste des bornes des classes>, <S??rie brute>, <Densit?? true|false>, <Echelle (optionnel)> ]
FromBase=DeBase
FromBase.Syntax=[ <Nombre en Texte>, <Base> ]
Function=Fonction
Function.Syntax=[ <Fonction>, <x initial>, <x final> ]\n[ <Liste Nombres> ]
Function.Syntax3D=[ <Liste Nombres> ]\n[ <Fonction>, <x initial>, <x final> ]\n[ <Expression>, <Variable 1>, <Valeur D??but>, <Valeur Fin>, <Variable 2>, <Valeur D??but>, <Valeur Fin> ]
Function.SyntaxCAS=[ <Fonction>, <x initial>, <x final> ]
FutureValue=ValeurFuture
FutureValue.Syntax=[ <Intensit??>, <Nombre de P??riodes>, <Paiement>, <Valeur Actuelle (optionnelle)>, <Type (optionnel)> ]
GCD=PGCD
GCD.Syntax=[ <Liste Nombres> ]\n[ <Nombre>, <Nombre> ]
GCD.SyntaxCAS=[ <Liste Nombres> ]\n[ <Liste Polyn??mes> ]\n[ <Nombre>, <Nombre> ]\n[ <Polyn??me>, <Polyn??me> ]
Gamma.Syntax=[ <Alpha>, <Beta>, <Nombre Succ??s> ]\n[ <Alpha>, <Beta>, <Nombre Succ??s>, <Bool??en Cumul>  ]\n[ <Alpha>, <Beta>, x, <Bool??en Cumul> ]
Gamma.SyntaxCAS=[ <Alpha>, <Beta>, <Nombre Succ??s> ]
GeometricMean=MoyenneG??om??trique
GeometricMean.Syntax=[ <Liste Nombres> ]
GetTime=LireTemps
GetTime.Syntax=[]\n[ <Format> ]
GroebnerDegRevLex=GroebnerDegInvLex
GroebnerDegRevLex.Syntax=[ <Liste Polyn??mes> ]\n[ <Liste Polyn??mes>, <Liste Variables> ]
GroebnerLex.Syntax=[ <Liste Polyn??mes> ]\n[ <Liste Polyn??mes>, <Liste Variables> ]
GroebnerLexDeg.Syntax=[ <Liste Polyn??mes> ]\n[ <Liste Polyn??mes>, <Liste Variables> ]
HarmonicMean=MoyenneHarmonique
HarmonicMean.Syntax=[ <Liste Nombres> ]
Height=Hauteur
Height.Syntax=[ <Solide> ]
HideLayer=CacherCalque
HideLayer.Syntax=[ <Nombre> ]
Histogram=Histogramme
Histogram.Syntax=[ <Liste des bornes des classes>, <Liste Hauteurs> ]\n[ <Liste des bornes des classes>, <S??rie brute>, <Densit?? true|false>, <Echelle (optionnel)> ]\n[ <Bool??en Cumul>, <Liste des bornes des classes>, <S??rie brute>, <Densit?? true|false>, <Echelle (optionnel)> ]
HistogramRight=HistogramDroite
HistogramRight.Syntax=[ <Liste des bornes des classes>, <Liste Hauteurs> ]\n[ <Liste des bornes des classes>, <S??rie brute>, <Densit?? true|false>, <Echelle (optionnel)>  ]\n[ <Bool??en Cumul>, <Liste des bornes des classes>, <S??rie brute>, <Densit?? true|false>, <Echelle (optionnel)> ]
HyperGeometric=HyperG??om??trique
HyperGeometric.Syntax=[ <Taille Population>, <Nombre Succ??s>, <Taille Echantillon> ]\n[ <Taille Population>, <Nombre Succ??s>, <Taille Echantillon>, <Bool??en Cumul> ]\n[ <Taille Population>, <Nombre Succ??s>, <Taille Echantillon>, <Nombre Succ??s>, <Bool??en Cumul> ]
HyperGeometric.SyntaxCAS=[ <Taille Population>, <Nombre Succ??s>, <Taille Echantillon>, <Nombre Succ??s>, <Bool??en Cumul> ]
Hyperbola=Hyperbole
Hyperbola.Syntax=[ <Foyer>, <Foyer>, <Demi Longueur Axe Principal> ]\n[ <Foyer>, <Foyer>, <Segment> ]\n[ <Foyer>, <Foyer>, <Point> ]
IFactor=FactoriseIrr
IFactor.Syntax=[ <Polyn??me> ]
IFactor.SyntaxCAS=[ <Expression> ]
Icosahedron=Icosa??dre
Icosahedron.Syntax=[ <Triangle Equilat??ral> ]\n[ <Point>, <Point>, <Point> ]\n[ <Point>, <Point>, <Direction> ]
Identity=Identit??
Identity.Syntax=[ <Nombre> ]
If=Si
If.Syntax=[ <Condition>, <Alors> ]\n[ <Condition>, <Alors>, <Sinon> ]
ImplicitCurve=CourbeImplicite
ImplicitCurve.Syntax=[ <Liste Points> ]\n[ <f(x, y)> ]
ImplicitDerivative=D??riv??eImplicite
ImplicitDerivative.Syntax=[ <f(x, y)> ]
ImplicitDerivative.SyntaxCAS=[ <f(x, y)> ]\n[ <Expression>, <Fonction y de la variable x>, <Variable x> ]
Incircle=CercleInscrit
Incircle.Syntax=[ <Point>, <Point>, <Point> ]
IndexOf=Position
IndexOf.Syntax=[ <Objet>, <Liste> ]\n[ <Texte>, <Texte> ]\n[ <Objet>, <Liste>, <Position D??part> ]\n[ <Texte>, <Texte>, <Position D??part> ]
Insert=Ins??rer
Insert.Syntax=[ <Liste>, <Liste>, <Position> ]\n[ <Objet>, <Liste>, <Position> ]
Integral=Int??grale
Integral.Syntax=[ <Fonction> ]\n[ <Fonction>, <Variable> ]\n[ <Fonction>, <x initial>, <x final> ]\n[ <Fonction>, <x initial>, <x final>, <Bool??en Calcul> ]
Integral.SyntaxCAS=[ <Fonction> ]\n[ <Fonction>, <Variable> ]\n[ <Fonction>, <x initial>, <x final> ]\n[ <Fonction>, <Variable>, <Valeur D??but>, <Valeur Fin> ]
IntegralBetween=Int??graleDomaine
IntegralBetween.Syntax=[ <Fonction>, <Fonction>, <x initial>, <x final> ]\n[ <Fonction>, <Fonction>, <x initial>, <x final>, <Bool??en Calcul> ]
IntegralBetween.SyntaxCAS=[ <Fonction>, <Fonction>, <x initial>, <x final> ]\n[ <Fonction>, <Fonction>, <Variable>, <Valeur D??but>, <Valeur Fin> ]
IntegralSymbolic=Int??graleSymbolique
IntegralSymbolic.Syntax=[ <Fonction> ]\n[ <Fonction>, <Variable> ]
InteriorAngles=AnglesInt??rieurs
InteriorAngles.Syntax=[ <Polygone> ]
Intersect=Intersection
Intersect.Syntax=[ <Objet>, <Objet> ]\n[ <Objet>, <Objet>, <Num??ro> ]\n[ <Objet>, <Objet>, <Point Initial> ]\n[ <Fonction>, <Fonction>, <x initial>, <x final> ]\n[ <Courbe 1>, <Courbe 2>, <Param??tre 1>, <Param??tre 2> ]
Intersect.SyntaxCAS=[ <Fonction>, <Fonction> ]
IntersectConic=InterConique
IntersectConic.Syntax=[ <Plan>, <Quadrique> ]\n[ <Quadrique>, <Quadrique> ]
IntersectPath=IntersectionChemins
IntersectPath.Syntax=[ <Droite>, <Polygone> ]\n[ <Polygone>, <Polygone> ]
IntersectPath.Syntax3D=[ <Droite>, <Polygone> ]\n[ <Polygone>, <Polygone> ]\n[ <Plan>, <Polygone> ]\n[ <Plan>, <Quadrique> ]
Intersection=Inter
Intersection.Syntax=[ <Liste>, <Liste> ]
InverseBeta.Syntax=[ <Alpha>, <Beta>, <Probabilit??> ]
InverseBinomial=InverseBinomiale
InverseBinomial.Syntax=[ <Nombre d'essais>, <Probabilit?? du Succ??s>, <Probabilit?? cumulative> ]
InverseBinomialMinimumTrials=InverseBinomialeMinEssais
InverseBinomialMinimumTrials.Syntax=[ <Probabilit?? cumulative>, <Probabilit?? du Succ??s>, <Nombre Succ??s> ]
InverseBinomialMinimumTrials.SyntaxCAS=[ <Probabilit?? cumulative>, <Probabilit?? du Succ??s>, <Nombre Succ??s> ]
InverseCauchy.Syntax=[ <M??diane>, <??chelle>, <Probabilit??> ]
InverseChiSquared=InverseKhiCarr??
InverseChiSquared.Syntax=[ <Degr?? de libert??>, <Probabilit??> ]
InverseExponential=InverseExponentielle
InverseExponential.Syntax=[ <Lambda>, <Probabilit??> ]
InverseFDistribution.Syntax=[ <Degr?? libert?? Num??rateur>, <Degr?? libert?? D??nominateur>, <Probabilit??> ]
InverseGamma.Syntax=[ <Alpha>, <Beta>, <Probabilit??> ]
InverseHyperGeometric=InverseHyperG??om??trique
InverseHyperGeometric.Syntax=[ <Taille Population>, <Nombre Succ??s>, <Taille Echantillon>, <Probabilit??> ]
InverseLaplace.Syntax=[ <Fonction> ]\n[ <Fonction>, <Variable> ]\n[ <Fonction>, <Variable>, <Variable> ]
InverseLogNormal=InverseLogNormale
InverseLogNormal.Syntax=[ <Moyenne>, <??cart-type>, <Probabilit??> ]
InverseLogistic=InverseLogistique
InverseLogistic.Syntax=[ <Moyenne>, <??chelle>, <Probabilit??> ]
InverseNormal=InverseNormale
InverseNormal.Syntax=[ <Moyenne>, <??cart-type>, <Probabilit?? cumulative> ]
InversePascal.Syntax=[ <n>, <p>, <Probabilit??> ]
InversePoisson.Syntax=[ <Moyenne>, <Probabilit??> ]
InverseTDistribution.Syntax=[ <Degr?? de libert??>, <Probabilit??> ]
InverseWeibull.Syntax=[ <Forme>, <??chelle>, <Probabilit??> ]
InverseZipf.Syntax=[ <Nombre>, <Exposant>, <Probabilit??> ]
Invert=Inverser
Invert.Syntax=[ <Matrice> ]\n[ <Fonction> ]
IsFactored=EstFactoris??
IsFactored.Syntax=[ <Polyn??me> ]
IsInRegion=EstDansR??gion
IsInRegion.Syntax=[ <Point>, <R??gion> ]
IsInteger=EstEntier
IsInteger.Syntax=[ <Nombre> ]
IsPrime=EstPremier
IsPrime.Syntax=[ <Nombre> ]
IsTangent=EstTangente
IsTangent.Syntax=[ <Droite>, <Conique> ]
IsVertexForm=EstFormeCanonique
IsVertexForm.Syntax=[ <Fonction> ]
Iteration=It??ration
Iteration.Syntax=[ <Fonction>, <Valeur D??but>, <Nombre> ]\n[ <Expression>, <Variables>, <Valeurs d??part>, <Nombre> ]
IterationList=It??rationListe
IterationList.Syntax=[ <Fonction>, <Valeur D??but>, <Nombre> ]\n[ <Expression>, <Variables>, <Valeurs d??part>, <Nombre> ]
IterationList.SyntaxCAS=[ <Fonction>, <Valeur D??but>, <Nombre> ]
Join=Unir
Join.Syntax=[ <Liste de listes> ]\n[ <Liste>, <Liste>, ... ]
JordanDiagonalization=JordanDiagonalisation
JordanDiagonalization.SyntaxCAS=[ <Matrice> ]
KeepIf=GarderSi
KeepIf.Syntax=[ <Condition>, <Liste> ]\n[ <Condition>, <Variable>, <Liste> ]
LCM=PPCM
LCM.Syntax=[ <Liste Nombres> ]\n[ <Nombre>, <Nombre> ]
LCM.SyntaxCAS=[ <Liste Nombres> ]\n[ <Liste Polyn??mes> ]\n[ <Nombre>, <Nombre> ]\n[ <Polyn??me>, <Polyn??me> ]
LUDecomposition=D??compositionLU
LUDecomposition.Syntax=[ <Matrice> ]
LaTeX=LaTeX
LaTeX.Syntax=[ <Objet> ]\n[ <Objet>, <Bool??en pour Substitution Variables> ]\n[ <Objet>, <Bool??en pour Substitution Variables>, <Bool??en pour Affichage Nom> ]
Laplace.Syntax=[ <Fonction> ]\n[ <Fonction>, <Variable> ]\n[ <Fonction>, <Variable>, <Variable> ]
Last=Derniers
Last.Syntax=[ <Liste> ]\n[ <Texte> ]\n[ <Liste>, <Nombre> ]\n[ <Texte>, <Nombre> ]
Last.SyntaxCAS=[ <Liste> ]\n[ <Liste>, <Nombre> ]
LeftSide=MembreGauche
LeftSide.Syntax=[ <??quation> ]
LeftSide.SyntaxCAS=[ <??quation> ]\n[ <Liste ??quations> ]\n[ <Liste ??quations>, <Indice> ]
LeftSum=SommeGauche
LeftSum.Syntax=[ <Fonction>, <x initial>, <x final>, <Nombre Rectangles> ]
Length=Longueur
Length.Syntax=[ <Objet> ]\n[ <Fonction>, <x initial>, <x final> ]\n[ <Fonction>, <Point D??but>, <Point Fin> ]\n[ <Courbe>, <t min>, <t max> ]\n[ <Courbe>, <Point D??but>, <Point Fin> ]
Length.SyntaxCAS=[ <Liste> ]\n[ <Fonction>, <x initial>, <x final> ]\n[ <Fonction>, <Variable>, <x initial>, <x final> ]
LetterToUnicode=LettreEnUnicode
LetterToUnicode.Syntax=[ <Lettre> ]
Limit=Limite
Limit.Syntax=[ <Fonction>, <Valeur> ]
Limit.SyntaxCAS=[ <Expression>, <Valeur> ]\n[ <Expression>, <Variable>, <Valeur> ]
LimitAbove=LimDroite
LimitAbove.Syntax=[ <Fonction>, <Valeur> ]
LimitAbove.SyntaxCAS=[ <Expression>, <Valeur> ]\n[ <Expression>, <Variable>, <Valeur> ]
LimitBelow=LimGauche
LimitBelow.Syntax=[ <Fonction>, <Valeur> ]
LimitBelow.SyntaxCAS=[ <Expression>, <Valeur> ]\n[ <Expression>, <Variable>, <Valeur> ]
Line=Droite
Line.Syntax=[ <Point>, <Point> ]\n[ <Point>, <Ligne parall??le> ]\n[ <Point>, <Vecteur> ]
LineBisector=M??diatrice
LineBisector.Syntax=[ <Segment> ]\n[ <Point>, <Point> ]
LineBisector.Syntax3D=[ <Segment> ]\n[ <Point>, <Point> ]\n[ <Point>, <Point>, <Direction> ]
LineGraph=LigneGraph
LineGraph.Syntax=[ <Liste des coordonn??es de x>, <Liste des coordonn??es de y> ]
Locus=Lieu
Locus.Syntax=[ <Point cr??ant le lieu>, <Point> ]\n[ <Point cr??ant le lieu>, <Curseur> ]\n[ <Champ vectoriel>, <Point> ]\n[ <f(x, y)>, <Point> ]
LocusEquation=EquationLieu
LocusEquation.Syntax=[ <Lieu> ]\n[ <Point Lieu>, <Point mobile> ]\n[ <Bool??en>, <Point mobile> ]
LogNormal=LogNormale
LogNormal.Syntax=[ <Moyenne>, <??cart-type>, <Nombre Succ??s> ]\n[ <Moyenne>, <??cart-type>, <Nombre Succ??s>, <Bool??en Cumul>  ]\n[ <Moyenne>, <??cart-type>, x, <Bool??en Cumul> ]
Logistic=Logistique
Logistic.Syntax=[ <Moyenne>, <??chelle>, <Nombre Succ??s> ]\n[ <Moyenne>, <??chelle>, <Nombre Succ??s>, <Bool??en Cumul>  ]\n[ <Moyenne>, <??chelle>, x, <Bool??en Cumul> ]
LowerSum=SommeInf??rieure
LowerSum.Syntax=[ <Fonction>, <x initial>, <x final>, <Nombre Rectangles> ]
MAD=DAM
MatrixPlot=ImageMatrice
MatrixRank=Rang
MatrixRank.Syntax=[ <Matrice> ]
Max.Syntax=[ <Intervalle> ]\n[ <Nombre>, <Nombre> ]\n[ <Liste> ]\n[ <Liste Donn??es>, <Liste Effectifs> ]\n[ <Fonction>, <x initial>, <x final> ]
Max.SyntaxCAS=[ <Liste> ]\n[ <Intervalle> ]\n[ <Nombre>, <Nombre> ]\n[ <Fonction>, <x initial>, <x final> ]\n[ <Liste Donn??es>, <Liste Effectifs> ]
Maximize=Maximiser
Maximize.Syntax=[ <Nombre li??>, <Nombre libre> ]\n[ <Nombre li??>, <Point sur chemin> ]
Mean=Moyenne
Mean.Syntax=[ <S??rie brute> ]\n[ <Liste Nombres>, <Liste Effectifs> ]
MeanX=MoyenneX
MeanX.Syntax=[ <Liste Points> ]
MeanY=MoyenneY
MeanY.Syntax=[ <Liste Points> ]
Median=M??diane
Median.Syntax=[ <S??rie brute> ]\n[ <Liste Nombres>, <Liste Effectifs> ]
Median.SyntaxCAS=[ <Liste Nombres> ]
Midpoint=MilieuCentre
Midpoint.Syntax=[ <Segment> ]\n[ <Conique> ]\n[ <Intervalle> ]\n[ <Point>, <Point> ]
Min.Syntax=[ <Intervalle> ]\n[ <Nombre>, <Nombre> ]\n[ <Liste> ]\n[ <Liste Donn??es>, <Liste Effectifs> ]\n[ <Fonction>, <x initial>, <x final> ]
Min.SyntaxCAS=[ <Liste> ]\n[ <Intervalle> ]\n[ <Nombre>, <Nombre> ]\n[ <Fonction>, <x initial>, <x final> ]\n[ <Liste Donn??es>, <Liste Effectifs> ]
MinimalPolynomial=Polyn??meMinimal
MinimalPolynomial.Syntax=[ <Matrice> ]
Minimize=Minimiser
Minimize.Syntax=[ <Nombre li??>, <Nombre libre> ]\n[ <Nombre li??>, <Point sur chemin> ]
MinimumSpanningTree=ArbreCouvrantMinimum
MinimumSpanningTree.Syntax=[ <Liste Points> ]
Mirror=Sym??trie
Mirror.Syntax=[ <Objet>, <Point> ]\n[ <Objet>, <Droite> ]\n[ <Objet>, <Cercle> ]
Mirror.Syntax3D=[ <Objet>, <Point> ]\n[ <Objet>, <Droite> ]\n[ <Objet>, <Plan> ]\n[ <Objet>, <Cercle> ]
MixedNumber=FractionPropre
MixedNumber.SyntaxCAS=[ <Nombre> ]
Mod=Reste
Mod.Syntax=[ <Dividende>, <Diviseur> ]\n[ <Polyn??me Dividende>, <Polyn??me Diviseur> ]
Mode.Syntax=[ <Liste Nombres> ]
ModularExponent=ExposantModulaire
ModularExponent.Syntax=[ <Nombre>, <Nombre>, <Nombre> ]
NDerivative=ND??riv??e
NDerivative.Syntax=[ <Fonction> ]\n[ <Fonction>, <Ordre> ]
NIntegral=NInt??grale
NIntegral.Syntax=[ <Fonction> ]\n[ <Fonction>, <x initial>, <x final> ]\n[ <Fonction>, <x initial>, <Start y-Value>, <x final> ]
NIntegral.SyntaxCAS=[ <Fonction>, <x initial>, <x final> ]\n[ <Fonction>, <Variable>, <Valeur D??but>, <Valeur Fin> ]
NInvert=NInverser
NInvert.Syntax=[ <Fonction> ]
NSolutions.Syntax=[ <??quation> ]
NSolutions.SyntaxCAS=[ <??quation> ]\n[ <??quation>, <Variable> ]\n[ <??quation>, <Variable = valeur d??part> ]\n[ <Liste ??quations>, <Liste Variables> ]
NSolve=NR??soudre
NSolve.Syntax=[ <??quation> ]
NSolve.SyntaxCAS=[ <??quation> ]\n[ <??quation>, <Variable> ]\n[ <??quation>, <Variable = valeur d??part> ]\n[ <Liste ??quations>, <Liste Variables> ]
NSolveODE=NR??solEquaDiff
NSolveODE.Syntax=[ <Liste des D??riv??es>, <Abscisse initiale>, <Liste des ordonn??es initiales>, <Abscisse finale> ]
Name=Nom
Name.Syntax=[ <Objet> ]
Net=Patron
Net.Syntax=[ <Poly??dre>, <Nombre> ]\n[ <Poly??dre>, <Nombre>, <Face>, <Ar??te>, <Ar??te>, ... ]
NextPrime=PremierSuivant
NextPrime.Syntax=[ <Nombre> ]
Normal=Normale
Normal.Syntax=[ <Moyenne>, <??cart-type>, <Nombre Succ??s> ]\n[ <Moyenne>, <??cart-type>, <Nombre Succ??s>, <Bool??en Cumul> ]\n[ <Moyenne>, <??cart-type>, x, <Bool??en Cumul> ]
NormalQuantilePlot=NormaleQuantile
NormalQuantilePlot.Syntax=[ <S??rie brute> ]
Normalize=Normaliser
Normalize.Syntax=[ <Liste Nombres> ]\n[ <Liste Points> ]
Numerator=Num??rateur
Numerator.Syntax=[ <Nombre> ]\n[ <Fonction> ]
Numerator.SyntaxCAS=[ <Expression> ]
Numeric=Num??rique
Numeric.SyntaxCAS=[ <Expression> ]\n[ <Expression>, <nombre de chiffres> ]
Object=Objet
Object.Syntax=[ <Nom Objet en Texte> ]
Octahedron=Octa??dre
Octahedron.Syntax=[ <Triangle Equilat??ral> ]\n[ <Point>, <Point>, <Point> ]\n[ <Point>, <Point>, <Direction> ]
Ordinal.Syntax=[ <Entier naturel> ]
OrdinalRank=Positions
OrdinalRank.Syntax=[ <Liste> ]
OrthogonalLine=Perpendiculaire
OrthogonalLine.Syntax=[ <Point>, <Droite> ]\n[ <Point>, <Segment> ]\n[ <Point>, <Vecteur> ]
OrthogonalLine.Syntax3D=[ <Point>, <Droite> ]\n[ <Point>, <Segment> ]\n[ <Point>, <Vecteur> ]\n[ <Point>, <Plan> ]\n[ <Droite>, <Droite> ]\n[ <Point>, <Direction>, <Direction> ]\n[ <Point>, <Droite>, <Contexte> ]
OrthogonalPlane=PlanOrthogonal
OrthogonalPlane.Syntax=[ <Point>, <Droite> ]\n[ <Point>, <Vecteur> ]
OrthogonalVector=VecteurOrthogonal
OrthogonalVector.Syntax=[ <Droite> ]\n[ <Segment> ]\n[ <Vecteur> ]
OrthogonalVector.Syntax3D=[ <Droite> ]\n[ <Segment> ]\n[ <Vecteur> ]\n[ <Plan> ]
OrthogonalVector.SyntaxCAS=[ <Vecteur> ]
OsculatingCircle=CercleOsculateur
OsculatingCircle.Syntax=[ <Point>, <Objet> ]
PMCC=CoeffCorr??lation
PMCC.Syntax=[ <Liste Points> ]\n[ <Liste des coordonn??es de x>, <Liste des coordonn??es de y> ]
Pan=D??placerGraphique
Pan.Syntax=[ <x>, <y> ]
Pan.Syntax3D=[ <x>, <y> ]\n[ <x>, <y>, <z> ]
Parabola=Parabole
Parabola.Syntax=[ <Point>, <Droite> ]
Parameter=Param??tre
Parameter.Syntax=[ <Parabole> ]
ParametricDerivative=D??riv??eParam??trique
ParametricDerivative.Syntax=[ <Courbe> ]
ParseToFunction=AnalyserFonction
ParseToFunction.Syntax=[ <Fonction>, <Cha??ne> ]
ParseToNumber=AnalyserNombre
ParseToNumber.Syntax=[ <Nombre>, <Cha??ne> ]
PartialFractions=El??mentsSimples
PartialFractions.Syntax=[ <Fonction> ]
PartialFractions.SyntaxCAS=[ <Fonction> ]\n[ <Fonction>, <Variable> ]
Pascal.Syntax=[ <n>, <p> ]\n[ <n>, <p>, <Bool??en Cumul> ]\n[ <n>, <p>, <Nombre Succ??s>, <Bool??en Cumul> ]
Pascal.SyntaxCAS=[ <n>, <p>, <Nombre Succ??s>, <Bool??en Cumul> ]
PathParameter=Param??treChemin
PathParameter.Syntax=[ <Point sur Chemin> ]
Payment=Paiement
Payment.Syntax=[ <Intensit??>, <Nombre de P??riodes>, <Valeur Actuelle>, <Valeur Future (optionnelle)>, <Type (optionnel)> ]
PenStroke.Syntax=[ <Point>, ..., <Point> ]
Percentile=Centile
Percentile.Syntax=[ <Liste Nombres>, <Pourcentage> ]
Perimeter=P??rim??tre
Perimeter.Syntax=[ <Polygone> ]\n[ <Conique> ]\n[ <Lieu> ]
Periods=P??riodes
Periods.Syntax=[ <Intensit??>, <Paiement>, <Valeur Actuelle>, <Valeur Future (optionnelle)>, <Type (optionnel)> ]
PieChart=Camembert
PieChart.Syntax=[ <Liste Effectifs> ]\n[ <Liste Effectifs>, <Centre>, <Rayon> ]
Plane=Plan
Plane.Syntax=[ <Polygone> ]\n[ <Conique> ]\n[ <Point>, <Plan> ]\n[ <Point>, <Droite> ]\n[ <Droite>, <Droite> ]\n[ <Point>, <Point>, <Point> ]\n[ <Point>, <Vecteur>, <Vecteur> ]
PlaneBisector=PlanM??diateur
PlaneBisector.Syntax=[ <Segment> ]\n[ <Point>, <Point> ]
PlaySound=JouerSon
PlaySound.Syntax=[ <URL> ]\n[ <false|true> ]\n[ <Fonction>, <Valeur Min>, <Valeur Max> ]\n[ <Fonction>, <Valeur Min>, <Valeur Max>, <D??bit>, <Profondeur> ]
PlotSolve=TraceSolution
PlotSolve.Syntax=[ <??quation en x> ]
Point.Syntax=[ <Objet> ]\n[ <Objet>, <Param??tre> ]\n[ <Point>, <Vecteur> ]\n[ <Liste> ]
PointIn=PointDans
PointIn.Syntax=[ <R??gion> ]
PointList=PointListe
PointList.Syntax=[ <Liste> ]
Poisson.Syntax=[ <Moyenne> ]\n[ <Moyenne>, <Bool??en Cumul> ]\n[ <Moyenne>, <Nombre Succ??s>, <Bool??en Cumul> ]
Poisson.SyntaxCAS=[ <Moyenne>, <Nombre Succ??s>, <Bool??en Cumul> ]
Polar=Polaire
Polar.Syntax=[ <Point>, <Conique> ]\n[ <Droite>, <Conique> ]
PolyLine=LigneBris??e
PolyLine.Syntax=[ <Liste Points> ]\n[ <Point>, ..., <Point> ]
Polygon=Polygone
Polygon.Syntax=[ <Liste Points> ]\n[ <Point>, ..., <Point> ]\n[ <Point>, <Point>, <Nombre Sommets> ]
Polygon.Syntax3D=[ <Liste Points> ]\n[ <Point>, ..., <Point> ]\n[ <Point>, <Point>, <Nombre Sommets> ]\n[ <Point>, <Point>, <Nombre Sommets>, <Direction> ]
Polynomial=Polyn??me
Polynomial.Syntax=[ <Fonction> ]\n[ <Liste Points> ]
Polynomial.SyntaxCAS=[ <Fonction> ]\n[ <Fonction>, <Variable> ]
PresentValue=ValeurActuelle
PresentValue.Syntax=[ <Intensit??>, <Nombre de P??riodes>, <Paiement>, <Valeur Future (optionnelle)>, <Type (optionnel)> ]
PreviousPrime=PremierPr??c??dent
PreviousPrime.Syntax=[ <Nombre> ]
PrimeFactors=FacteursPremiers
PrimeFactors.Syntax=[ <Nombre> ]
Prism=Prisme
Prism.Syntax=[ <Polygone>, <Point> ]\n[ <Polygone>, <Hauteur> ]\n[ <Point>, <Point>, ... ]
Product=Produit
Product.Syntax=[ <S??rie brute> ]\n[ <Liste Nombres>, <Nombre> ]\n[ <Liste Nombres>, <Liste Effectifs> ]\n[ <Expression>, <Variable>, <Valeur D??but>, <Valeur Fin> ]
Product.SyntaxCAS=[ <Liste d'expressions> ]\n[ <Expression>, <Variable>, <Position D??part>, <??> ]
Prove=Prouver
Prove.Syntax=[ <Bool??en> ]
ProveDetails=PreuveD??taill??e
ProveDetails.Syntax=[ <Bool??en> ]
Pyramid=Pyramide
Pyramid.Syntax=[ <Polygone>, <Point> ]\n[ <Polygone>, <Hauteur> ]\n[ <Point>, <Point>, <Point>, <Point>, ... ]
Q1.Syntax=[ <S??rie brute> ]\n[ <Liste Nombres>, <Liste Effectifs> ]
Q3.Syntax=[ <S??rie brute> ]\n[ <Liste Nombres>, <Liste Effectifs> ]
QRDecomposition=D??compositionQR
QRDecomposition.Syntax=[ <Matrice> ]
QuadricSide=SurfaceLat??rale
QuadricSide.Syntax=[ <Quadrique> ]
RSquare=R2
RSquare.Syntax=[ <Liste Points>, <Fonction> ]
Radius=Rayon
Radius.Syntax=[ <Conique> ]
Random=Al??aEntreBornes
Random.Syntax=[ <Entier Minimum>, <Entier Maximum> ]\n[ <Entier Minimum>, <Entier Maximum>, <Nombre de tirages> ]\n[ <Entier Minimum>, <Entier Maximum>, <Bool??en> ]
Random.SyntaxCAS=[ <Entier Minimum>, <Entier Maximum> ]\n[ <Entier Minimum>, <Entier Maximum>, <Nombre de tirages> ]
RandomBinomial=Al??aBinomiale
RandomBinomial.Syntax=[ <Nombre d'essais>, <Probabilit??> ]
RandomDiscrete=HasardDiscret
RandomDiscrete.Syntax=[ <Liste>, <Liste> ]
RandomElement=El??mentAuHasard
RandomElement.Syntax=[ <Liste> ]
RandomNormal=Al??aNormale
RandomNormal.Syntax=[ <Moyenne>, <??cart-type> ]
RandomPointIn=PointAuHasardDans
RandomPointIn.Syntax=[ <R??gion> ]\n[ <Liste Points> ]\n[ <xMin>, <xMax>, <yMin>, <yMax> ]
RandomPoisson=Al??aPoisson
RandomPoisson.Syntax=[ <Moyenne> ]
RandomPolynomial=Polyn??meAuHasard
RandomPolynomial.Syntax=[ <Degr??>, <Minimum pour Coefficients>, <Maximum pour Coefficients> ]
RandomPolynomial.SyntaxCAS=[ <Degr??>, <Minimum pour Coefficients>, <Maximum pour Coefficients> ]\n[ <Variable>, <Degr??>, <Minimum pour Coefficients>, <Maximum pour Coefficients> ]
RandomUniform=Al??aUniforme
RandomUniform.Syntax=[ <Min>, <Max> ]\n[ <Min>, <Max>, <Nombre de tirages> ]
Rate=Taux
Rate.Syntax=[ <Nombre de P??riodes>, <Paiement>, <Valeur Actuelle>, <Valeur Future (optionnelle)>, <Type (optionnel)>, <Estimation (optionnelle)> ]
Rationalize=EcritureRationnelle
Rationalize.SyntaxCAS=[ <Nombre> ]
Ray=DemiDroite
Ray.Syntax=[ <Point D??but>, <Point> ]\n[ <Point D??but>, <Vecteur> ]
ReadText=LireTexte
ReadText.Syntax=[ <Texte> ]
RectangleSum=SommeRectangles
RectangleSum.Syntax=[ <Fonction>, <x initial>, <x final>, <Nombre Rectangles>, <Position pour hauteur> ]
ReducedRowEchelonForm=MatriceEchelonn??eR??duite
ReducedRowEchelonForm.Syntax=[ <Matrice> ]
Relation.Syntax=[ <Liste> ]\n[ <Objet>, <Objet> ]
RemovableDiscontinuity=PointDiscontinue
RemovableDiscontinuity.Syntax=[ <Fonction> ]
Remove=Supprimer
Remove.Syntax=[ <Liste>, <Liste> ]
RemoveUndefined=Nettoyer
RemoveUndefined.Syntax=[ <Liste> ]
Rename=Renommer
Rename.Syntax=[ <Objet>, <Nom> ]
Repeat=R??p??ter
Repeat.Syntax=[ <Nombre>, <Script>, <Script>, ... ]
ReplaceAll=RemplacerTout
ReplaceAll.Syntax=[ <Texte>, <Texte ?? rechercher>, <Texte de remplacement> ]
ResidualPlot=R??sidus
ResidualPlot.Syntax=[ <Liste Points>, <Fonction> ]
Reverse=Retourner
Reverse.Syntax=[ <Liste> ]
RightSide=MembreDroite
RightSide.Syntax=[ <??quation> ]
RightSide.SyntaxCAS=[ <??quation> ]\n[ <Liste ??quations> ]\n[ <Liste ??quations>, <Indice> ]
RigidPolygon=PolygoneInd??formable
RigidPolygon.Syntax=[ <Polygone> ]\n[ <Polygone>, <D??calage x>, <D??calage y> ]\n[ <Point libre>, ..., <Point libre> ]
Root=Racine
Root.Syntax=[ <Polyn??me> ]\n[ <Fonction>, <x initial> ]\n[ <Fonction>, <x initial>, <x final> ]
Root.SyntaxCAS=[ <Polyn??me> ]
RootList=RacineListe
RootList.Syntax=[ <Liste> ]
RootMeanSquare=MoyenneQuadratique
RootMeanSquare.Syntax=[ <Liste Nombres> ]
Roots=Racines
Roots.Syntax=[ <Fonction>, <x initial>, <x final> ]
Rotate=Rotation
Rotate.Syntax=[ <Objet>, <Angle> ]\n[ <Objet>, <Angle>, <Point> ]
Rotate.Syntax3D=[ <Objet>, <Angle> ]\n[ <Objet>, <Angle>, <Point> ]\n[ <Objet>, <Angle>, <Axe de Rotation> ]\n[ <Objet>, <Angle>, <Point sur Axe>, <Direction ou Plan d'Axe> ]
RotateText=TexteTourn??
RotateText.Syntax=[ <Texte>, <Angle> ]
Row=Ligne
Row.Syntax=[ <Cellule> ]
RunClickScript=LanceScriptClic
RunClickScript.Syntax=[ <Objet> ]
RunUpdateScript=LanceScriptActu
RunUpdateScript.Syntax=[ <Objet> ]
SD=EcartType
SDX=EcartTypeX
SDX.Syntax=[ <Liste Points> ]
SDY=EcartTypeY
SDY.Syntax=[ <Liste Points> ]
SVD=DVS
SVD.Syntax=[ <Matrice> ]
SXX=nVarX
SXX.Syntax=[ <Liste Nombres> ]\n[ <Liste Points> ]
SXY=nCov
SXY.Syntax=[ <Liste Points> ]\n[ <Liste Nombres>, <Liste Nombres> ]
SYY=nVarY
SYY.Syntax=[ <Liste Points> ]
Sample=Echantillon
Sample.Syntax=[ <Liste>, <Taille> ]\n[ <Liste>, <Taille>, <bool??en true : avec r??p??tition> ]
SampleSD=EcartTypeEchantillon
SampleSD.SyntaxCAS=[ <Liste Nombres> ]
SampleSDX=EcartTypeEchantillonX
SampleSDX.Syntax=[ <Liste Points> ]
SampleSDY=EcartTypeEchantillonY
SampleSDY.Syntax=[ <Liste Points> ]
SampleVariance=VarianceEchantillon
SampleVariance.Syntax=[ <S??rie brute> ]\n[ <Liste Nombres>, <Liste Effectifs> ]
SampleVariance.SyntaxCAS=[ <Liste Nombres> ]
ScientificText=NotationScientifique
ScientificText.Syntax=[ <Nombre> ]\n[ <Nombre>, <Pr??cision> ]
SecondAxis=PetitAxe
SecondAxis.Syntax=[ <Conique> ]
SecondAxisLength=LDemiPetitAxe
SecondAxisLength.Syntax=[ <Conique> ]
Sector=Secteur
Sector.Syntax=[ <Conique>, <Point>, <Point> ]\n[ <Conique>, <Valeur Param??tre>, <Valeur Param??tre> ]
Segment.Syntax=[ <Point>, <Point> ]\n[ <Point>, <Longueur> ]
SelectObjects=S??lectionObjets
SelectObjects.Syntax=[ ]\n[ <Objet>, <Objet>, ... ]
SelectedElement=El??mentS??lectionn??
SelectedElement.Syntax=[ <Liste> ]
SelectedIndex=PositionS??lectionn??e
SelectedIndex.Syntax=[ <Liste> ]
Semicircle=DemiCercle
Semicircle.Syntax=[ <Point>, <Point> ]
Sequence=S??quence
Sequence.Syntax=[ <Valeur Fin> ]\n[ <Valeur D??but>, <Valeur Fin> ]\n[ <Valeur D??but>, <Valeur Fin>, <pas> ]\n[ <Expression>, <Variable>, <Valeur D??but>, <Valeur Fin> ]\n[ <Expression>, <Variable>, <Valeur D??but>, <Valeur Fin>, <pas> ]
SetActiveView=SoitVueActive
SetActiveView.Syntax=[ <Vue> ]\n[ <Plan> ]
SetAxesRatio=SoitRapportAxes
SetAxesRatio.Syntax=[ <Nombre>, <Nombre> ]
SetAxesRatio.Syntax3D=[ <Nombre>, <Nombre> ]\n[ <Nombre>, <Nombre>, <Nombre> ]
SetBackgroundColor=SoitCouleurAPlan
SetBackgroundColor.Syntax=[ <Couleur> ]\n[ <Objet>, <Couleur> ]\n[ <Rouge>, <Vert>, <Bleu> ]\n[ <Objet>, <Rouge>, <Vert>, <Bleu> ]
SetCaption=SoitL??gende
SetCaption.Syntax=[ <Objet>, <Texte> ]
SetColor=SoitCouleur
SetColor.Syntax=[ <Objet>, <Couleur> ]\n[ <Objet>, <Rouge>, <Vert>, <Bleu> ]
SetConditionToShowObject=SoitConditionPourAfficherObjet
SetConditionToShowObject.Syntax=[ <Objet>, <Condition> ]
SetConstructionStep=Soit??tapeConstruction
SetConstructionStep.Syntax=[ <Nombre> ]
SetCoords=SoitCoordonn??es
SetCoords.Syntax=[ <Objet>, <x>, <y> ]\n[ <Objet>, <x>, <y>, <z> ]
SetDecoration=SoitD??coration
SetDecoration.Syntax=[ <Objet>, <Nombre> ]\n[ <Segment>, <Nombre>, <Nombre>]
SetDynamicColor=SoitCouleurDynamique
SetDynamicColor.Syntax=[ <Objet>, <Rouge>, <Vert>, <Bleu> ]\n[ <Objet>, <Rouge>, <Vert>, <Bleu>, <Opacit??> ]
SetFilling=SoitRemplissage
SetFilling.Syntax=[ <Objet>, <Nombre> ]
SetFixed=SoitFix??
SetFixed.Syntax=[ <Objet>, <true | false> ]\n[ <Objet>, <true | false>, <true | false> ]
SetImage=SoitImage
SetImage.Syntax=[ <Objet>, <Image> ]\n[ <Objet>, <Texte> ]
SetLabelMode=SoitOptionEtiquette
SetLabelMode.Syntax=[ <Objet>, <Nombre> ]
SetLayer=SoitCalque
SetLayer.Syntax=[ <Objet>, <Calque> ]
SetLevelOfDetail=SoitNiveaudeD??tail
SetLevelOfDetail.Syntax=[ <Surface>, <0 | 1> ]
SetLineStyle=SoitStyleTrac??
SetLineStyle.Syntax=[ <Objet>, <Nombre> ]
SetLineThickness=Soit??paisseurTrac??
SetLineThickness.Syntax=[ <Objet>, <Nombre> ]
SetPerspective=SoitDispositions
SetPerspective.Syntax=[ <Texte> ]
SetPointSize=SoitTaillePoint
SetPointSize.Syntax=[ <Objet>, <Nombre> ]
SetPointStyle=SoitStylePoint
SetPointStyle.Syntax=[ <Point>, <Nombre> ]
SetSeed=SoitGraine
SetSeed.Syntax=[ <Entier naturel> ]
SetSpinSpeed=SoitVitesseRotation
SetSpinSpeed.Syntax=[ <Nombre> ]
SetTooltipMode=SoitOptionInfoBulle
SetTooltipMode.Syntax=[ <Objet>, <Nombre> ]
SetTrace=SoitTrace
SetTrace.Syntax=[ <Objet>, <true | false> ]
SetValue=SoitValeur
SetValue.Syntax=[ <Bool??en>, <0|1> ]\n[ <Objet>, <Objet> ]\n[ <Liste>, <Nombre>, <Objet> ]
SetViewDirection=SoitDirectionVue
SetViewDirection.Syntax=[ ]\n[ <Direction> ]\n[ <Direction>, <Bool??en Animation> ]
SetVisibleInView=SoitVisibleDansVue
SetVisibleInView.Syntax=[ <Objet>, <Num??ro 1|2|-1>, <Bool??en> ]
Shear=Transvection
Shear.Syntax=[ <Objet>, <Droite>, <Rapport> ]
ShortestDistance=PlusCourteDistance
ShortestDistance.Syntax=[ <Liste Segments>, <Point D??but>, <Point Fin>, <Bool??en pond??r??> ]
ShowAxes=AfficherAxes
ShowAxes.Syntax=[]\n[ <Bool??en> ]\n[ <Vue>, <Bool??en> ]
ShowGrid=AfficherGrille
ShowGrid.Syntax=[]\n[ <Bool??en> ]\n[ <Vue>, <Bool??en> ]
ShowLabel=AfficherEtiquette
ShowLabel.Syntax=[ <Objet>, <Bool??en> ]
ShowLayer=AfficherCalque
ShowLayer.Syntax=[ <Nombre> ]
Shuffle=M??lang??e
Shuffle.Syntax=[ <Liste> ]
SigmaXX=SommeXX
SigmaXX.Syntax=[ <Liste Points> ]\n[ <S??rie brute> ]\n[ <Liste Nombres>, <Liste Effectifs> ]
SigmaXY=SommeXY
SigmaXY.Syntax=[ <Liste Points> ]\n[ <Liste des coordonn??es de x>, <Liste des coordonn??es de y> ]
SigmaYY=SommeYY
SigmaYY.Syntax=[ <Liste Points> ]
Simplify=Simplifier
Simplify.Syntax=[ <Fonction> ]\n[ <Texte> ]
Simplify.SyntaxCAS=[ <Fonction> ]
Slider=Curseur
Slider.Syntax=[ <Min>, <Max>, <pas>, <Vitesse>, <Longueur>, <EstUnAngle>, <Horizontal>, <Anim??>, <Al??atoire> ]
Slope=Pente
Slope.Syntax=[ <Droite> ]
SlopeField=ChampVecteurs
SlopeField.Syntax=[ <f(x, y)> ]\n[ <f(x, y)>, <Nombre n> ]\n[ <f(x, y)>, <Nombre n>, <Longueur a> ]\n[ <f(x, y)>, <Nombre n>, <Longueur a>, <Min x>, <Min y>, <Max x>, <Max y> ]
SlowPlot=Cr??erGraphique
SlowPlot.Syntax=[ <Fonction> ]\n[ <Fonction>, <Bool??en R??p??ter> ]
Solutions.Syntax=[ <??quation> ]
Solutions.SyntaxCAS=[ <??quation> ]\n[ <??quation>, <Variable> ]\n[ <Liste ??quations>, <Liste Variables> ]
Solve=R??soudre
Solve.Syntax=[ <??quation> ]
Solve.SyntaxCAS=[ <??quation en x> ]\n[ <??quation>, <Variable> ]\n[ <Liste ??quations>, <Liste Variables> ]\n[ <Liste ??quations param??triques>, <Liste Variables> ]\n[ <??quation>, <Variable>, <Liste Hypoth??ses> ]
SolveCubic=R??soudreCubique
SolveCubic.SyntaxCAS=[ <Polyn??me de degr?? 3> ]
SolveODE=R??solEquaDiff
SolveODE.Syntax=[ <f'(x, y)> ]\n[ <f'(x, y)>, <Point de f> ]\n[ <f'(x, y)>, <x initial>, <y initial>, <x final>, <Pas> ]\n[ <y'>, <x'>, <x initial>, <y initial>, <t final>, <Pas> ]\n[ <b(x)>, <c(x)>, <f(x)>, <x initial>, <y initial>, <y'initial>, <x final>, <Pas> ]
SolveODE.SyntaxCAS=[ <??quation> ]\n[ <??quation>, <Point(s) de f> ]\n[ <??quation>, <Point(s) de f>, <Point(s) de f'> ]\n[ <??quation>, <Fonction y de la variable x>, <Variable x>, <Point(s) de f> ] \n[ <??quation>, <Fonction y de la variable x>, <Variable x>, <Point(s) de f>, <Point(s) de f'> ]
SolveQuartic=R??soudreQuartique
SolveQuartic.SyntaxCAS=[ <Polyn??me de degr?? 4> ]
Sort=Trier
Sort.Syntax=[ <Liste> ]\n[ <Valeurs>, <Cl??s> ]
Spearman.Syntax=[ <Liste Points> ]\n[ <Liste Nombres>, <Liste Nombres> ]
Sphere=Sph??re
Sphere.Syntax=[ <Point>, <Rayon> ]\n[ <Point>, <Point> ]
Spline.Syntax=[ <Liste Points> ]\n[ <Liste Points>, <Degr?? ??? 3> ]\n[ <Liste Points>, <Degr?? ??? 3>, <Fonction de poids> ]
Split=CoupeTexte
Split.Syntax=[ <Texte>, <Liste des ??l??ments ?? couper> ]
StartAnimation=D??marrerAnimation
StartAnimation.Syntax=[ ]\n[ <Bool??en> ]\n[ <Curseur ou Point>, <Curseur ou Point>, ... ]\n[ <Curseur ou Point>, <Curseur ou Point>, ..., <Bool??en> ]
StartRecord=D??marrerEnregistrement
StartRecord.Syntax=[ ]\n[ <Bool??en> ]
StemPlot=TigeFeuilles
StemPlot.Syntax=[ <Liste> ]\n[ <Liste>, <Ajustement -1|0|1> ]
StepGraph=DiagrammeEscaliers
StepGraph.Syntax=[ <Liste Points> ]\n[ <Liste Points>, <Bool??en Reli??s> ]\n[ <Liste des coordonn??es de x>, <Liste des coordonn??es de y> ]\n[ <Liste Points>, <Bool??en Reli??s>, <Style des points> ]\n[ <Liste des coordonn??es de x>, <Liste des coordonn??es de y>, <Bool??en Reli??s> ]\n[ <Liste des coordonn??es de x>, <Liste des coordonn??es de y>, <Bool??en Reli??s>, <Style des points> ]
StickGraph=DiagrammeB??tons
StickGraph.Syntax=[ <Liste Points> ]\n[ <Liste Points>, <Bool??en Horizontal> ]\n[ <Liste des coordonn??es de x>, <Liste des coordonn??es de y> ]\n[ <Liste des coordonn??es de x>, <Liste des coordonn??es de y>, <Bool??en Horizontal> ]
Stretch=Dilatation
Stretch.Syntax=[ <Objet>, <Vecteur> ]\n[ <Objet>, <Droite>, <Rapport> ]
Substitute=Substituer
Substitute.SyntaxCAS=[ <Expression>, <Liste Substitution> ]\n[ <Expression>, <de>, <par> ]
Sum=Somme
Sum.Syntax=[ <Liste> ]\n[ <Liste>, <Nombre> ]\n[ <Liste>, <Liste Effectifs> ]\n[ <Expression>, <Variable>, <Valeur D??but>, <Valeur Fin> ]
Sum.SyntaxCAS=[ <Liste> ]\n[ <Expression>, <Variable>, <Valeur D??but>, <Valeur Fin> ]
SumSquaredErrors=SommeCarr??sErreurs
SumSquaredErrors.Syntax=[ <Liste Points>, <Fonction> ]
SurdText=TexteMath
SurdText.Syntax=[ <Point> ]\n[ <Nombre> ]\n[ <Nombre>, <Liste> ]
Surface.Syntax=[ <Fonction>, <Angle> ]\n[ <Courbe>, <Angle>, <Droite> ]\n[ <Expression>, <Expression>, <Expression>, <Variable 1>, <Valeur D??but>, <Valeur Fin>, <Variable 2>, <Valeur D??but>, <Valeur Fin> ]
TDistribution.Syntax=[ <Degr?? de libert??>, <Nombre Succ??s> ]\n[ <Degr?? de libert??>, <Nombre Succ??s>, <Bool??en Cumul> ]\n[ <Degr?? de libert??>, x, <Bool??en Cumul> ]
TDistribution.SyntaxCAS=[ <Degr?? de libert??>, <Nombre Succ??s> ]
TMean2Estimate=TMoyenne2Estim??e
TMean2Estimate.Syntax=[ <Liste Donn??es ??chantillon 1>, <Liste Donn??es ??chantillon 2>, <Niveau de confiance>, <Bool??en sond??> ]\n[ <Moy ??ch1>, <??-Type ??ch1>, <Taille ??ch1>, <Moy ??ch2>, <??-Type ??ch2>, <Taille ??ch2>, <Niveau de confiance>, <Bool??en sond??> ]
TMeanEstimate=TMoyenneEstim??e
TMeanEstimate.Syntax=[ <Liste Donn??es ??chantillon>, <Niveau de confiance> ]\n[ <Moyenne ??chantillon>, <??cart-Type ??chantillon>, <Taille Echantillon>, <Niveau de confiance> ]
TTest.Syntax=[ <Liste Donn??es ??chantillon>, <Moyenne attendue>, <Valeur critique> ]\n[ <Moyenne ??chantillon>, <??cart-Type ??chantillon>, <Taille Echantillon>, <Moyenne attendue>, <Valeur critique> ]
TTest2.Syntax=[ <Liste Donn??es ??chantillon 1>, <Liste Donn??es ??chantillon 2>, <Valeur critique>, <Bool??en sond??> ]\n[ <Moy ??ch1>, <??-Type ??ch1>, <Taille ??ch1>, <Moy ??ch2>, <??-Type ??ch2>, <Taille ??ch2>, <Valeur critique>, <Bool??en sond??> ]
TTestPaired=TTestAppari??
TTestPaired.Syntax=[ <Liste Donn??es ??chantillon 1>, <Liste Donn??es ??chantillon 2>, <Valeur critique> ]
TableText=Tableau
TableText.Syntax=[ <Liste>, <Liste>, ... ]\n[ <Liste>, <Liste>, ..., <Alignement> ]\n[ <Liste>, <Liste>, ..., <Alignement>, <Largeur min cellule> ]\n[ <Liste>, <Liste>, ..., <Alignement>, <Largeur min cellule>, <Hauteur min cellule> ]
Take=Extraite
Take.Syntax=[ <Liste>, <Position D??but>, <Position Fin> ]\n[ <Liste>, <Position D??but> ]\n[ <Texte>, <Position D??but>, <Position Fin> ]\n[ <Texte>, <Position D??but> ]
Take.SyntaxCAS=[ <Liste>, <Position D??but> ]\n[ <Liste>, <Position D??but>, <Position Fin> ]\n[ <Texte>, <Position D??but>, <Position Fin> ]\n[ <Texte>, <Position D??but> ]
Tangent=Tangente
Tangent.Syntax=[ <Point>, <Conique> ]\n[ <Point>, <Fonction> ]\n[ <Point>, <Courbe> ]\n[ <Abscisse>, <Fonction> ]\n[ <Droite>, <Conique> ]\n[ <Conique>, <Conique> ]
Tangent.SyntaxCAS=[ <Nombre>, <Fonction> ]\n[ <Point>, <Objet> ]
TaylorSeries=Polyn??meTaylor
TaylorSeries.Syntax=[ <Fonction>, <Abscisse>, <Ordre> ]
TaylorSeries.SyntaxCAS=[ <Expression>, <Abscisse>, <Ordre> ]\n[ <Expression>, <Variable>, <Nombre Succ??s>, <Ordre> ]
Tetrahedron=T??tra??dre
Tetrahedron.Syntax=[ <Triangle Equilat??ral> ]\n[ <Point>, <Point>, <Point> ]\n[ <Point>, <Point>, <Direction> ]
Text=Texte
Text.Syntax=[ <Objet> ]\n[ <Objet>, <Bool??en pour Substitution Variables> ]\n[ <Objet>, <Point> ]\n[ <Objet>, <Point>, <Bool??en pour Substitution Variables> ]\n[ <Objet>, <Point>, <Bool??en pour Substitution Variables>, <Bool??en pour la formule LaTeX> ]\n[ <Objet>, <Point>, <Bool??en pour Substitution Variables>, <Bool??en pour la formule LaTeX>, <Alignement horizontal -1|0|1> ]\n[ <Objet>, <Point>, <Bool??en pour Substitution Variables>, <Bool??en pour la formule LaTeX>, <Alignement horizontal -1|0|1>, <Alignement vertical -1|0|1> ]
TextToUnicode=TexteEnUnicode
TextToUnicode.Syntax=[ <Texte> ]
Textfield=ChampTexte
Textfield.Syntax=[ <Objet li??> ]
TiedRank=PositionMoy
TiedRank.Syntax=[ <Liste> ]
ToBase=EnBase
ToBase.Syntax=[ <Nombre>, <Base> ]
ToComplex=EnComplexe
ToComplex.Syntax=[ <Vecteur> ]
ToExponential=FormeExponentielle
ToExponential.SyntaxCAS=[ <Nombre complexe> ]
ToPoint=EnPoint
ToPoint.Syntax=[ <Nombre complexe> ]
ToPolar=EnPolaires
ToPolar.Syntax=[ <Nombre complexe> ]\n[ <Vecteur> ]
ToolImage=Ic??neOutil
ToolImage.Syntax=[ <Nombre> ]\n[ <Nombre>, <Point> ]\n[ <Nombre>, <Point>, <Point> ]
Top=EnHaut
Top.Syntax=[ <Quadrique> ]
Translate=Translation
Translate.Syntax=[ <Objet>, <Vecteur> ]\n[ <Vecteur>, <Point D??but> ]
Transpose=Transposer
Transpose.Syntax=[ <Matrice> ]
TrapezoidalSum=SommeTrap??zes
TrapezoidalSum.Syntax=[ <Fonction>, <x initial>, <x final>, <Nombre Trap??zes> ]
TravelingSalesman=Repr??sentantCommerce
TravelingSalesman.Syntax=[ <Liste Points> ]
TriangleCenter=TriangleCentre
TriangleCenter.Syntax=[ <Point>, <Point>, <Point>, <Nombre> ]
TriangleCurve=TriangleCourbe
TriangleCurve.Syntax=[ <Point>, <Point>, <Point>, <??quation> ]
Triangular=Triangulaire
Triangular.Syntax=[ <Borne inf??rieure>, <Borne sup??rieure>, <Mode>, <Nombre Succ??s> ]\n[ <Borne inf??rieure>, <Borne sup??rieure>, <Mode>, <Nombre Succ??s>, <Bool??en Cumul> ]\n[ <Borne inf??rieure>, <Borne sup??rieure>, <Mode>, x, <Bool??en Cumul> ]
TrigCombine=TrigoCombiner
TrigCombine.Syntax=[ <Expression> ]\n[ <Expression>, <Fonction cible> ]
TrigExpand=TrigoD??velopper
TrigExpand.Syntax=[ <Expression> ]\n[ <Expression>, <Fonction cible> ]
TrigExpand.SyntaxCAS=[ <Expression> ]\n[ <Expression>, <Fonction cible> ]\n[ <Expression>, <Fonction cible>, <Variable cible> ]\n[ <Expression>, <Fonction cible>, <Variable cible>, <Variable cible> ]
TrigSimplify=TrigoSimplifier
TrigSimplify.Syntax=[ <Expression> ]
Trilinear=Trilin??aire
Trilinear.Syntax=[ <Point>, <Point>, <Point>, <Nombre>, <Nombre>, <Nombre> ]
TurningPoint=PointInflexion
TurningPoint.Syntax=[ <Polyn??me> ]
TurningPoint.SyntaxCAS=[ <Fonction> ]
Turtle=Tortue
Turtle.Syntax=[]
TurtleBack=TortueRecule
TurtleBack.Syntax=[ <Tortue>, <Distance> ]
TurtleDown=TortueBC
TurtleDown.Syntax=[ <Tortue> ]
TurtleForward=TortueAvance
TurtleForward.Syntax=[ <Tortue>, <Distance> ]
TurtleLeft=TortueAGauche
TurtleLeft.Syntax=[ <Tortue>, <Angle> ]
TurtleRight=TortueADroite
TurtleRight.Syntax=[ <Tortue>, <Angle> ]
TurtleUp=TortueLC
TurtleUp.Syntax=[ <Tortue> ]
Type.Syntax=[ <Objet> ]
UnicodeToLetter=UnicodeEnLettre
UnicodeToLetter.Syntax=[ <Entier naturel> ]
UnicodeToText=UnicodeEnTexte
UnicodeToText.Syntax=[ <Liste Entiers> ]
Uniform=Uniforme
Uniform.Syntax=[ <Borne inf??rieure>, <Borne sup??rieure>, <Nombre Succ??s> ]\n[ <Borne inf??rieure>, <Borne sup??rieure>, <Nombre Succ??s>, <Bool??en Cumul> ]\n[ <Borne inf??rieure>, <Borne sup??rieure>, x, <Bool??en Cumul> ]
Union.Syntax=[ <Liste>, <Liste> ]\n[ <Polygone>, <Polygone> ]
Unique.Syntax=[ <Liste> ]
UnitOrthogonalVector=VecteurUnitaireOrthogonal
UnitOrthogonalVector.Syntax=[ <Droite> ]\n[ <Segment> ]\n[ <Vecteur> ]
UnitOrthogonalVector.Syntax3D=[ <Droite> ]\n[ <Segment> ]\n[ <Vecteur> ]\n[ <Plan> ]
UnitOrthogonalVector.SyntaxCAS=[ <Vecteur> ]
UnitVector=VecteurUnitaire
UnitVector.Syntax=[ <Objet> ]
UnitVector.SyntaxCAS=[ <Vecteur> ]
UpdateConstruction=ActualiserConstruction
UpdateConstruction.Syntax=[ ]\n[ <Nombre de fois> ]
UpperSum=SommeSup??rieure
UpperSum.Syntax=[ <Fonction>, <x initial>, <x final>, <Nombre Rectangles> ]
Variance.Syntax=[ <S??rie brute> ]\n[ <Liste Nombres>, <Liste Effectifs> ]
Vector=Vecteur
Vector.Syntax=[ <Point> ]\n[ <Point D??but>, <Point Fin> ]
Vertex=Sommet
Vertex.Syntax=[ <Conique> ]\n[ <In??quation> ]\n[ <Polygone> ]\n[ <Polygone>, <Indice> ]\n[ <Segment>, <Indice> ]
VerticalText=TexteVertical
VerticalText.Syntax=[ <Texte> ]\n[ <Texte>, <Point> ]
Volume.Syntax=[ <Solide> ]
Voronoi.Syntax=[ <Liste Points> ]
Weibull.Syntax=[ <Forme>, <??chelle>, <Nombre Succ??s> ]\n[ <Forme>, <??chelle>, <Nombre Succ??s>, <Bool??en Cumul> ]\n[ <Forme>, <??chelle>, x, <Bool??en Cumul> ]
Weibull.SyntaxCAS=[ <Forme>, <??chelle>, <Nombre Succ??s> ]
ZMean2Estimate=ZEstimationMoyenne2
ZMean2Estimate.Syntax=[ <Liste Donn??es ??chantillon 1>, <Liste Donn??es ??chantillon 2>, <??1>, <??2>, <Niveau de confiance> ]\n[ <Moy ??ch1>, <??1>, <Taille ??ch1>, <Moy ??ch2>, <??2>, <Taille ??ch2>, <Niveau de confiance> ]
ZMean2Test=ZTestMoyenne2
ZMean2Test.Syntax=[ <Liste Donn??es ??chantillon 1>, <??1>, <Liste Donn??es ??chantillon 2>, <??2>, <Valeur critique> ]\n[ <Moy ??ch1>, <??1>, <Taille ??ch1>, <Moy ??ch2>, <??2>, <Taille ??ch2>, <Valeur critique> ]
ZMeanEstimate=ZEstimationMoyenne
ZMeanEstimate.Syntax=[ <Liste Donn??es ??chantillon>, <??>, <Niveau de confiance> ]\n[ <Moyenne ??chantillon>, <??>, <Taille Echantillon>, <Niveau de confiance> ]
ZMeanTest=ZTestMoyenne
ZMeanTest.Syntax=[ <Liste Donn??es ??chantillon>, <??>, <Moyenne attendue>, <Valeur critique> ]\n[ <Moyenne ??chantillon>, <??>, <Taille Echantillon>, <Moyenne attendue>, <Valeur critique> ]
ZProportion2Estimate=ZEstimationProportion2
ZProportion2Estimate.Syntax=[ <Proportion ??ch1>, <Taille ??ch1>, <Proportion ??ch2>, <Taille ??ch2>, <Niveau de confiance> ]
ZProportion2Test=ZTestProportion2
ZProportion2Test.Syntax=[ <Proportion ??ch1>, <Taille ??ch1>, <Proportion ??ch2>, <Taille ??ch2>, <Valeur critique> ]
ZProportionEstimate=ZEstimationProportion
ZProportionEstimate.Syntax=[ <Proportion ??chantillon>, <Taille Echantillon>, <Niveau de confiance> ]
ZProportionTest=ZTestProportion
ZProportionTest.Syntax=[ <Proportion ??chantillon>, <Taille Echantillon>, <Hypoth??se Proportion>, <Valeur critique> ]
Zip=Compact??e
Zip.Syntax=[ <Expression>, <Var1>, <Liste1>, <Var2>, <Liste2>, ... ]
Zipf.Syntax=[ <Nombre>, <Exposant> ]\n[ <Nombre>, <Exposant>, <Bool??en Cumul> ]\n[ <Nombre>, <Exposant>, <Nombre Succ??s>, <Bool??en Cumul> ]
Zipf.SyntaxCAS=[ <Nombre>, <Exposant>, <Nombre Succ??s>, <Bool??en Cumul> ]
ZoomIn=Agrandir
ZoomIn.Syntax=[ ]\n[ <Facteur de r??duction> ]\n[ <Facteur de r??duction>, <Centre> ]\n[ <Min x>, <Min y>, <Max x>, <Max y> ]\n[ <Min x>, <Min y>, <Min z>, <Max x>, <Max y>, <Max z> ]
ZoomOut=R??duire
ZoomOut.Syntax=[ <Facteur de r??duction> ]\n[ <Facteur de r??duction>, <Centre> ]
mad=dam
mad.Syntax=[ <S??rie brute> ]\n[ <Liste Nombres>, <Liste Effectifs> ]
mean=moy
mean.Syntax=[ <S??rie brute> ]\n[ <Liste Nombres>, <Liste Effectifs> ]
nCr=Cbin
nCr.Syntax=[ <Nombre n>, <Nombre p> ]
stdev=eType
stdev.Syntax=[ <S??rie brute> ]\n[ <Liste Nombres>, <Liste Effectifs> ]
stdevp=eTypeP
stdevp.Syntax=[ <S??rie brute> ]\n[ <Liste Nombres>, <Liste Effectifs> ]