# Copyright (c) GeoGebra Group, office@geogebra.org
# The GeoGebra language files are licensed to you under the terms of the
# Creative Commons Attribution-NonCommercial-ShareAlike licence (version 3.0 or later),
# the current text of which can be found via this link:
# https://creativecommons.org/licenses/by-nc-sa/3.0/legalcode.
# Attribution (as required by that Creative Commons license) should take the form of
# (at least) a mention of our name, an appropriate copyright notice and a link to our
# website located at https://www.geogebra.org.
# For further details, please see https://www.geogebra.org/license
ANOVA.Syntax=[ <串列>, <串列>, ... ]
AffineRatio.Syntax=[ <点>, <点>, <点> ]
Angle.Syntax=[ <物件> ]\n[ <向量>, <向量> ]\n[ <直线>, <直线> ]\n[ <点>, <顶点>, <点> ]\n[ <点>, <顶点>, <角度> ]
Angle.Syntax3D=[ <物件> ]\n[ <向量>, <向量> ]\n[ <直线>, <直线> ]\n[ <直线>, <平面> ]\n[ <平面>, <平面> ]\n[ <点>, <顶点>, <点> ]\n[ <点>, <顶点>, <角度> ]\n[ <点>, <点>, <点>, <Direction> ]
AngularBisector.Syntax=[ <直线>, <直线> ]\n[ <点>, <点>, <点> ]
Append.Syntax=[ <串列>, <物件> ]\n[ <物件>, <串列> ]
ApplyMatrix.Syntax=[ <矩阵>, <物件> ]
Arc.Syntax=[ <圆>, <点>, <点> ]\n[ <橢圓>, <点>, <点> ]\n[ <圆>, <參數值>, <參數值> ]\n[ <橢圓>, <參數值>, <參數值> ]
AreCollinear.Syntax=[ <点>, <点>, <点> ]
AreConcurrent.Syntax=[ <直线>, <直线>, <直线> ]
AreConcyclic.Syntax=[ <点>, <点>, <点>, <点> ]
AreCongruent.Syntax=[ <物件>, <物件> ]
AreEqual.Syntax=[ <物件>, <物件> ]
AreParallel.Syntax=[ <直线>, <直线> ]
ArePerpendicular.Syntax=[ <直线>, <直线> ]
Area.Syntax=[ <圆锥曲线> ]\n[ <多边形> ]\n[ <点>, ..., <点> ]
Assume.SyntaxCAS=[ <条件>, <表达式> ]
Asymptote.Syntax=[ <物件> ]
AttachCopyToView.Syntax=[ <物件>, <View 0|1|2> ]\n[ <物件>, <View 0|1|2>, <Point 1>, <Point 2>, <屏幕点1>, <Screen Point 2> ]
Axes.Syntax=[ <圆锥曲线> ]
Axes.Syntax3D=[ <圆锥曲线> ]\n[ <二次曲面> ]
AxisStepX.Syntax=[ ]
AxisStepY.Syntax=[ ]
BarChart.Syntax=[ <List of Data>, <频数列表> ]\n[ <原始数据列表>, <条形宽度>, <竖直缩放因子(可选)> ]\n[ <List of Data>, <频数列表>, <条形宽度> ]\n[ <起始值>, <终止值>, <List of Heights> ]\n[ <起始值>, <终止值>, <表达式>, <变量>, <From Number>, <To Number> ]\n[ <起始值>, <终止值>, <表达式>, <变量>, <From Number>, <To Number>, <Step Width> ]
Barycenter.Syntax=[ <点列>, <权重列表> ]
Bernoulli.Syntax=[ <機率>, <是否累積？> ]
Binomial.Syntax=[ <數值 n>, <数值 r> ]
BinomialDist.Syntax=[ <试验次数>, <成功機率> ]\n[ <试验次数>, <成功機率>, <是否累積？> ]\n[ <试验次数>, <成功機率>, <变量值>, <是否累積？> ]
BinomialDist.SyntaxCAS=[ <试验次数>, <成功機率>, <变量值>, <是否累積？> ]
Bottom.Syntax=[ <二次曲面> ]
BoxPlot.Syntax=[ <y轴方向偏移量>, <y轴方向范围>, <原始数据列表> ]\n[ <y轴方向偏移量>, <y轴方向范围>, <原始数据列表>, <是否离群值? true|false> ]\n[ <y轴方向偏移量>, <y轴方向范围>, <List of Data>, <频数列表>, <是否离群值? true|false> ]\n[ <y轴方向偏移量>, <y轴方向范围>, <起始值>, <Q1>, <中位数>, <Q3>, <终止值> ]
Button.Syntax=[ ]\n[ <标题> ]
CASLoaded.Syntax=[]
CFactor.SyntaxCAS=[ <表达式> ]\n[ <表达式>, <变量> ]
CIFactor.SyntaxCAS=[ <表达式> ]\n[ <表达式>, <变量> ]
CSolutions.SyntaxCAS=[ <Equation> ]\n[ <Equation>, <变量> ]\n[ <List of Equations>, <变量列表> ]
CSolve.SyntaxCAS=[ <Equation> ]\n[ <Equation>, <变量> ]\n[ <List of Equations>, <变量列表> ]
Cauchy.Syntax=[ <中位数>, <Scale>, <变量值> ]\n[ <中位数>, <Scale>, <变量值>, <是否累積？>  ]\n[ <中位数>, <Scale>, x, <是否累積？> ]
Cauchy.SyntaxCAS=[ <中位数>, <Scale>, <变量值> ]
Cell.Syntax=[ <列序>, <行序> ]
CellRange.Syntax=[ <起始单元格>, <终止单元格> ]
Center.Syntax=[ <圆锥曲线> ]
Center.Syntax3D=[ <圆锥曲线> ]\n[ <二次曲面> ]
CenterView.Syntax=[ <视图中心坐标(x, y)|视图中心点> ]
Centroid.Syntax=[ <多边形> ]
Checkbox.Syntax=[ ]\n[ <标题> ]\n[ <串列> ]\n[ <标题>, <串列> ]
ChiSquared.Syntax=[ <自由度>, <变量值> ]\n[ <自由度>, <变量值>, <是否累積？> ]\n[ <自由度>, x, <是否累積？> ]
ChiSquared.SyntaxCAS=[ <自由度>, <变量> ]
ChiSquaredTest.Syntax=[ <矩阵> ]\n[ <串列>, <串列> ]\n[ <矩阵>, <矩阵> ]
Circle.Syntax=[ <点>, <半徑數值> ]\n[ <点>, <线段> ]\n[ <点>, <点> ]\n[ <点>, <点>, <点> ]
Circle.Syntax3D=[ <点>, <半徑數值> ]\n[ <点>, <线段> ]\n[ <点>, <点> ]\n[ <点>, <点>, <点> ]\n[ <直线>, <点> ]\n[ <点>, <半径>, <Direction> ]\n[ <点>, <点>, <Direction> ]
CircleArc.Syntax=[ <圆心>, <点>, <点> ]
CircleSector.Syntax=[ <圆心>, <点>, <点> ]
CircumcircleArc.Syntax=[ <点>, <点>, <点> ]
CircumcircleSector.Syntax=[ <点>, <点>, <点> ]
Circumference.Syntax=[ <圆锥曲线> ]
Classes.Syntax=[ <List of Data>, <组的数量> ]\n[ <List of Data>, <起点>, <组的宽度> ]
ClosestPoint.Syntax=[ <路径>, <点> ]\n[ <直线>, <直线> ]
ClosestPointRegion.Syntax=[ <区域>, <点> ]
Coefficients.Syntax=[ <多項式> ]\n[ <圆锥曲线> ]
Coefficients.SyntaxCAS=[ <多項式> ]\n[ <多項式>, <变量> ]
Column.Syntax=[ <表格区单元格> ]
ColumnName.Syntax=[ <表格区单元格> ]
Command=指令
CommonDenominator.Syntax=[ <表达式>, <表达式> ]
CompleteSquare.Syntax=[ <二次函数> ]
ComplexRoot.Syntax=[ <多項式> ]
Cone.Syntax=[ <圆>, <高度> ]\n[ <点>, <点>, <半径> ]\n[ <点>, <向量>, <角度> ]
ConeInfinite.Syntax=[ <点>, <向量>, <角度> ]\n[ <点>, <点>, <角度> ]\n[ <点>, <直线>, <角度> ]
Conic.Syntax=[ <串列> ]\n[ <点>, <点>, <点>, <点>, <点> ]\n[ <Number>, <Number>, <Number>, <Number>, <Number>, <Number> ]
ConstructionStep.Syntax=[ ]\n[ <物件> ]
ContingencyTable.Syntax=[ <List of Text>, <List of Text> ]\n[ <List of Text>, <List of Text>, <Options> ]\n[ <行数值列表>, <列数值列表>, <频数表> ]\n[ <行数值列表>, <列数值列表>, <频数表> , <Options> ]
ContinuedFraction.Syntax=[ <Number> ]\n[ <Number>, <层级> ]\n[ <Number>, <层级>, <速记? true|false> ]
ConvexHull.Syntax=[ <点列> ]
CopyFreeObject.Syntax=[ <物件> ]
Corner.Syntax=[ <頂點編號> ]\n[ <圖片>, <頂點編號> ]\n[ <文本>, <頂點編號> ]\n[ <繪圖區編號>, <頂點編號> ]
CountIf.Syntax=[ <条件>, <串列> ]\n[ <条件>, <变量>, <串列> ]
Covariance.Syntax=[ <点列> ]\n[ <数值列表>, <数值列表> ]
Cross.Syntax=[ <向量>, <向量> ]
CrossRatio.Syntax=[ <点>, <点>, <点>, <点> ]
Cube.Syntax=[ <正方形> ]\n[ <点>, <点>, <点> ]\n[ <点>, <点>, <Direction> ]
Cubic.Syntax=[ <点>, <点>, <点>, <Number> ]
Curvature.Syntax=[ <点>, <物件> ]
CurvatureVector.Syntax=[ <点>, <物件> ]
CurveCartesian.Syntax=[ <表达式>, <表达式>, <参变量t>, <起始值>, <终止值> ]
CurveCartesian.Syntax3D=[ <表达式>, <表达式>, <参变量t>, <起始值>, <终止值> ]\n[ <表达式>, <表达式>, <表达式>, <参变量t>, <起始值>, <终止值> ]
Cylinder.Syntax=[ <圆>, <高度> ]\n[ <点>, <点>, <半径> ]
CylinderInfinite.Syntax=[ <直线>, <半径> ]\n[ <点>, <向量>, <半径> ]\n[ <点>, <点>, <半径> ]
DataFunction.Syntax=[ <数值列表>, <数值列表> ]
Defined.Syntax=[ <物件> ]
Degree.Syntax=[ <多項式> ]
Degree.SyntaxCAS=[ <多項式> ]\n[ <多項式>, <变量> ]
DelauneyTriangulation.Syntax=[ <点列> ]
Delete.Syntax=[ <物件> ]
Denominator.Syntax=[ <Number> ]\n[ <函数> ]
Denominator.SyntaxCAS=[ <表达式> ]
Derivative.Syntax=[ <函数> ]\n[ <曲线> ]\n[ <函数>, <Number> ]\n[ <函数>, <变量> ]\n[ <曲线>, <Number> ]\n[ <函数>, <变量>, <Number> ]
Derivative.SyntaxCAS=[ <表达式> ]\n[ <表达式>, <变量> ]\n[ <表达式>, <变量>, <Number> ]
Determinant.Syntax=[ <矩阵> ]
Diameter.Syntax=[ <向量>, <圆锥曲线> ]\n[ <直线>, <圆锥曲线> ]
Difference.Syntax=[ <多边形>, <多边形> ]
Dilate.Syntax=[ <物件>, <位似比> ]\n[ <物件>, <位似比>, <縮放中心> ]
Dimension.Syntax=[ <物件> ]
Direction.Syntax=[ <直线> ]
Directrix.Syntax=[ <圆锥曲线> ]
Distance.Syntax=[ <点>, <物件> ]\n[ <直线>, <直线> ]\n[ <平面>, <平面> ]
Div.Syntax=[ <被除數>, <除數> ]\n[ <被除式>, <除式> ]
Division.Syntax=[ <被除數>, <除數> ]\n[ <被除式>, <除式> ]
Divisors.Syntax=[ <Number> ]
DivisorsList.Syntax=[ <Number> ]
DivisorsSum.Syntax=[ <Number> ]
Dodecahedron.Syntax=[ <正五边形> ]\n[ <点>, <点>, <点> ]\n[ <点>, <点>, <Direction> ]
Dot.Syntax=[ <向量>, <向量> ]
DotPlot.Syntax=[ <原始数据列表>, <堆栈相邻点(可选)>, <缩放因子(可选)>]
DynamicCoordinates.Syntax=[ <点>, <横坐标x>, <纵坐标y> ]\n[ <点>, <横坐标x>, <纵坐标y>, <z-Coordinate> ]
Eccentricity.Syntax=[ <圆锥曲线> ]
Eigenvalues.SyntaxCAS=[ <矩阵> ]
Eigenvectors.SyntaxCAS=[ <矩阵> ]
Element.Syntax=[ <串列>, <元素編號> ]\n[ <矩阵>, <行序>, <列序> ]\n[ <串列>, <索引1>, <索引2>, ... ]
Element.SyntaxCAS=[ <串列>, <元素編號> ]\n[ <矩阵>, <行序>, <列序> ]
Eliminate.Syntax=[ <多项式列表>, <变量列表> ]
Ellipse.Syntax=[ <焦点>, <焦点>, <主半轴长> ]\n[ <焦点>, <焦点>, <线段> ]\n[ <焦点>, <焦点>, <点> ]
Ends.Syntax=[ <二次曲面> ]
Envelope.Syntax=[ <路径>, <点> ]
Erlang.Syntax=[ <Shape>, <Rate>, <变量值> ]\n[ <Shape>, <Rate>, <变量值>, <是否累積？> ]\n[ <Shape>, <Rate>, x, <是否累積？> ]
Excentricity.Syntax=[ <圆锥曲线> ]
Execute.Syntax=[ <List of Text> ]\n[ <List of Text>, <參數 1>, <參數 1>, ... ]
Expand.Syntax=[ <表达式> ]
Exponential.Syntax=[ <Lambda>, <变量值> ]\n[ <Lambda>, <变量值>, <是否累積？> ]\n[ <Lambda>, x, <是否累積？> ]
Exponential.SyntaxCAS=[ <Lambda>, <变量值> ]
ExportImage.Syntax=[ <属性>, <数值>, <属性>, <数值>, ... ]
Extremum.Syntax=[ <多項式> ]\n[ <函数>, <x-起始值>, <x-终止值> ]
FDistribution.Syntax=[ <分子自由度>, <分母自由度>, <变量值> ]\n[ <分子自由度>, <分母自由度>, <变量值>, <是否累積？> ]\n[ <分子自由度>, <分母自由度>, x, <是否累積？> ]
FDistribution.SyntaxCAS=[ <分子自由度>, <分母自由度>, <变量值> ]
Factor.Syntax=[ <多項式> ]
Factor.SyntaxCAS=[ <Number> ]\n[ <多項式> ]\n[ <表达式>, <变量> ]
Factors.Syntax=[ <多項式> ]\n[ <Number> ]
FillCells.Syntax=[ <儲存格範圍>, <物件> ]\n[ <单元格>, <串列> ]\n[ <单元格>, <矩阵> ]
FillColumn.Syntax=[ <列序>, <串列> ]
FillRow.Syntax=[ <行序>, <串列> ]
First.Syntax=[ <串列> ]\n[ <文本> ]\n[ <串列>, <元素數目> ]\n[ <文本>, <元素數目> ]\n[ <轨迹>, <元素數目> ]
First.SyntaxCAS=[ <串列> ]\n[ <串列>, <元素數目> ]
FirstAxis.Syntax=[ <圆锥曲线> ]
FirstAxisLength.Syntax=[ <圆锥曲线> ]
Fit.Syntax=[ <点列>, <函數集合> ]\n[ <点列>, <函数> ]
FitExp.Syntax=[ <点列> ]
FitGrowth.Syntax=[ <点列> ]
FitImplicit.Syntax=[ <点列>, <次数> ]
FitLineX.Syntax=[ <点列> ]
FitLineY.Syntax=[ <点列> ]
FitLog.Syntax=[ <点列> ]
FitLogistic.Syntax=[ <点列> ]
FitPoly.Syntax=[ <点列>, <多项式次数> ]\n[ <手绘函数>, <多项式次数> ]
FitPow.Syntax=[ <点列> ]
FitSin.Syntax=[ <点列> ]
Flatten.Syntax=[ <串列> ]
Focus.Syntax=[ <圆锥曲线> ]
FractionText.Syntax=[ <Number> ]\n[ <点> ]
Frequency.Syntax=[ <原始数据列表> ]\n[ <是否累積？>, <原始数据列表> ]\n[ <组界列表>, <原始数据列表> ]\n[ <List of Text>, <List of Text> ]\n[ <是否累積？>, <组界列表>, <原始数据列表> ]\n[ <组界列表>, <原始数据列表>, <Use Density>, <密度缩放因子(可选)> ]\n[ <是否累積？>, <组界列表>, <原始数据列表>, <Use Density>, <密度缩放因子(可选)> ]
FrequencyPolygon.Syntax=[ <组界列表>, <List of Heights> ]\n[ <组界列表>, <原始数据列表>, <Boolean Use Density>, <密度缩放因子(可选)> ]\n[ <是否累積？>, <组界列表>, <原始数据列表>, <Boolean Use Density>, <密度缩放因子(可选)> ]
FrequencyTable.Syntax=[ <原始数据列表>, <缩放因子(可选)> ]\n[ <是否累積？>, <原始数据列表> ]\n[ <组界列表>, <原始数据列表> ]\n[ <是否累積？>, <组界列表>, <原始数据列表> ]\n[ <组界列表>, <原始数据列表>, <Use Density>, <密度缩放因子(可选)> ]\n[ <是否累積？>, <组界列表>, <原始数据列表>, <Use Density>, <密度缩放因子(可选)> ]
FromBase.Syntax=[ <Number as Text>, <进制(基数) 2~36> ]
Function.Syntax=[ <函数>, <x-起始值>, <x-终止值> ]\n[ <数值列表> ]
Function.Syntax3D=[ <数值列表> ]\n[ <函数>, <x-起始值>, <x-终止值> ]\n[ <表达式>, <参变量1>, <起始值>, <终止值>, <参变量2>, <起始值>, <终止值> ]
Function.SyntaxCAS=[ <函数>, <x-起始值>, <x-终止值> ]
FutureValue.Syntax=[ <利率>, <Number of Periods>, <每期付款额>, <现值(可选)>, <Type (optional)> ]
GCD.Syntax=[ <数值列表> ]\n[ <Number>, <Number> ]
GCD.SyntaxCAS=[ <数值列表> ]\n[ <多项式列表> ]\n[ <Number>, <Number> ]\n[ <多項式>, <多項式> ]
Gamma.Syntax=[ <Alpha>, <Beta>, <变量值> ]\n[ <Alpha>, <Beta>, <变量值>, <是否累積？>  ]\n[ <Alpha>, <Beta>, x, <是否累積？> ]
Gamma.SyntaxCAS=[ <Alpha>, <Beta>, <变量值> ]
GeometricMean.Syntax=[ <数值列表> ]
GetTime.Syntax=[]\n[ <格式> ]
GroebnerDegRevLex.Syntax=[ <多项式列表> ]\n[ <多项式列表>, <变量列表> ]
GroebnerLex.Syntax=[ <多项式列表> ]\n[ <多项式列表>, <变量列表> ]
GroebnerLexDeg.Syntax=[ <多项式列表> ]\n[ <多项式列表>, <变量列表> ]
HarmonicMean.Syntax=[ <数值列表> ]
Height.Syntax=[ <立体图形> ]
HideLayer.Syntax=[ <Number> ]
Histogram.Syntax=[ <组界列表>, <List of Heights> ]\n[ <组界列表>, <原始数据列表>, <Use Density>, <密度缩放因子(可选)> ]\n[ <是否累積？>, <组界列表>, <原始数据列表>, <Use Density>, <密度缩放因子(可选)> ]
HistogramRight.Syntax=[ <组界列表>, <List of Heights> ]\n[ <组界列表>, <原始数据列表>, <Use Density>, <密度缩放因子(可选)>  ]\n[ <是否累積？>, <组界列表>, <原始数据列表>, <Use Density>, <密度缩放因子(可选)> ]
HyperGeometric.Syntax=[ <总体容量>, <成功次数>, <样本容量> ]\n[ <总体容量>, <成功次数>, <样本容量>, <是否累積？> ]\n[ <总体容量>, <成功次数>, <样本容量>, <变量值>, <是否累積？> ]
HyperGeometric.SyntaxCAS=[ <总体容量>, <成功次数>, <样本容量>, <变量值>, <是否累積？> ]
Hyperbola.Syntax=[ <焦点>, <焦点>, <主半轴长> ]\n[ <焦点>, <焦点>, <线段> ]\n[ <焦点>, <焦点>, <点> ]
IFactor.Syntax=[ <多項式> ]
IFactor.SyntaxCAS=[ <表达式> ]\n[ <表达式>, <变量> ]
Icosahedron.Syntax=[ <Equilateral Triangle> ]\n[ <点>, <点>, <点> ]\n[ <点>, <点>, <Direction> ]
Identity.Syntax=[ <Number> ]
If.Syntax=[ <条件>, <结果> ]\n[ <条件>, <结果>, <否则> ]
ImplicitCurve.Syntax=[ <点列> ]\n[ <f(x, y)> ]
ImplicitDerivative.Syntax=[ <f(x, y)> ]
ImplicitDerivative.SyntaxCAS=[ <f(x, y)> ]\n[ <表达式>, <因变量>, <自变量> ]
Incircle.Syntax=[ <点>, <点>, <点> ]
IndexOf.Syntax=[ <物件>, <串列> ]\n[ <文本>, <文本> ]\n[ <物件>, <串列>, <起始索引> ]\n[ <文本>, <文本>, <起始索引> ]
Insert.Syntax=[ <串列>, <串列>, <序数位置> ]\n[ <物件>, <串列>, <序数位置> ]
Integral.Syntax=[ <函数> ]\n[ <函数>, <变量> ]\n[ <函数>, <x-起始值>, <x-终止值> ]\n[ <函数>, <x-起始值>, <x-终止值>, <是否给出积分值? true|false> ]
Integral.SyntaxCAS=[ <函数> ]\n[ <函数>, <变量> ]\n[ <函数>, <x-起始值>, <x-终止值> ]\n[ <函数>, <变量>, <起始值>, <终止值> ]
IntegralBetween.Syntax=[ <函数>, <函数>, <x-起始值>, <x-终止值> ]\n[ <函数>, <函数>, <x-起始值>, <x-终止值>, <是否给出积分值? true|false> ]
IntegralBetween.SyntaxCAS=[ <函数>, <函数>, <x-起始值>, <x-终止值> ]\n[ <函数>, <函数>, <变量>, <起始值>, <终止值> ]
IntegralSymbolic.Syntax=[ <函数> ]\n[ <函数>, <变量> ]
InteriorAngles.Syntax=[ <多边形> ]
Intersect.Syntax=[ <物件>, <物件> ]\n[ <物件>, <物件>, <Index of Intersection Point> ]\n[ <物件>, <物件>, <起点> ]\n[ <函数>, <函数>, <x-起始值>, <x-终止值> ]\n[ <曲线1>, <曲线2>, <参数1>, <Parameter 2> ]
Intersect.SyntaxCAS=[ <函数>, <函数> ]
IntersectConic.Syntax=[ <平面>, <二次曲面> ]\n[ <二次曲面>, <二次曲面> ]
IntersectPath.Syntax=[ <直线>, <多边形> ]\n[ <多边形>, <多边形> ]
IntersectPath.Syntax3D=[ <直线>, <多边形> ]\n[ <多边形>, <多边形> ]\n[ <平面>, <多边形> ]\n[ <平面>, <二次曲面> ]
Intersection.Syntax=[ <串列>, <串列> ]
InverseBinomial.Syntax=[ <试验次数>, <成功機率>, <機率> ]
InverseCauchy.Syntax=[ <中位数>, <Scale>, <機率> ]
InverseChiSquared.Syntax=[ <自由度>, <機率> ]
InverseExponential.Syntax=[ <Lambda>, <機率> ]
InverseFDistribution.Syntax=[ <分子自由度>, <分母自由度>, <機率> ]
InverseGamma.Syntax=[ <Alpha>, <Beta>, <機率> ]
InverseHyperGeometric.Syntax=[ <总体容量>, <成功次数>, <样本容量>, <機率> ]
InverseLaplace.Syntax=[ <函数> ]\n[ <函数>, <变量> ]\n[ <函数>, <变量>, <变量> ]
InverseLogNormal.Syntax=[ <平均数>, <标准差>, <機率> ]
InverseLogistic.Syntax=[ <平均数>, <Scale>, <機率> ]
InverseNormal.Syntax=[ <平均数>, <标准差>, <機率> ]
InversePascal.Syntax=[ <成功次数>, <成功概率>, <機率> ]
InversePoisson.Syntax=[ <平均数>, <機率> ]
InverseTDistribution.Syntax=[ <自由度>, <機率> ]
InverseWeibull.Syntax=[ <Shape>, <Scale>, <機率> ]
InverseZipf.Syntax=[ <元素數目>, <指数>, <機率> ]
Invert.Syntax=[ <矩阵> ]\n[ <函数> ]
IsFactored.Syntax=[ <多項式> ]
IsInRegion.Syntax=[ <点>, <区域> ]
IsInteger.Syntax=[ <Number> ]
IsPrime.Syntax=[ <Number> ]
IsTangent.Syntax=[ <直线>, <圆锥曲线> ]
IsVertexForm.Syntax=[ <函数> ]
Iteration.Syntax=[ <函数>, <起始值>, <迭代次数> ]\n[ <表达式>, <变量>, <起始值>, <迭代次数> ]
IterationList.Syntax=[ <函数>, <起始值>, <迭代次数> ]\n[ <表达式>, <变量>, <起始值>, <迭代次数> ]
Join.Syntax=[ <列表的列表> ]\n[ <串列>, <串列>, ... ]
JordanDiagonalization.SyntaxCAS=[ <矩阵> ]
KeepIf.Syntax=[ <条件>, <串列> ]\n[ <条件>, <变量>, <串列> ]
LCM.Syntax=[ <数值列表> ]\n[ <Number>, <Number> ]
LCM.SyntaxCAS=[ <数值列表> ]\n[ <多项式列表> ]\n[ <Number>, <Number> ]\n[ <多項式>, <多項式> ]
LaTeX.Syntax=[ <物件> ]\n[ <物件>, <是否替换变量? true|false> ]\n[ <物件>, <是否替换变量? true|false>, <是否显示名称? true|false> ]
Laplace.Syntax=[ <函数> ]\n[ <函数>, <变量> ]\n[ <函数>, <变量>, <变量> ]
Last.Syntax=[ <串列> ]\n[ <文本> ]\n[ <串列>, <元素數目> ]\n[ <文本>, <元素數目> ]
Last.SyntaxCAS=[ <串列> ]\n[ <串列>, <元素數目> ]
LeftSide.Syntax=[ <Equation> ]
LeftSide.SyntaxCAS=[ <Equation> ]\n[ <List of Equations> ]\n[ <List of Equations>, <索引> ]
LeftSum.Syntax=[ <函数>, <x-起始值>, <x-终止值>, <矩形数量> ]
Length.Syntax=[ <物件> ]\n[ <函数>, <x-起始值>, <x-终止值> ]\n[ <函数>, <起始点>, <結束點> ]\n[ <曲线>, <t-起始值>, <t-终止值> ]\n[ <曲线>, <起始点>, <結束點> ]
Length.SyntaxCAS=[ <串列> ]\n[ <函数>, <x-起始值>, <x-终止值> ]\n[ <函数>, <变量>, <x-起始值>, <x-终止值> ]
LetterToUnicode.Syntax=[ <字元> ]
Limit.Syntax=[ <函数>, <数值> ]
Limit.SyntaxCAS=[ <表达式>, <数值> ]\n[ <表达式>, <变量>, <数值> ]
LimitAbove.Syntax=[ <函数>, <数值> ]
LimitAbove.SyntaxCAS=[ <表达式>, <数值> ]\n[ <表达式>, <变量>, <数值> ]
LimitBelow.Syntax=[ <函数>, <数值> ]
LimitBelow.SyntaxCAS=[ <表达式>, <数值> ]\n[ <表达式>, <变量>, <数值> ]
Line.Syntax=[ <点>, <点> ]\n[ <点>, <平行線> ]\n[ <点>, <方向向量> ]
LineBisector.Syntax=[ <线段> ]\n[ <点>, <点> ]
LineBisector.Syntax3D=[ <线段> ]\n[ <点>, <点> ]\n[ <点>, <点>, <Direction> ]
LineGraph.Syntax=[ <x坐标列表>, <y坐标列表> ]
Locus.Syntax=[ <构造轨迹线的点>, <点> ]\n[ <构造轨迹线的点>, <Slider> ]\n[ <斜率场>, <点> ]\n[ <f(x, y)>, <点> ]
LocusEquation.Syntax=[ <轨迹> ]\n[ <轨迹点>, <动点> ]\n[ <布尔表达式>, <动点> ]
LogNormal.Syntax=[ <平均数>, <标准差>, <变量值> ]\n[ <平均数>, <标准差>, <变量值>, <是否累積？>  ]\n[ <平均数>, <标准差>, x, <是否累積？> ]
Logistic.Syntax=[ <平均数>, <Scale>, <变量值> ]\n[ <平均数>, <Scale>, <变量值>, <是否累積？>  ]\n[ <平均数>, <Scale>, x, <是否累積？> ]
LowerSum.Syntax=[ <函数>, <x-起始值>, <x-终止值>, <矩形数量> ]
MatrixRank.Syntax=[ <矩阵> ]
Max.Syntax=[ <区间> ]\n[ <Number>, <Number> ]\n[ <串列> ]\n[ <List of Data>, <频数列表> ]\n[ <函数>, <x-起始值>, <x-终止值> ]
Max.SyntaxCAS=[ <串列> ]\n[ <Number>, <Number> ]
Maximize.Syntax=[ <Dependent Number>, <Free Number> ]\n[ <Dependent Number>, <界点> ]
Mean.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
Mean.SyntaxCAS=[ <数值列表> ]
MeanX.Syntax=[ <点列> ]
MeanY.Syntax=[ <点列> ]
Median.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
Median.SyntaxCAS=[ <数值列表> ]
Midpoint.Syntax=[ <线段> ]\n[ <圆锥曲线> ]\n[ <区间> ]\n[ <点>, <点> ]
Min.Syntax=[ <区间> ]\n[ <Number>, <Number> ]\n[ <串列> ]\n[ <List of Data>, <频数列表> ]\n[ <函数>, <x-起始值>, <x-终止值> ]
Min.SyntaxCAS=[ <串列> ]\n[ <Number>, <Number> ]
Minimize.Syntax=[ <Dependent Number>, <Free Number> ]\n[ <Dependent Number>, <界点> ]
MinimumSpanningTree.Syntax=[ <点列> ]
Mirror.Syntax=[ <物件>, <点> ]\n[ <物件>, <直线> ]\n[ <物件>, <圆> ]
Mirror.Syntax3D=[ <物件>, <点> ]\n[ <物件>, <直线> ]\n[ <物件>, <平面> ]\n[ <物件>, <圆> ]
MixedNumber.SyntaxCAS=[ <Number> ]
Mod.Syntax=[ <被除數>, <除數> ]\n[ <被除式>, <除式> ]
Mode.Syntax=[ <数值列表> ]
NDerivative.Syntax=[ <函数> ]\n[ <函数>, <次数> ]
NIntegral.Syntax=[ <函数> ]\n[ <函数>, <x-起始值>, <x-终止值> ]
NIntegral.SyntaxCAS=[ <函数>, <x-起始值>, <x-终止值> ]\n[ <函数>, <变量>, <起始值>, <终止值> ]
NInvert.Syntax=[ <函数> ]
NSolutions.Syntax=[ <Equation> ]
NSolutions.SyntaxCAS=[ <Equation> ]\n[ <Equation>, <变量> ]\n[ <Equation>, <变量 = 初值> ]\n[ <List of Equations>, <变量列表> ]
NSolve.Syntax=[ <Equation> ]
NSolve.SyntaxCAS=[ <Equation> ]\n[ <Equation>, <变量> ]\n[ <Equation>, <变量 = 初值> ]\n[ <List of Equations>, <变量列表> ]
NSolveODE.Syntax=[ <导数列表>, <x坐标初值>, <List of Initial y-coordinates>, <x坐标终值> ]
Name.Syntax=[ <物件> ]
Net.Syntax=[ <多面体>, <Number> ]\n[ <多面体>, <Number>, <面>, <棱>, <棱>, ... ]
NextPrime.Syntax=[ <Number> ]
Normal.Syntax=[ <平均数>, <标准差>, <变量值> ]\n[ <平均数>, <标准差>, <变量值>, <是否累積？> ]\n[ <平均数>, <标准差>, x, <是否累積？> ]
Normal.SyntaxCAS=[ <平均数>, <标准差>, <变量值> ]
NormalQuantilePlot.Syntax=[ <原始数据列表> ]
Normalize.Syntax=[ <数值列表> ]\n[ <点列> ]
Numerator.Syntax=[ <Number> ]\n[ <函数> ]
Numerator.SyntaxCAS=[ <表达式> ]
Numeric.SyntaxCAS=[ <表达式> ]\n[ <表达式>, <Significant Figures> ]
Object.Syntax=[ <物件名稱字串> ]
Octahedron.Syntax=[ <Equilateral Triangle> ]\n[ <点>, <点>, <点> ]\n[ <点>, <点>, <Direction> ]
Ordinal.Syntax=[ <整數> ]
OrdinalRank.Syntax=[ <串列> ]
OrthogonalLine.Syntax=[ <点>, <直线> ]\n[ <点>, <线段> ]\n[ <点>, <向量> ]
OrthogonalLine.Syntax3D=[ <点>, <直线> ]\n[ <点>, <线段> ]\n[ <点>, <向量> ]\n[ <点>, <平面> ]\n[ <直线>, <直线> ]\n[ <点>, <Direction>, <Direction> ]\n[ <点>, <直线>, <Context> ]
OrthogonalPlane.Syntax=[ <点>, <直线> ]\n[ <点>, <向量> ]
OrthogonalVector.Syntax=[ <直线> ]\n[ <线段> ]\n[ <向量> ]
OrthogonalVector.Syntax3D=[ <直线> ]\n[ <线段> ]\n[ <向量> ]\n[ <平面> ]
OrthogonalVector.SyntaxCAS=[ <向量> ]
OsculatingCircle.Syntax=[ <点>, <物件> ]
PMCC.Syntax=[ <点列> ]\n[ <x坐标列表>, <y坐标列表> ]
Pan.Syntax=[ <x 像素>, <y 像素> ]
Pan.Syntax3D=[ <x 像素>, <y 像素> ]\n[ <x 像素>, <y 像素>, <竖坐标z> ]
Parabola.Syntax=[ <点>, <直线> ]
Parameter.Syntax=[ <抛物线> ]
ParametricDerivative.Syntax=[ <曲线> ]
ParseToFunction.Syntax=[ <函数>, <字符串> ]
ParseToNumber.Syntax=[ <Number>, <字符串> ]
PartialFractions.Syntax=[ <函数> ]
PartialFractions.SyntaxCAS=[ <函数> ]\n[ <函数>, <变量> ]
Pascal.Syntax=[ <成功次数>, <成功概率> ]\n[ <成功次数>, <成功概率>, <是否累積？> ]\n[ <成功次数>, <成功概率>, <变量值>, <是否累積？> ]
Pascal.SyntaxCAS=[ <成功次数>, <成功概率>, <变量值>, <是否累積？> ]
PathParameter.Syntax=[ <路径上的点> ]
Payment.Syntax=[ <利率>, <Number of Periods>, <现值>, <未来值(可选)>, <Type (optional)> ]
Percentile.Syntax=[ <数值列表>, <百分数> ]
Perimeter.Syntax=[ <多边形> ]\n[ <圆锥曲线> ]\n[ <轨迹> ]
Periods.Syntax=[ <利率>, <每期付款额>, <现值>, <未来值(可选)>, <Type (optional)> ]
PieChart.Syntax=[ <频数列表> ]\n[ <频数列表>, <中心>, <半径> ]
Plane.Syntax=[ <多边形> ]\n[ <圆锥曲线> ]\n[ <点>, <平面> ]\n[ <点>, <直线> ]\n[ <直线>, <直线> ]\n[ <点>, <点>, <点> ]\n[ <点>, <向量>, <向量> ]
PlaneBisector.Syntax=[ <线段> ]\n[ <点>, <点> ]
PlaySound.Syntax=[ <URL> ]\n[ <是否播放? true|false> ]\n[ <函数>, <最小值>, <最大值> ]\n[ <函数>, <最小值>, <最大值>, <采样率>, <Sample Depth> ]
PlotSolve.Syntax=[ <关于 x 的方程> ]
Point.Syntax=[ <物件> ]\n[ <物件>, <參數 1> ]\n[ <点>, <向量> ]\n[ <串列> ]
PointIn.Syntax=[ <区域> ]
PointList.Syntax=[ <串列> ]
Poisson.Syntax=[ <平均数> ]\n[ <平均数>, <是否累積？> ]\n[ <平均数>, <变量值>, <是否累積？> ]
Poisson.SyntaxCAS=[ <平均数>, <变量值>, <是否累積？> ]
Polar.Syntax=[ <点>, <圆锥曲线> ]\n[ <直线>, <圆锥曲线> ]
PolyLine.Syntax=[ <点列> ]\n[ <点>, ..., <点> ]
Polygon.Syntax=[ <点列> ]\n[ <点>, ..., <点> ]\n[ <点>, <点>, <頂點數> ]
Polygon.Syntax3D=[ <点列> ]\n[ <点>, ..., <点> ]\n[ <点>, <点>, <頂點數> ]\n[ <点>, <点>, <頂點數>, <Direction> ]
Polynomial.Syntax=[ <函数> ]\n[ <点列> ]
Polynomial.SyntaxCAS=[ <函数> ]\n[ <函数>, <变量> ]
PresentValue.Syntax=[ <利率>, <Number of Periods>, <每期付款额>, <未来值(可选)>, <Type (optional)> ]
PreviousPrime.Syntax=[ <Number> ]
PrimeFactors.Syntax=[ <Number> ]
Prism.Syntax=[ <多边形>, <点> ]\n[ <多边形>, <高度> ]\n[ <点>, <点>, ... ]
Product.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <元素數目> ]\n[ <数值列表>, <频数列表> ]\n[ <表达式>, <变量>, <起始值>, <终止值> ]
Product.SyntaxCAS=[ <表达式列表> ]\n[ <表达式>, <变量>, <起始索引>, <End Index> ]
Prove.Syntax=[ <布尔表达式> ]
ProveDetails.Syntax=[ <布尔表达式> ]
Pyramid.Syntax=[ <多边形>, <点> ]\n[ <多边形>, <高度> ]\n[ <点>, <点>, <点>, <点>, ... ]
Q1.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
Q3.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
QuadricSide.Syntax=[ <二次曲面> ]
RSquare.Syntax=[ <点列>, <函数> ]
Radius.Syntax=[ <圆锥曲线> ]
Random.Syntax=[ <最小整数>, <最大整数> ]\n[ <最小整数>, <最大整数>, <是否固定? true|false> ]
Random.SyntaxCAS=[ <最小整数>, <最大整数> ]
RandomBinomial.Syntax=[ <试验次数>, <機率> ]
RandomDiscrete.Syntax=[ <串列>, <串列> ]
RandomElement.Syntax=[ <串列> ]
RandomNormal.Syntax=[ <平均数>, <标准差> ]
RandomPointIn.Syntax=[ <区域> ]\n[ <点列> ]\n[ <x最小值>, <x最大值>, <yMin>, <y最大值> ]
RandomPoisson.Syntax=[ <平均数> ]
RandomPolynomial.Syntax=[ <次数>, <最小系数>, <最大系数> ]
RandomPolynomial.SyntaxCAS=[ <次数>, <最小系数>, <最大系数> ]\n[ <变量>, <次数>, <最小系数>, <最大系数> ]
RandomUniform.Syntax=[ <最小值>, <最大值> ]\n[ <最小值>, <最大值>, <样本数量> ]
Rate.Syntax=[ <Number of Periods>, <每期付款额>, <现值>, <未来值(可选)>, <Type (optional)>, <预期利率(可选) 0~1> ]
Rationalize.SyntaxCAS=[ <Number> ]
Ray.Syntax=[ <起始点>, <点> ]\n[ <起始点>, <方向向量> ]
ReadText.Syntax=[ <文本> ]
RectangleSum.Syntax=[ <函数>, <x-起始值>, <x-终止值>, <矩形数量>, <Position for rectangle start> ]
ReducedRowEchelonForm.Syntax=[ <矩阵> ]
Relation.Syntax=[ <串列> ]\n[ <物件>, <物件> ]
RemovableDiscontinuity.Syntax=[ <函数> ]
Remove.Syntax=[ <串列>, <串列> ]
RemoveUndefined.Syntax=[ <串列> ]
Rename.Syntax=[ <物件>, <名称> ]
Repeat.Syntax=[ <Number>, <脚本指令>, <脚本指令>, ... ]
ReplaceAll.Syntax=[ <文本>, <Text to Match>, <Text to Replace> ]
ResidualPlot.Syntax=[ <点列>, <函数> ]
Reverse.Syntax=[ <串列> ]
RightSide.Syntax=[ <Equation> ]
RightSide.SyntaxCAS=[ <Equation> ]\n[ <List of Equations> ]\n[ <List of Equations>, <索引> ]
RigidPolygon.Syntax=[ <多边形> ]\n[ <多边形>, <x偏移量>, <y偏移量> ]\n[ <Free Point>, ..., <Free Point> ]
Root.Syntax=[ <多項式> ]\n[ <函数>, <Initial x-Value> ]\n[ <函数>, <x-起始值>, <x-终止值> ]
Root.SyntaxCAS=[ <多項式> ]
RootList.Syntax=[ <串列> ]
RootMeanSquare.Syntax=[ <数值列表> ]
Roots.Syntax=[ <函数>, <x-起始值>, <x-终止值> ]
Rotate.Syntax=[ <物件>, <角度> ]\n[ <物件>, <角度>, <点> ]
Rotate.Syntax3D=[ <物件>, <角度> ]\n[ <物件>, <角度>, <点> ]\n[ <物件>, <角度>, <旋轉軸> ]\n[ <物件>, <角度>, <轴上的点>, <轴方向或平面> ]
RotateText.Syntax=[ <文本>, <角度> ]
Row.Syntax=[ <表格区单元格> ]
RunClickScript.Syntax=[ <物件> ]
RunUpdateScript.Syntax=[ <物件> ]
SDX.Syntax=[ <点列> ]
SDY.Syntax=[ <点列> ]
SVD.Syntax=[ <矩阵> ]
SXX.Syntax=[ <数值列表> ]\n[ <点列> ]
SXY.Syntax=[ <点列> ]\n[ <数值列表>, <数值列表> ]
SYY.Syntax=[ <点列> ]
Sample.Syntax=[ <串列>, <容量> ]\n[ <串列>, <容量>, <是否重复选择? true|false> ]
SampleSD.SyntaxCAS=[ <数值列表> ]
SampleSDX.Syntax=[ <点列> ]
SampleSDY.Syntax=[ <点列> ]
SampleVariance.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
SampleVariance.SyntaxCAS=[ <数值列表> ]
ScientificText.Syntax=[ <Number> ]\n[ <Number>, <有效数字位数> ]
SecondAxis.Syntax=[ <圆锥曲线> ]
SecondAxisLength.Syntax=[ <圆锥曲线> ]
Sector.Syntax=[ <圆锥曲线>, <点>, <点> ]\n[ <圆锥曲线>, <參數值>, <參數值> ]
Segment.Syntax=[ <点>, <点> ]\n[ <点>, <长度> ]
SelectObjects.Syntax=[ ]\n[ <物件>, <物件>, ... ]
SelectedElement.Syntax=[ <串列> ]
SelectedIndex.Syntax=[ <串列> ]
Semicircle.Syntax=[ <点>, <点> ]
Sequence.Syntax=[ <终止值> ]\n[ <起始值>, <终止值> ]\n[ <起始值>, <终止值>, <增量> ]\n[ <表达式>, <变量>, <起始值>, <终止值> ]\n[ <表达式>, <变量>, <起始值>, <终止值>, <增量> ]
SetActiveView.Syntax=[ <視區> ]\n[ <平面> ]
SetAxesRatio.Syntax=[ <Number>, <Number> ]
SetAxesRatio.Syntax3D=[ <Number>, <Number> ]\n[ <Number>, <Number>, <Number> ]
SetBackgroundColor.Syntax=[ <Color> ]\n[ <物件>, <Color> ]\n[ <紅>, <绿色值 0~1>, <藍> ]\n[ <物件>, <紅>, <绿色值 0~1>, <藍> ]
SetCaption.Syntax=[ <物件>, <文本> ]
SetColor.Syntax=[ <物件>, <Color> ]\n[ <物件>, <紅>, <绿色值 0~1>, <藍> ]
SetConditionToShowObject.Syntax=[ <物件>, <条件> ]
SetConstructionStep.Syntax=[ <Number> ]
SetCoords.Syntax=[ <物件>, <x 像素>, <y 像素> ]\n[ <物件>, <x 像素>, <y 像素>, <竖坐标z> ]
SetDecoration.Syntax=[ <物件>, <Number> ]\n[ <线段>, <Number>, <Number>]
SetDynamicColor.Syntax=[ <物件>, <紅>, <绿色值 0~1>, <藍> ]\n[ <物件>, <紅>, <绿色值 0~1>, <藍>, <虚实 0~1> ]
SetFilling.Syntax=[ <物件>, <Number> ]
SetFixed.Syntax=[ <物件>, <true | false> ]\n[ <物件>, <true | false>, <true | false> ]
SetLabelMode.Syntax=[ <物件>, <Number> ]
SetLayer.Syntax=[ <物件>, <Layer> ]
SetLevelOfDetail.Syntax=[ <曲面>, <Level of Detail> ]
SetLineStyle.Syntax=[ <物件>, <Number> ]
SetLineThickness.Syntax=[ <物件>, <Number> ]
SetPerspective.Syntax=[ <文本> ]
SetPointSize.Syntax=[ <物件>, <Number> ]
SetPointStyle.Syntax=[ <点>, <Number> ]
SetSeed.Syntax=[ <整數> ]
SetSpinSpeed.Syntax=[ <Number> ]
SetTooltipMode.Syntax=[ <物件>, <Number> ]
SetTrace.Syntax=[ <物件>, <true | false> ]
SetValue.Syntax=[ <布尔值>, <0-false|1-true> ]\n[ <物件>, <物件> ]\n[ <串列>, <Number>, <物件> ]
SetViewDirection.Syntax=[ ]\n[ <Direction> ]\n[ <Direction>, <Boolean animate> ]
SetVisibleInView.Syntax=[ <物件>, <视图编号 1-绘图区|2-绘图区2>, <布尔值> ]
Shear.Syntax=[ <物件>, <直线>, <比> ]
ShortestDistance.Syntax=[ <List of Segments>, <起始点>, <結束點>, <Boolean Weighted> ]
ShowAxes.Syntax=[]\n[ <布尔值> ]\n[ <視區>, <布尔值> ]
ShowGrid.Syntax=[]\n[ <布尔值> ]\n[ <視區>, <布尔值> ]
ShowLabel.Syntax=[ <物件>, <布尔值> ]
ShowLayer.Syntax=[ <Number> ]
Shuffle.Syntax=[ <串列> ]
SigmaXX.Syntax=[ <点列> ]\n[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
SigmaXY.Syntax=[ <点列> ]\n[ <x坐标列表>, <y坐标列表> ]
SigmaYY.Syntax=[ <点列> ]
Simplify.Syntax=[ <函数> ]\n[ <文本> ]
Simplify.SyntaxCAS=[ <函数> ]
Slider.Syntax=[ <最小值>, <最大值>, <增量>, <速度>, <宽度(px)>, <Is Angle>, <Horizontal>, <Animating>, <随机? true|false> ]
Slope.Syntax=[ <直线> ]
SlopeField.Syntax=[ <f(x, y)> ]\n[ <f(x, y)>, <數值 n> ]\n[ <f(x, y)>, <數值 n>, <长度倍增器a> ]\n[ <f(x, y)>, <數值 n>, <长度倍增器a>, <x最小值>, <y最小值>, <x 最大值>, <y最大值> ]
SlowPlot.Syntax=[ <函数> ]\n[ <函数>, <Boolean Repeat> ]
Solutions.Syntax=[ <Equation> ]
Solutions.SyntaxCAS=[ <Equation> ]\n[ <Equation>, <变量> ]\n[ <List of Equations>, <变量列表> ]
Solve.Syntax=[ <Equation> ]
Solve.SyntaxCAS=[ <关于 x 的方程> ]\n[ <Equation>, <变量> ]\n[ <List of Equations>, <变量列表> ]\n[ <参数方程列表>, <变量列表> ]\n[ <Equation>, <变量>, <假设列表> ]
SolveCubic.SyntaxCAS=[ <三次多项式> ]
SolveODE.Syntax=[ <f'(x, y)> ]\n[ <f'(x, y)>, <f上的点> ]\n[ <f'(x, y)>, <Start x>, <起始y>, <End x>, <步长> ]\n[ <y'>, <x'>, <Start x>, <起始y>, <终止t>, <步长> ]\n[ <b(x)>, <c(x)>, <f(x)>, <Start x>, <起始y>, <起始y'>, <End x>, <步长> ]
SolveODE.SyntaxCAS=[ <Equation> ]\n[ <Equation>, <f上的点> ]\n[ <Equation>, <f上的点>, <f'上的点> ]\n[ <Equation>, <因变量>, <自变量>, <f上的点> ] \n[ <Equation>, <因变量>, <自变量>, <f上的点>, <f'上的点> ]
SolveQuartic.SyntaxCAS=[ <Quartic Polynomial> ]
Sort.Syntax=[ <串列> ]\n[ <值串列>, <鍵串列> ]
Spearman.Syntax=[ <点列> ]\n[ <数值列表>, <数值列表> ]
Sphere.Syntax=[ <点>, <半径> ]\n[ <点>, <点> ]
Spline.Syntax=[ <点列> ]\n[ <点列>, <Order ≥ 3> ]\n[ <点列>, <Order ≥ 3>, <权重函数> ]
Split.Syntax=[ <文本>, <要拆分的文本列表> ]
StartAnimation.Syntax=[ ]\n[ <布尔值> ]\n[ <滑动条|点>, <滑动条|点>, ... ]\n[ <滑动条|点>, <滑动条|点>, ..., <布尔值> ]
StartRecord.Syntax=[ ]\n[ <布尔值> ]
StemPlot.Syntax=[ <串列> ]\n[ <串列>, <Adjustment -1|0|1> ]
StepGraph.Syntax=[ <点列> ]\n[ <点列>, <是否连接? true|false> ]\n[ <x坐标列表>, <y坐标列表> ]\n[ <点列>, <是否连接? true|false>, <Point Style> ]\n[ <x坐标列表>, <y坐标列表>, <是否连接? true|false> ]\n[ <x坐标列表>, <y坐标列表>, <是否连接? true|false>, <Point Style> ]
StickGraph.Syntax=[ <点列> ]\n[ <点列>, <是否水平? true|false> ]\n[ <x坐标列表>, <y坐标列表> ]\n[ <x坐标列表>, <y坐标列表>, <是否水平? true|false> ]
Stretch.Syntax=[ <物件>, <向量> ]\n[ <物件>, <直线>, <比> ]
Substitute.SyntaxCAS=[ <表达式>, <Substitution List> ]\n[ <表达式>, <from>, <替换对象> ]
Sum.Syntax=[ <串列> ]\n[ <串列>, <元素數目> ]\n[ <串列>, <频数列表> ]\n[ <表达式>, <变量>, <起始值>, <终止值> ]
Sum.SyntaxCAS=[ <串列> ]\n[ <表达式>, <变量>, <起始值>, <终止值> ]
SumSquaredErrors.Syntax=[ <点列>, <函数> ]
SurdText.Syntax=[ <点> ]\n[ <Number> ]\n[ <Number>, <串列> ]
Surface.Syntax=[ <函数>, <角度> ]\n[ <曲线>, <角度>, <直线> ]\n[ <表达式>, <表达式>, <表达式>, <参变量1>, <起始值>, <终止值>, <参变量2>, <起始值>, <终止值> ]
TDistribution.Syntax=[ <自由度>, <变量值> ]\n[ <自由度>, <变量值>, <是否累積？> ]\n[ <自由度>, x, <是否累積？> ]
TDistribution.SyntaxCAS=[ <自由度>, <变量值> ]
TMean2Estimate.Syntax=[ <样本数据1列表>, <样本数据2列表>, <置信水平>, <Boolean Pooled> ]\n[ <Sample Mean 1>, <Sample Standard Deviation 1>, <Sample Size 1>, <Sample Mean 2>, <Sample Standard Deviation 2>, <Sample Size 2>, <置信水平>, <Boolean Pooled> ]
TMeanEstimate.Syntax=[ <样本数据列表>, <置信水平> ]\n[ <样本平均数>, <样本标准差>, <样本容量>, <置信水平> ]
TTest.Syntax=[ <样本数据列表>, <假设平均数>, <Tail> ]\n[ <样本平均数>, <样本标准差>, <样本容量>, <假设平均数>, <Tail> ]
TTest2.Syntax=[ <样本数据1列表>, <样本数据2列表>, <Tail>, <Boolean Pooled> ]\n[ <Sample Mean 1>, <Sample Standard Deviation 1>, <Sample Size 1>, <Sample Mean 2>, <Sample Standard Deviation 2>, <Sample Size 2>, <Tail>, <Boolean Pooled> ]
TTestPaired.Syntax=[ <样本数据1列表>, <样本数据2列表>, <Tail> ]
TableText.Syntax=[ <串列>, <串列>, ... ]\n[ <串列>, <串列>, ..., <對齊方式> ]
Take.Syntax=[ <串列>, <起始位置>, <终止位置> ]\n[ <串列>, <起始位置> ]\n[ <文本>, <起始位置>, <终止位置> ]\n[ <文本>, <起始位置> ]
Take.SyntaxCAS=[ <串列>, <起始位置> ]\n[ <串列>, <起始位置>, <终止位置> ]
Tangent.Syntax=[ <点>, <圆锥曲线> ]\n[ <点>, <函数> ]\n[ <曲线上的点>, <曲线> ]\n[ <横坐标x值>, <函数> ]\n[ <直线>, <圆锥曲线> ]\n[ <圆锥曲线>, <圆锥曲线> ]
Tangent.SyntaxCAS=[ <Number>, <函数> ]\n[ <点>, <物件> ]
TaylorSeries.Syntax=[ <函数>, <横坐标x值>, <Order Number> ]
TaylorSeries.SyntaxCAS=[ <表达式>, <横坐标x值>, <Order Number> ]\n[ <表达式>, <变量>, <变量值>, <Order Number> ]
Tetrahedron.Syntax=[ <Equilateral Triangle> ]\n[ <点>, <点>, <点> ]\n[ <点>, <点>, <Direction> ]
Text.Syntax=[ <物件> ]\n[ <物件>, <是否替换变量? true|false> ]\n[ <物件>, <点> ]\n[ <物件>, <点>, <是否替换变量? true|false> ]\n[ <物件>, <点>, <是否替换变量? true|false>, <Boolean for LaTeX formula> ]\n[<物件>, <点>, <是否替换变量? true|false>, <Boolean for LaTeX formula>, <Horizontal alignment [-1|0|1]>]\n[<物件>, <点>, <是否替换变量? true|false>, <Boolean for LaTeX formula>, <Horizontal alignment [-1|0|1]>, <Vertical alignment [-1|0|1]>]
TextToUnicode.Syntax=[ <文本> ]
Textfield.Syntax=[ <链接对象> ]
TiedRank.Syntax=[ <串列> ]
ToBase.Syntax=[ <Number>, <进制(基数) 2~36> ]
ToComplex.Syntax=[ <向量> ]
ToExponential.SyntaxCAS=[ <复数> ]
ToPoint.Syntax=[ <复数> ]
ToPolar.Syntax=[ <复数> ]\n[ <向量> ]
ToolImage.Syntax=[ <Number> ]\n[ <Number>, <点> ]\n[ <Number>, <点>, <点> ]
Top.Syntax=[ <二次曲面> ]
Translate.Syntax=[ <物件>, <向量> ]\n[ <向量>, <起始点> ]
Transpose.Syntax=[ <矩阵> ]
TrapezoidalSum.Syntax=[ <函数>, <x-起始值>, <x-终止值>, <Number of Trapezoids> ]
TravelingSalesman.Syntax=[ <点列> ]
TriangleCenter.Syntax=[ <点>, <点>, <点>, <Number> ]
TriangleCurve.Syntax=[ <点>, <点>, <点>, <Equation> ]
Triangular.Syntax=[ <下界>, <上界>, <模式>, <变量值> ]\n[ <下界>, <上界>, <模式>, <变量值>, <是否累積？> ]\n[ <下界>, <上界>, <模式>, x, <是否累積？> ]
TrigCombine.Syntax=[ <表达式> ]\n[ <表达式>, <Target Function> ]
TrigExpand.Syntax=[ <表达式> ]\n[ <表达式>, <Target Function> ]
TrigExpand.SyntaxCAS=[ <表达式> ]\n[ <表达式>, <Target Function> ]\n[ <表达式>, <Target Function>, <目标变量> ]\n[ <表达式>, <Target Function>, <目标变量>, <目标变量> ]
TrigSimplify.Syntax=[ <表达式> ]
Trilinear.Syntax=[ <点>, <点>, <点>, <Number>, <Number>, <Number> ]
TurningPoint.Syntax=[ <多項式> ]
Turtle.Syntax=[]
TurtleBack.Syntax=[ <海龟>, <距离> ]
TurtleDown.Syntax=[ <海龟> ]
TurtleForward.Syntax=[ <海龟>, <距离> ]
TurtleLeft.Syntax=[ <海龟>, <角度> ]
TurtleRight.Syntax=[ <海龟>, <角度> ]
TurtleUp.Syntax=[ <海龟> ]
UnicodeToLetter.Syntax=[ <整數> ]
UnicodeToText.Syntax=[ <整數串列> ]
Uniform.Syntax=[ <下界>, <上界>, <变量值> ]\n[ <下界>, <上界>, <变量值>, <是否累積？> ]\n[ <下界>, <上界>, x, <是否累積？> ]
Union.Syntax=[ <串列>, <串列> ]\n[ <多边形>, <多边形> ]
Unique.Syntax=[ <串列> ]
UnitOrthogonalVector.Syntax=[ <直线> ]\n[ <线段> ]\n[ <向量> ]
UnitOrthogonalVector.Syntax3D=[ <直线> ]\n[ <线段> ]\n[ <向量> ]\n[ <平面> ]
UnitOrthogonalVector.SyntaxCAS=[ <向量> ]
UnitVector.Syntax=[ <物件> ]
UnitVector.SyntaxCAS=[ <向量> ]
UpdateConstruction.Syntax=[ ]\n[ <次數> ]
UpperSum.Syntax=[ <函数>, <x-起始值>, <x-终止值>, <矩形数量> ]
Variance.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
Variance.SyntaxCAS=[ <数值列表> ]
Vector.Syntax=[ <点> ]\n[ <起始点>, <結束點> ]
Vertex.Syntax=[ <圆锥曲线> ]\n[ <不等式> ]\n[ <多边形> ]\n[ <多边形>, <索引> ]\n[ <线段>, <索引> ]
VerticalText.Syntax=[ <文本> ]\n[ <文本>, <点> ]
Volume.Syntax=[ <立体图形> ]
Voronoi.Syntax=[ <点列> ]
Weibull.Syntax=[ <Shape>, <Scale>, <变量值> ]\n[ <Shape>, <Scale>, <变量值>, <是否累積？> ]\n[ <Shape>, <Scale>, x, <是否累積？> ]
Weibull.SyntaxCAS=[ <Shape>, <Scale>, <变量值> ]
ZMean2Estimate.Syntax=[ <样本数据1列表>, <样本数据2列表>, <σ1>, <标准差2>, <置信水平> ]\n[ <Sample Mean 1>, <σ1>, <Sample Size 1>, <Sample Mean 2>, <标准差2>, <Sample Size 2>, <置信水平> ]
ZMean2Test.Syntax=[ <样本数据1列表>, <σ1>, <样本数据2列表>, <标准差2>, <Tail> ]\n[ <Sample Mean 1>, <σ1>, <Sample Size 1>, <Sample Mean 2>, <标准差2>, <Sample Size 2>, <Tail> ]
ZMeanEstimate.Syntax=[ <样本数据列表>, <标准差>, <置信水平> ]\n[ <样本平均数>, <标准差>, <样本容量>, <置信水平> ]
ZMeanTest.Syntax=[ <样本数据列表>, <标准差>, <假设平均数>, <Tail> ]\n[ <样本平均数>, <标准差>, <样本容量>, <假设平均数>, <Tail> ]
ZProportion2Estimate.Syntax=[ <样本比例1>, <Sample Size 1>, <样本比例2>, <Sample Size 2>, <置信水平> ]
ZProportion2Test.Syntax=[ <样本比例1>, <Sample Size 1>, <样本比例2>, <Sample Size 2>, <Tail> ]
ZProportionEstimate.Syntax=[ <样本比例>, <样本容量>, <置信水平> ]
ZProportionTest.Syntax=[ <样本比例>, <样本容量>, <假设比例>, <Tail> ]
Zip.Syntax=[ <表达式>, <变量1>, <列表1>, <变量2>, <列表2>, ... ]
Zipf.Syntax=[ <元素數目>, <指数> ]\n[ <元素數目>, <指数>, <是否累積？> ]\n[ <元素數目>, <指数>, <变量值>, <是否累積？> ]
Zipf.SyntaxCAS=[ <元素數目>, <指数>, <变量值>, <是否累積？> ]
ZoomIn.Syntax=[ ]\n[ <縮放倍率> ]\n[ <縮放倍率>, <视图中心坐标(x, y)|视图中心点> ]\n[ <x最小值>, <y最小值>, <x 最大值>, <y最大值> ]\n[ <x最小值>, <y最小值>, <z最小值>, <x 最大值>, <y最大值>, <z最大值> ]
ZoomOut.Syntax=[ <縮放倍率> ]\n[ <縮放倍率>, <视图中心坐标(x, y)|视图中心点> ]
mad.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
mean.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
mean.SyntaxCAS=[ <数值列表> ]
nCr.Syntax=[ <數值 n>, <数值 r> ]
stdev.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
stdevp.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
stdevp.SyntaxCAS=[ <数值列表> ]