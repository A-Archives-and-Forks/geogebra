# Copyright (c) GeoGebra GmbH, office@geogebra.org
# The GeoGebra language files are licensed to you under the terms of the
# Creative Commons Attribution-NonCommercial-ShareAlike licence (version 3.0 or later),
# the current text of which can be found via this link:
# https://creativecommons.org/licenses/by-nc-sa/3.0/legalcode.
# Attribution (as required by that Creative Commons license) should take the form of
# (at least) a mention of our name, an appropriate copyright notice and a link to our
# website located at https://www.geogebra.org.
# For further details, please see https://www.geogebra.org/license
ANOVA.Syntax=[ <Lista>, <Lista>, ... ]
AffineRatio=AffinOszt??viszony
AffineRatio.Syntax=[ <Pont>, <Pont>, <Pont> ]
Angle=Sz??g
Angle.Syntax=[ <Alakzat> ]\n[ <Vektor>, <Vektor> ]\n[ <Egyenes>, <Egyenes> ]\n[ <Pont>, <Cs??cspont>, <Pont> ]\n[ <Pont>, <Cs??cspont>, <Sz??g> ]
Angle.Syntax3D=[ <Alakzat> ]\n[ <Vektor>, <Vektor> ]\n[ <Egyenes>, <Egyenes> ]\n[ <Egyenes>, <S??k> ]\n[ <S??k>, <S??k> ]\n[ <Pont>, <Cs??cspont>, <Pont> ]\n[ <Pont>, <Cs??cspont>, <Sz??g> ]\n[ <Pont>, <Pont>, <Pont>, <Ir??ny> ]
AngularBisector=Sz??gfelez??
AngularBisector.Syntax=[ <Egyenes>, <Egyenes> ]\n[ <Pont>, <Pont>, <Pont> ]
Append=Hozz??f??z
Append.Syntax=[ <Lista>, <Alakzat> ]\n[ <Alakzat>, <Lista> ]
ApplyMatrix=M??trixTranszform??ci??
ApplyMatrix.Syntax=[ <M??trix>, <Alakzat> ]
Arc=??v
Arc.Syntax=[ <K??pszelet>, <Pont>, <Pont> ]\n[ <K??pszelet>, <Pont>, <Pont> ]\n[ <K??pszelet>, <Pont>, <Pont> ]\n[ <K??pszelet>, <Pont>, <Pont> ]
AreCollinear=Kolline??risE
AreCollinear.Syntax=[ <Pont>, <Pont>, <Pont> ]
AreConcurrent=EgyPontraIlleszkedikE
AreConcurrent.Syntax=[ <Egyenes>, <Egyenes>, <Egyenes> ]
AreConcyclic=EgyK??rreIlleszkedikE
AreConcyclic.Syntax=[ <Pont>, <Pont>, <Pont>, <Pont> ]
AreCongruent=Egybev??g??E
AreCongruent.Syntax=[ <Alakzat>, <Alakzat> ]
AreEqual=Egyenl??E
AreEqual.Syntax=[ <Alakzat>, <Alakzat> ]
AreParallel=P??rhuzamosE
AreParallel.Syntax=[ <Egyenes>, <Egyenes> ]
ArePerpendicular=Mer??legesE
ArePerpendicular.Syntax=[ <Egyenes>, <Egyenes> ]
Area=Ter??let
Area.Syntax=[ <K??pszelet> ]\n[ <Soksz??g> ]\n[ <Pont>, ..., <Pont> ]
Assume=Tegy??kFelHogy
Assume.SyntaxCAS=[ <Felt??tel>, <Kifejez??s> ]
Asymptote=Aszimptota
Asymptote.Syntax=[ <Alakzat> ]
AttachCopyToView=M??solatCsatol??saN??zethez
AttachCopyToView.Syntax=[ <Alakzat>, <N??zet 0|1|2> ]\n[ <Alakzat>, <N??zet 0|1|2>, <Pont 1>, <Pont 2>, <K??perny?? pont 1>, <K??perny?? pont 2> ]
Axes=Tengelyek
Axes.Syntax=[ <K??pszelet> ]
Axes.Syntax3D=[ <K??pszelet> ]\n[ <M??sodrend?? g??rbe> ]
AxisStepX=TengelyBeoszt??sX
AxisStepX.Syntax=[ ]
AxisStepY=TengelyBeoszt??sY
AxisStepY.Syntax=[ ]
BarChart=Oszlopdiagram
BarChart.Syntax=[ <Adatok list??ja>, <Gyakoris??gok list??ja> ]\n[ <Nyers adatok list??ja>, <Oszlopok sz??less??ge>, <F??gg??leges sk??la t??nyez?? (opcion??lis)> ]\n[ <Adatok list??ja>, <Gyakoris??gok list??ja>, <Oszlopok sz??less??ge> ]\n[ <Kezd????rt??k>, <V??g??rt??k>, <Magass??gok list??ja> ]\n[ <Kezd????rt??k>, <V??g??rt??k>, <Kifejez??s>, <V??ltoz??>, <Sz??m mett??l>, <Sz??m meddig> ]\n[ <Kezd????rt??k>, <V??g??rt??k>, <Kifejez??s>, <V??ltoz??>, <Sz??m mett??l>, <Sz??m meddig>, <L??p??sk??z> ]
Barycenter=T??megK??z??ppont
Barycenter.Syntax=[ <Pontok list??ja>, <S??lyok list??ja> ]
Bernoulli=BernoulliEloszl??s
Bernoulli.Syntax=[ <Val??sz??n??s??g>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
BetaDist=B??taEloszl??s
BetaDist.Syntax=[ <Alfa>, <Beta>, <V??ltoz?? ??rt??ke> ]\n[ <Alfa>, <Beta>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke>  ]\n[ <Alfa>, <Beta>, x, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
Binomial=Binomi??lisEgy??tthat??
Binomial.Syntax=[ <Sz??m (n)>, <Sz??m (k)> ]
BinomialDist=Binomi??lisEloszl??s
BinomialDist.Syntax=[ <K??s??rletek sz??ma>, <Siker val??sz??n??s??ge> ]\n[ <K??s??rletek sz??ma>, <Siker val??sz??n??s??ge>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]\n[ <K??s??rletek sz??ma>, <Siker val??sz??n??s??ge>, <List of Values> ]\n[ <K??s??rletek sz??ma>, <Siker val??sz??n??s??ge>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
BinomialDist.SyntaxCAS=[ <K??s??rletek sz??ma>, <Siker val??sz??n??s??ge>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
Bottom=Alaplap
Bottom.Syntax=[ <M??sodrend?? g??rbe> ]
BoxPlot.Syntax=[ <yEltol??s>, <yM??ret>, <Nyers adatok list??ja> ]\n[ <yEltol??s>, <yM??ret>, <Nyers adatok list??ja>, <Kiugr?? ??rt??kek elhagy??sa (logikai ??rt??k)> ]\n[ <yEltol??s>, <yM??ret>, <Adatok list??ja>, <Gyakoris??gok list??ja>, <Kiugr?? ??rt??kek elhagy??sa (logikai ??rt??k)> ]\n[ <yEltol??s>, <yM??ret>, <Kezd????rt??k>, <Els?? kvartilis>, <Medi??n>, <Harmadik kvartilis>, <V??g??rt??k> ]
Button=Gomb
Button.Syntax=[ ]\n[ <Felirat> ]
CASLoaded.Syntax=[]
CFactor=SzorzatAlakKomplex
CFactor.SyntaxCAS=[ <Kifejez??s> ]\n[ <Kifejez??s>, <V??ltoz??> ]
CIFactor=SzorzatAlakKomplexI
CIFactor.SyntaxCAS=[ <Kifejez??s> ]\n[ <Kifejez??s>, <V??ltoz??> ]
CSolutions=Megold??sokKomplex
CSolutions.SyntaxCAS=[ <Egyenlet> ]\n[ <Egyenlet>, <V??ltoz??> ]\n[ <Egyenletek list??ja>, <V??ltoz??k list??ja> ]
CSolve=MegoldKomplex
CSolve.SyntaxCAS=[ <Egyenlet> ]\n[ <Egyenlet>, <V??ltoz??> ]\n[ <Egyenletek list??ja>, <V??ltoz??k list??ja> ]
Cauchy=CauchyEloszl??s
Cauchy.Syntax=[ <Medi??n>, <Sz??less??g>, <V??ltoz?? ??rt??ke> ]\n[ <Medi??n>, <Sz??less??g>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke>  ]\n[ <Medi??n>, <Sz??less??g>, x, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
Cauchy.SyntaxCAS=[ <Medi??n>, <Sz??less??g>, <V??ltoz?? ??rt??ke> ]
Cell=Cella
Cell.Syntax=[ <Oszlop>, <Sor> ]
CellRange=CellaTartom??ny
CellRange.Syntax=[ <Kezd?? cella>, <Befejez?? cella> ]
Center=K??z??pPont
Center.Syntax=[ <K??pszelet> ]
Center.Syntax3D=[ <K??pszelet> ]\n[ <M??sodrend?? g??rbe> ]
CenterView=N??zetK??z??ppontja
CenterView.Syntax=[ <K??z??ppont> ]
Centroid=S??lypont
Centroid.Syntax=[ <Soksz??g> ]
CharacteristicPolynomial=KarakterisztikusPolinom
CharacteristicPolynomial.Syntax=[ <M??trix> ]
Checkbox=Jel??l??n??gyzet
Checkbox.Syntax=[ ]\n[ <Felirat> ]\n[ <Lista> ]\n[ <Felirat>, <Lista> ]
ChiSquared=KhiN??gyzetEloszl??s
ChiSquared.Syntax=[ <Szabads??gfokok>, <V??ltoz?? ??rt??ke> ]\n[ <Szabads??gfokok>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]\n[ <Szabads??gfokok>, x, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
ChiSquared.SyntaxCAS=[ <Szabads??gfokok>, <V??ltoz??> ]
ChiSquaredTest=KhiN??gyzetPr??ba
ChiSquaredTest.Syntax=[ <M??trix> ]\n[ <Lista>, <Lista> ]\n[ <M??trix>, <M??trix> ]
Circle=K??r
Circle.Syntax=[ <Pont>, <Sug??r> ]\n[ <Pont>, <Szakasz> ]\n[ <Pont>, <Pont> ]\n[ <Pont>, <Pont>, <Pont> ]
Circle.Syntax3D=[ <Pont>, <Sug??r> ]\n[ <Pont>, <Szakasz> ]\n[ <Pont>, <Pont> ]\n[ <Pont>, <Pont>, <Pont> ]\n[ <Egyenes>, <Pont> ]\n[ <Pont>, <Sug??r>, <Ir??ny> ]\n[ <Pont>, <Pont>, <Ir??ny> ]
CircleArc=K??r??v
CircleArc.Syntax=[ <K??z??ppont>, <Pont>, <Pont> ]
CircleSector=K??rcikk
CircleSector.Syntax=[ <K??z??ppont>, <Pont>, <Pont> ]
CircumcircleArc=K??r??v2
CircumcircleArc.Syntax=[ <Pont>, <Pont>, <Pont> ]
CircumcircleSector=K??rCikk2
CircumcircleSector.Syntax=[ <Pont>, <Pont>, <Pont> ]
Circumference=K??pszeletKer??let
Circumference.Syntax=[ <K??pszelet> ]
Classes=Oszt??lyok
Classes.Syntax=[ <Adatok list??ja>, <Oszt??lyok sz??ma> ]\n[ <Adatok list??ja>, <Kezdeti ??rt??k>, <Oszt??lyok sz??less??ge> ]
ClosestPoint=Legk??zelebbiPont
ClosestPoint.Syntax=[ <??t>, <Pont> ]\n[ <Egyenes>, <Egyenes> ]
ClosestPointRegion=Legk??zelebbiPontTartom??ny
ClosestPointRegion.Syntax=[ <Tartom??ny>, <Pont> ]
Coefficients=Egy??tthat??k
Coefficients.Syntax=[ <Polinom> ]\n[ <K??pszelet> ]
Coefficients.SyntaxCAS=[ <Polinom> ]\n[ <Polinom>, <V??ltoz??> ]
Column=Oszlop
Column.Syntax=[ <Cella n??v> ]
ColumnName=Oszlopn??v
ColumnName.Syntax=[ <Cella n??v> ]
Command=Parancs
CommonDenominator=K??z??sNevez??
CommonDenominator.Syntax=[ <Kifejez??s>, <Kifejez??s> ]
CompleteSquare=TeljesN??gyzet
CompleteSquare.Syntax=[ <M??sodfok?? F??ggv??ny> ]
ComplexRoot=KomplexGy??k
ComplexRoot.Syntax=[ <Polinom> ]
Cone=K??p
Cone.Syntax=[ <K??pszelet>, <Magass??g> ]\n[ <Pont>, <Pont>, <Sug??r> ]\n[ <Pont>, <Vektor>, <Sz??g> ]
ConeInfinite=K??pFel??let
ConeInfinite.Syntax=[ <Pont>, <Vektor>, <Sz??g> ]\n[ <Pont>, <Pont>, <Sz??g> ]\n[ <Pont>, <Egyenes>, <Sz??g> ]
Conic=K??pszelet
Conic.Syntax=[ <Lista> ]\n[ <Pont>, <Pont>, <Pont>, <Pont>, <Pont> ]\n[ <Sz??m>, <Sz??m>, <Sz??m>, <Sz??m>, <Sz??m>, <Sz??m> ]
ConstructionStep=Szerkeszt??siL??p??s
ConstructionStep.Syntax=[ ]\n[ <Alakzat> ]
ContingencyTable=KeresztT??bla
ContingencyTable.Syntax=[ <Sz??veg lista>, <Sz??veg lista> ]\n[ <Sz??veg lista>, <Sz??veg lista>, <Opci??k> ]\n[ <Sor ??rt??kek list??ja>, <Oszlop ??rt??kek list??ja>, <Gyakoris??g t??bla> ]\n[ <Sor ??rt??kek list??ja>, <Oszlop ??rt??kek list??ja>, <Gyakoris??g t??bla> , <Opci??k> ]
ContinuedFraction=L??ncT??rt
ContinuedFraction.Syntax=[ <Sz??m> ]\n[ <Sz??m>, <Szint> ]\n[ <Sz??m>, <Szint>, <Eredm??ny listak??nt megad??sa (true|false)> ]
ConvexHull=KonvexBurok
ConvexHull.Syntax=[ <Pontok list??ja> ]
CopyFreeObject=AlakzatM??sol??sa
CopyFreeObject.Syntax=[ <Alakzat> ]
Corner=SarokPont
Corner.Syntax=[ <Sarok sz??ma> ]\n[ <K??p>, <Sarok sz??ma> ]\n[ <Sz??veg>, <Sarok sz??ma> ]\n[ <Geometria n??zet>, <Sarok sz??ma> ]
CountIf=Sz??mol??sHa
CountIf.Syntax=[ <Felt??tel>, <Lista> ]\n[ <Felt??tel>, <V??ltoz??>, <Lista> ]
Covariance=Kovariancia
Covariance.Syntax=[ <Pontok list??ja> ]\n[ <Sz??mok list??ja>, <Sz??mok list??ja> ]
Cross=Vektori??lisSzorzat
Cross.Syntax=[ <Vektor>, <Vektor> ]
CrossRatio=Kett??sviszony
CrossRatio.Syntax=[ <Pont>, <Pont>, <Pont>, <Pont> ]
Cube=Kocka
Cube.Syntax=[ <Square> ]\n[ <Pont>, <Pont>, <Pont> ]\n[ <Pont>, <Pont>, <Ir??ny> ]
Cubic=KubikusG??rbe
Cubic.Syntax=[ <Pont>, <Pont>, <Pont>, <Sz??m> ]
Curvature=G??rb??let
Curvature.Syntax=[ <Pont>, <Alakzat> ]
CurvatureVector=G??rb??letVektor
CurvatureVector.Syntax=[ <Pont>, <Alakzat> ]
CurveCartesian=G??rbeParam??teres
CurveCartesian.Syntax=[ <Kifejez??s>, <Kifejez??s>, <V??ltoz??>, <Kezd????rt??k>, <V??g??rt??k> ]
CurveCartesian.Syntax3D=[ <Kifejez??s>, <Kifejez??s>, <V??ltoz??>, <Kezd????rt??k>, <V??g??rt??k> ]\n[ <Kifejez??s>, <Kifejez??s>, <Kifejez??s>, <V??ltoz??>, <Kezd????rt??k>, <V??g??rt??k> ]
Cylinder=Henger
Cylinder.Syntax=[ <K??pszelet>, <Magass??g> ]\n[ <Pont>, <Pont>, <Sug??r> ]
CylinderInfinite=HengerFel??let
CylinderInfinite.Syntax=[ <Egyenes>, <Sug??r> ]\n[ <Pont>, <Vektor>, <Sug??r> ]\n[ <Pont>, <Pont>, <Sug??r> ]
DataFunction=AdatF??ggv??ny
DataFunction.Syntax=[ <Sz??mok list??ja>, <Sz??mok list??ja> ]
Defined=Defini??ltE
Defined.Syntax=[ <Alakzat> ]
Degree=Foksz??m
Degree.Syntax=[ <Polinom> ]
Degree.SyntaxCAS=[ <Polinom> ]\n[ <Polinom>, <V??ltoz??> ]
DelauneyTriangulation=DelaunayH??romsz??gel??s
DelauneyTriangulation.Syntax=[ <Pontok list??ja> ]
Delete=T??r??l
Delete.Syntax=[ <Alakzat> ]
Denominator=Nevez??
Denominator.Syntax=[ <Sz??m> ]\n[ <F??ggv??ny> ]
Denominator.SyntaxCAS=[ <Kifejez??s> ]
Derivative=Deriv??lt
Derivative.Syntax=[ <F??ggv??ny> ]\n[ <G??rbe> ]\n[ <F??ggv??ny>, <Sz??m> ]\n[ <F??ggv??ny>, <V??ltoz??> ]\n[ <G??rbe>, <Sz??m> ]\n[ <F??ggv??ny>, <V??ltoz??>, <Sz??m> ]
Derivative.SyntaxCAS=[ <Kifejez??s> ]\n[ <Kifejez??s>, <V??ltoz??> ]\n[ <Kifejez??s>, <V??ltoz??>, <Sz??m> ]
Determinant=Determin??ns
Determinant.Syntax=[ <M??trix> ]
Diameter=??tm??r??
Diameter.Syntax=[ <Vektor>, <K??pszelet> ]\n[ <Egyenes>, <K??pszelet> ]
Difference=K??l??nbs??g
Difference.Syntax=[ <Soksz??g>, <Soksz??g> ]
Dilate=Ny??jt??s
Dilate.Syntax=[ <Alakzat>, <Ny??jt??si ar??ny> ]\n[ <Alakzat>, <Ny??jt??si ar??ny>, <Ny??jt??s k??z??ppontja> ]
Dimension=Dimenzi??
Dimension.Syntax=[ <Alakzat> ]
Direction=Ir??ny
Direction.Syntax=[ <Egyenes> ]
Directrix=Vez??regyenes
Directrix.Syntax=[ <K??pszelet> ]
Distance=T??vols??g
Distance.Syntax=[ <Pont>, <Alakzat> ]\n[ <Egyenes>, <Egyenes> ]\n[ <S??k>, <S??k> ]
Distance.SyntaxCAS=[ <Pont>, <Alakzat> ]
Div=H??nyadosEg??szr??sze
Div.Syntax=[ <Osztand?? sz??m>, <Oszt?? sz??m> ]\n[ <Osztand?? polinom>, <Oszt?? polinom> ]
Division=Oszt??s
Division.Syntax=[ <Osztand?? sz??m>, <Oszt?? sz??m> ]\n[ <Osztand?? polinom>, <Oszt?? polinom> ]
Divisors=Oszt??kSz??ma
Divisors.Syntax=[ <Sz??m> ]
DivisorsList=Oszt??k
DivisorsList.Syntax=[ <Sz??m> ]
DivisorsSum=Oszt??k??sszege
DivisorsSum.Syntax=[ <Sz??m> ]
Dodecahedron=Dodeka??der
Dodecahedron.Syntax=[ <Regular Pentagon> ]\n[ <Pont>, <Pont>, <Pont> ]\n[ <Pont>, <Pont>, <Ir??ny> ]
Dot=Skal??risSzorzat
Dot.Syntax=[ <Vektor>, <Vektor> ]
DotPlot=PontDiagram
DotPlot.Syntax=[ <Nyers adatok list??ja>, <K??zeli ??rt??kek ??sszevon??sa (opcion??lis)>, <Sk??la faktor (opcion??lis)>]
DynamicCoordinates=DinamikusKoordin??t??k
DynamicCoordinates.Syntax=[ <Pont>, <x-koordin??ta>, <y-koordin??ta> ]\n[ <Pont>, <x-koordin??ta>, <y-koordin??ta>, <z-koordin??ta> ]
Eccentricity=Excentricit??s
Eccentricity.Syntax=[ <K??pszelet> ]
Eigenvalues=Saj??t??rt??kek
Eigenvalues.SyntaxCAS=[ <M??trix> ]
Eigenvectors=Saj??tvektorok
Eigenvectors.SyntaxCAS=[ <M??trix> ]
Element=Elem
Element.Syntax=[ <Lista>, <Elem sorsz??ma> ]\n[ <M??trix>, <Sor>, <Oszlop> ]\n[ <Lista>, <Index1>, <Index2>, ... ]
Element.SyntaxCAS=[ <Lista>, <Elem sorsz??ma> ]\n[ <M??trix>, <Sor>, <Oszlop> ]
Eliminate=Elimin??l
Eliminate.Syntax=[ <Polinomok list??ja>, <V??ltoz??k list??ja> ]
Ellipse=Ellipszis
Ellipse.Syntax=[ <F??uszpont>, <F??uszpont>, <F??tengely hossza (sz??m)> ]\n[ <F??uszpont>, <F??uszpont>, <Szakasz> ]\n[ <F??uszpont>, <F??uszpont>, <Pont> ]
Ends.Syntax=[ <M??sodrend?? g??rbe> ]
Envelope=Burkol??
Envelope.Syntax=[ <??t>, <Pont> ]
Erlang=ErlangEloszl??s
Erlang.Syntax=[ <Alakparam??ter>, <Kamatr??ta>, <V??ltoz?? ??rt??ke> ]\n[ <Alakparam??ter>, <Kamatr??ta>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]\n[ <Alakparam??ter>, <Kamatr??ta>, x, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
Evaluate=Ki??rt??kel
Excentricity=Line??risExcentricit??s
Excentricity.Syntax=[ <K??pszelet> ]
Execute=V??grehajt
Execute.Syntax=[ <Sz??veg lista> ]\n[ <Sz??veg lista>, <Param??ter>, <Param??ter>, ... ]
Expand=Kifejt
Expand.Syntax=[ <Kifejez??s> ]
Exponential=Exponenci??lisEloszl??s
Exponential.Syntax=[ <Lambda>, <V??ltoz?? ??rt??ke> ]\n[ <Lambda>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]\n[ <Lambda>, x, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
Exponential.SyntaxCAS=[ <Lambda>, <V??ltoz?? ??rt??ke> ]
ExportImage=K??pExport
ExportImage.Syntax=[ <Tulajdons??g>, <??rt??k>, <Tulajdons??g>, <??rt??k>, ... ]
ExtendedGCD=KiterjesztettEuklidesziAlgoritmus
ExtendedGCD.Syntax=[ <Eg??sz>, <Eg??sz>]\n[ <Polinom>, <Polinom>]
Extremum=Sz??ls????rt??k
Extremum.Syntax=[ <Polinom> ]\n[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]
Extremum.SyntaxCAS=[ <F??ggv??ny> ]\n[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]
FDistribution=FEloszl??s
FDistribution.Syntax=[ <Sz??ml??l?? szabads??gfoka>, <Nevez?? szabads??gfoka>, <V??ltoz?? ??rt??ke> ]\n[ <Sz??ml??l?? szabads??gfoka>, <Nevez?? szabads??gfoka>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]\n[ <Sz??ml??l?? szabads??gfoka>, <Nevez?? szabads??gfoka>, x, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
FDistribution.SyntaxCAS=[ <Sz??ml??l?? szabads??gfoka>, <Nevez?? szabads??gfoka>, <V??ltoz?? ??rt??ke> ]
Factor=SzorzatAlak
Factor.Syntax=[ <Polinom> ]
Factor.SyntaxCAS=[ <Sz??m> ]\n[ <Polinom> ]\n[ <Kifejez??s>, <V??ltoz??> ]
Factors=T??nyez??k
Factors.Syntax=[ <Polinom> ]\n[ <Sz??m> ]
FillCells=M??sol??sCell??kba
FillCells.Syntax=[ <Cellatartom??ny>, <Alakzat> ]\n[ <Kezd?? cella>, <Lista> ]\n[ <Kezd?? cella>, <M??trix> ]
FillColumn=M??sol??sOszlopba
FillColumn.Syntax=[ <Oszlop>, <Lista> ]
FillRow=M??sol??sSorba
FillRow.Syntax=[ <Sor>, <Lista> ]
First=Els??
First.Syntax=[ <Lista> ]\n[ <Sz??veg> ]\n[ <Lista>, <Elemek sz??ma> ]\n[ <Sz??veg>, <Elemek sz??ma> ]\n[ <M??rtani hely>, <Elemek sz??ma> ]
First.SyntaxCAS=[ <Lista> ]\n[ <Lista>, <Elemek sz??ma> ]
FirstAxis=F??Tengely
FirstAxis.Syntax=[ <K??pszelet> ]
FirstAxisLength=NagyTengelyHossz
FirstAxisLength.Syntax=[ <K??pszelet> ]
Fit=G??rbeilleszt??s
Fit.Syntax=[ <Pontok list??ja>, <F??ggv??ny lista> ]\n[ <Pontok list??ja>, <F??ggv??ny> ]
FitExp=G??rbeilleszt??sExp
FitExp.Syntax=[ <Pontok list??ja> ]
FitGrowth=G??rbeilleszt??sExp2
FitGrowth.Syntax=[ <Pontok list??ja> ]
FitImplicit=G??rbeilleszt??sImplicit
FitImplicit.Syntax=[ <Pontok list??ja>, <G??rbe rendje> ]
FitLineX=G??rbeilleszt??sEgyenesX
FitLineX.Syntax=[ <Pontok list??ja> ]
FitLineY=G??rbeilleszt??sEgyenes
FitLineY.Syntax=[ <Pontok list??ja> ]
FitLog=G??rbeilleszt??sLogaritmikus
FitLog.Syntax=[ <Pontok list??ja> ]
FitLogistic=G??rbeilleszt??sLogisztikus
FitLogistic.Syntax=[ <Pontok list??ja> ]
FitPoly=G??rbeilleszt??sPolinom
FitPoly.Syntax=[ <Pontok list??ja>, <Degree of Polynomial> ]\n[ <Freehand Function>, <Degree of Polynomial> ]
FitPow=G??rbeilleszt??sHatv??ny
FitPow.Syntax=[ <Pontok list??ja> ]
FitSin=G??rbeilleszt??sSin
FitSin.Syntax=[ <Pontok list??ja> ]
Flatten=List??tEgyes??t
Flatten.Syntax=[ <Lista> ]
Focus=F??kusz
Focus.Syntax=[ <K??pszelet> ]
FractionText=T??rtAlak
FractionText.Syntax=[ <Sz??m> ]\n[ <Pont> ]\n[ <Sz??m>, <Boolean Single fraction> ]
Frequency=Gyakoris??g
Frequency.Syntax=[ <Nyers adatok list??ja> ]\n[ <Eloszl??sf??ggv??ny logikai ??rt??ke>, <Nyers adatok list??ja> ]\n[ <Oszt??lyok hat??rainak list??ja>, <Nyers adatok list??ja> ]\n[ <Sz??veg lista>, <Sz??veg lista> ]\n[ <Eloszl??sf??ggv??ny logikai ??rt??ke>, <Oszt??lyok hat??rainak list??ja>, <Nyers adatok list??ja> ]\n[ <Oszt??lyok hat??rainak list??ja>, <Nyers adatok list??ja>, <Logikai ??rt??k (S??r??s??g?)>, <S??r??s??gi t??nyez?? (opcion??lis)> ]\n[ <Eloszl??sf??ggv??ny logikai ??rt??ke>, <Oszt??lyok hat??rainak list??ja>, <Nyers adatok list??ja>, <Logikai ??rt??k (S??r??s??g?)>, <S??r??s??gi t??nyez?? (opcion??lis)> ]
FrequencyPolygon=Gyakoris??gGrafikon
FrequencyPolygon.Syntax=[ <Oszt??lyok hat??rainak list??ja>, <Magass??gok list??ja> ]\n[ <Oszt??lyok hat??rainak list??ja>, <Nyers adatok list??ja>, <Logikai ??rt??k (S??r??s??g?)>, <S??r??s??gi t??nyez?? (opcion??lis)> ]\n[ <Eloszl??sf??ggv??ny logikai ??rt??ke>, <Oszt??lyok hat??rainak list??ja>, <Nyers adatok list??ja>, <Logikai ??rt??k (S??r??s??g?)>, <S??r??s??gi t??nyez?? (opcion??lis)> ]
FrequencyTable=Gyakoris??gT??bl??zat
FrequencyTable.Syntax=[ <Nyers adatok list??ja>, <Sk??la faktor (opcion??lis)> ]\n[ <Eloszl??sf??ggv??ny logikai ??rt??ke>, <Nyers adatok list??ja> ]\n[ <Oszt??lyok hat??rainak list??ja>, <Nyers adatok list??ja> ]\n[ <Eloszl??sf??ggv??ny logikai ??rt??ke>, <Oszt??lyok hat??rainak list??ja>, <Nyers adatok list??ja> ]\n[ <Oszt??lyok hat??rainak list??ja>, <Nyers adatok list??ja>, <Logikai ??rt??k (S??r??s??g?)>, <S??r??s??gi t??nyez?? (opcion??lis)> ]\n[ <Eloszl??sf??ggv??ny logikai ??rt??ke>, <Oszt??lyok hat??rainak list??ja>, <Nyers adatok list??ja>, <Logikai ??rt??k (S??r??s??g?)>, <S??r??s??gi t??nyez?? (opcion??lis)> ]
FromBase=??tv??ltAlapr??l
FromBase.Syntax=[ <Sz??m sz??vegk??nt>, <Alap> ]
Function=F??ggv??ny
Function.Syntax=[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]\n[ <Sz??mok list??ja> ]
Function.Syntax3D=[ <Sz??mok list??ja> ]\n[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]\n[ <Kifejez??s>, <V??ltoz?? 1>, <Kezd????rt??k>, <V??g??rt??k>, <V??ltoz?? 2>, <Kezd????rt??k>, <V??g??rt??k> ]
Function.SyntaxCAS=[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]
FutureValue=J??v??beli??rt??k
FutureValue.Syntax=[ <Kamatr??ta>, <Id??szakok sz??ma>, <R??szlet fizet??s>, <J??v?? ??rt??k (opcion??lis)>, <T??pus (opcion??lis)> ]
GCD=LNKO
GCD.Syntax=[ <Sz??mok list??ja> ]\n[ <Sz??m>, <Sz??m> ]
GCD.SyntaxCAS=[ <Sz??mok list??ja> ]\n[ <Polinomok list??ja> ]\n[ <Sz??m>, <Sz??m> ]\n[ <Polinom>, <Polinom> ]
Gamma=GammaEloszl??s
Gamma.Syntax=[ <Alfa>, <Beta>, <V??ltoz?? ??rt??ke> ]\n[ <Alfa>, <Beta>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke>  ]\n[ <Alfa>, <Beta>, x, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
Gamma.SyntaxCAS=[ <Alfa>, <Beta>, <V??ltoz?? ??rt??ke> ]
GeometricMean=M??rtaniK??z??p
GeometricMean.Syntax=[ <Sz??mok list??ja> ]
GetTime=PontosId??D??tum
GetTime.Syntax=[]\n[ <Form??tum> ]
GroebnerDegRevLex=Gr??bnerDegRevLex
GroebnerDegRevLex.Syntax=[ <Polinomok list??ja> ]\n[ <Polinomok list??ja>, <V??ltoz??k list??ja> ]
GroebnerLex=Gr??bnerLex
GroebnerLex.Syntax=[ <Polinomok list??ja> ]\n[ <Polinomok list??ja>, <V??ltoz??k list??ja> ]
GroebnerLexDeg=Gr??bnerLexDeg
GroebnerLexDeg.Syntax=[ <Polinomok list??ja> ]\n[ <Polinomok list??ja>, <V??ltoz??k list??ja> ]
HarmonicMean=HarmonikusK??z??p
HarmonicMean.Syntax=[ <Sz??mok list??ja> ]
Height=Magass??g
Height.Syntax=[ <Test> ]
HideLayer=R??tegElrejt??se
HideLayer.Syntax=[ <Sz??m> ]
Histogram=Hisztogram
Histogram.Syntax=[ <Oszt??lyok hat??rainak list??ja>, <Magass??gok list??ja> ]\n[ <Oszt??lyok hat??rainak list??ja>, <Nyers adatok list??ja>, <Logikai ??rt??k (S??r??s??g?)>, <S??r??s??gi t??nyez?? (opcion??lis)> ]\n[ <Eloszl??sf??ggv??ny logikai ??rt??ke>, <Oszt??lyok hat??rainak list??ja>, <Nyers adatok list??ja>, <Logikai ??rt??k (S??r??s??g?)>, <S??r??s??gi t??nyez?? (opcion??lis)> ]
HistogramRight=HisztogramJobbr??l
HistogramRight.Syntax=[ <Oszt??lyok hat??rainak list??ja>, <Magass??gok list??ja> ]\n[ <Oszt??lyok hat??rainak list??ja>, <Nyers adatok list??ja>, <Logikai ??rt??k (S??r??s??g?)>, <S??r??s??gi t??nyez?? (opcion??lis)>  ]\n[ <Eloszl??sf??ggv??ny logikai ??rt??ke>, <Oszt??lyok hat??rainak list??ja>, <Nyers adatok list??ja>, <Logikai ??rt??k (S??r??s??g?)>, <S??r??s??gi t??nyez?? (opcion??lis)> ]
HyperGeometric=HipergeometrikusEloszl??s
HyperGeometric.Syntax=[ <Statisztikai sokas??g m??rete>, <Sikeres k??s??rletek sz??ma>, <Minta m??rete> ]\n[ <Statisztikai sokas??g m??rete>, <Sikeres k??s??rletek sz??ma>, <Minta m??rete>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]\n[ <Statisztikai sokas??g m??rete>, <Sikeres k??s??rletek sz??ma>, <Minta m??rete>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
HyperGeometric.SyntaxCAS=[ <Statisztikai sokas??g m??rete>, <Sikeres k??s??rletek sz??ma>, <Minta m??rete>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
Hyperbola=Hiperbola
Hyperbola.Syntax=[ <F??uszpont>, <F??uszpont>, <F??tengely hossza (sz??m)> ]\n[ <F??uszpont>, <F??uszpont>, <Szakasz> ]\n[ <F??uszpont>, <F??uszpont>, <Pont> ]
IFactor=SzorzatAlakI
IFactor.Syntax=[ <Polinom> ]
IFactor.SyntaxCAS=[ <Kifejez??s> ]
Icosahedron=Ikoza??der
Icosahedron.Syntax=[ <Equilateral Triangle> ]\n[ <Pont>, <Pont>, <Pont> ]\n[ <Pont>, <Pont>, <Ir??ny> ]
Identity=Egys??gM??trix
Identity.Syntax=[ <Sz??m> ]
If=Ha
If.Syntax=[ <Felt??tel>, <Akkor> ]\n[ <Felt??tel>, <Akkor>, <K??l??nben> ]
ImplicitCurve=ImplicitG??rbe
ImplicitCurve.Syntax=[ <Pontok list??ja> ]\n[ <f(x, y)> ]
ImplicitDerivative=ImplicitDeriv??lt
ImplicitDerivative.Syntax=[ <f(x, y)> ]
ImplicitDerivative.SyntaxCAS=[ <f(x, y)> ]\n[ <Kifejez??s>, <F??gg?? v??ltoz??>, <F??ggetlen v??ltoz??> ]
Incircle=Be??rtK??r
Incircle.Syntax=[ <Pont>, <Pont>, <Pont> ]
IndexOf=Poz??ci??
IndexOf.Syntax=[ <Alakzat>, <Lista> ]\n[ <Sz??veg>, <Sz??veg> ]\n[ <Alakzat>, <Lista>, <Kezd?? sorsz??m> ]\n[ <Sz??veg>, <Sz??veg>, <Kezd?? sorsz??m> ]
Insert=Besz??r
Insert.Syntax=[ <Lista>, <Lista>, <Poz??ci??> ]\n[ <Alakzat>, <Lista>, <Poz??ci??> ]
Integral=Integr??l
Integral.Syntax=[ <F??ggv??ny> ]\n[ <F??ggv??ny>, <V??ltoz??> ]\n[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]\n[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k>, <Logikai ??rt??k> ]
Integral.SyntaxCAS=[ <F??ggv??ny> ]\n[ <F??ggv??ny>, <V??ltoz??> ]\n[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]\n[ <F??ggv??ny>, <V??ltoz??>, <Kezd????rt??k>, <V??g??rt??k> ]
IntegralBetween=K??zrez??rtTer??let
IntegralBetween.Syntax=[ <F??ggv??ny>, <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]\n[ <F??ggv??ny>, <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k>, <Logikai ??rt??k> ]
IntegralBetween.SyntaxCAS=[ <F??ggv??ny>, <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]\n[ <F??ggv??ny>, <F??ggv??ny>, <V??ltoz??>, <Kezd????rt??k>, <V??g??rt??k> ]
IntegralSymbolic=SzimbolikusIntegr??l??s
IntegralSymbolic.Syntax=[ <F??ggv??ny> ]\n[ <F??ggv??ny>, <V??ltoz??> ]
InteriorAngles=Bels??Sz??gek
InteriorAngles.Syntax=[ <Soksz??g> ]
Intersect=Metsz??spont
Intersect.Syntax=[ <Alakzat>, <Alakzat> ]\n[ <Alakzat>, <Alakzat>, <Metsz??spont sz??ma> ]\n[ <Alakzat>, <Alakzat>, <Kezd??pont> ]\n[ <F??ggv??ny>, <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]\n[ <G??rbe 1>, <G??rbe 2>, <Param??ter 1>, <Param??ter 2> ]
Intersect.SyntaxCAS=[ <F??ggv??ny>, <F??ggv??ny> ]
IntersectConic=Metsz??sVonal
IntersectConic.Syntax=[ <S??k>, <M??sodrend?? g??rbe> ]\n[ <M??sodrend?? g??rbe>, <M??sodrend?? g??rbe> ]
IntersectPath=UtakMetszete
IntersectPath.Syntax=[ <Egyenes>, <Soksz??g> ]\n[ <Soksz??g>, <Soksz??g> ]
IntersectPath.Syntax3D=[ <Egyenes>, <Soksz??g> ]\n[ <Soksz??g>, <Soksz??g> ]\n[ <S??k>, <Soksz??g> ]\n[ <S??k>, <M??sodrend?? g??rbe> ]
Intersection=Metszet
Intersection.Syntax=[ <Lista>, <Lista> ]
InverseBeta=InverzB??ta
InverseBeta.Syntax=[ <Alfa>, <Beta>, <Val??sz??n??s??g> ]
InverseBinomial=InverzBinomi??lis
InverseBinomial.Syntax=[ <K??s??rletek sz??ma>, <Siker val??sz??n??s??ge>, <Cumulative Probability> ]
InverseBinomialMinimumTrials=InverzBinomi??lisMinPr??ba
InverseBinomialMinimumTrials.Syntax=[ <Cumulative Probability>, <Siker val??sz??n??s??ge>, <Sikeres k??s??rletek sz??ma> ]
InverseBinomialMinimumTrials.SyntaxCAS=[ <Cumulative Probability>, <Siker val??sz??n??s??ge>, <Sikeres k??s??rletek sz??ma> ]
InverseCauchy=InverzCauchy
InverseCauchy.Syntax=[ <Medi??n>, <Sz??less??g>, <Val??sz??n??s??g> ]
InverseChiSquared=InverzKhiN??gyzet
InverseChiSquared.Syntax=[ <Szabads??gfokok>, <Val??sz??n??s??g> ]
InverseExponential=InverzExponenci??lis
InverseExponential.Syntax=[ <Lambda>, <Val??sz??n??s??g> ]
InverseFDistribution=InverzFEloszl??s
InverseFDistribution.Syntax=[ <Sz??ml??l?? szabads??gfoka>, <Nevez?? szabads??gfoka>, <Val??sz??n??s??g> ]
InverseGamma=InverzGamma
InverseGamma.Syntax=[ <Alfa>, <Beta>, <Val??sz??n??s??g> ]
InverseHyperGeometric=InverzHipergeometrikus
InverseHyperGeometric.Syntax=[ <Statisztikai sokas??g m??rete>, <Sikeres k??s??rletek sz??ma>, <Minta m??rete>, <Val??sz??n??s??g> ]
InverseLaplace=InverzLaplace
InverseLaplace.Syntax=[ <F??ggv??ny> ]\n[ <F??ggv??ny>, <V??ltoz??> ]\n[ <F??ggv??ny>, <V??ltoz??>, <V??ltoz??> ]
InverseLogNormal=InverzLogNormal
InverseLogNormal.Syntax=[ <K??z??p??rt??k>, <Sz??r??s>, <Val??sz??n??s??g> ]
InverseLogistic=InverzLogisztikusEloszl??s
InverseLogistic.Syntax=[ <K??z??p??rt??k>, <Sz??less??g>, <Val??sz??n??s??g> ]
InverseNormal=InverzNorm??lis
InverseNormal.Syntax=[ <K??z??p??rt??k>, <Sz??r??s>, <Cumulative Probability> ]
InversePascal=InverzNegat??vBinomi??lis
InversePascal.Syntax=[ <n>, <p>, <Val??sz??n??s??g> ]
InversePoisson=InverzPoisson
InversePoisson.Syntax=[ <K??z??p??rt??k>, <Val??sz??n??s??g> ]
InverseTDistribution=InverzTEloszl??s
InverseTDistribution.Syntax=[ <Szabads??gfokok>, <Val??sz??n??s??g> ]
InverseWeibull=InverzWeibull
InverseWeibull.Syntax=[ <Alakparam??ter>, <Sz??less??g>, <Val??sz??n??s??g> ]
InverseZipf=InverzZ??ta
InverseZipf.Syntax=[ <Elemek sz??ma>, <Kitev??>, <Val??sz??n??s??g> ]
Invert=Inverz
Invert.Syntax=[ <M??trix> ]\n[ <F??ggv??ny> ]
IsFactored=SzorzatAlakbanVanE
IsFactored.Syntax=[ <Polinom> ]
IsInRegion=TartalmazzaE
IsInRegion.Syntax=[ <Pont>, <Tartom??ny> ]
IsInteger=Eg??szE
IsInteger.Syntax=[ <Sz??m> ]
IsPrime=Pr??mE
IsPrime.Syntax=[ <Sz??m> ]
IsTangent=??rintiE
IsTangent.Syntax=[ <Egyenes>, <K??pszelet> ]
IsVertexForm=TeljesN??gyzetE
IsVertexForm.Syntax=[ <F??ggv??ny> ]
Iteration=Iter??ci??
Iteration.Syntax=[ <F??ggv??ny>, <Kezd????rt??k>, <Iter??ci??k sz??ma> ]\n[ <Kifejez??s>, <V??ltoz??k>, <Kezd????rt??k>, <L??p??ssz??m> ]
IterationList=Iter??ci??Lista
IterationList.Syntax=[ <F??ggv??ny>, <Kezd????rt??k>, <Iter??ci??k sz??ma> ]\n[ <Kifejez??s>, <V??ltoz??k>, <Kezd????rt??k>, <L??p??ssz??m> ]
IterationList.SyntaxCAS=[ <F??ggv??ny>, <Kezd????rt??k>, <Iter??ci??k sz??ma> ]
Join=Egyes??t
Join.Syntax=[ <List??k list??ja> ]\n[ <Lista>, <Lista>, ... ]
JordanDiagonalization=JordanDiagonaliz??ci??
JordanDiagonalization.SyntaxCAS=[ <M??trix> ]
KeepIf=MegtartHa
KeepIf.Syntax=[ <Felt??tel>, <Lista> ]\n[ <Felt??tel>, <V??ltoz??>, <Lista> ]
LCM=LKKT
LCM.Syntax=[ <Sz??mok list??ja> ]\n[ <Sz??m>, <Sz??m> ]
LCM.SyntaxCAS=[ <Sz??mok list??ja> ]\n[ <Polinomok list??ja> ]\n[ <Sz??m>, <Sz??m> ]\n[ <Polinom>, <Polinom> ]
LUDecomposition=LUM??trixFelbont??s
LUDecomposition.Syntax=[ <M??trix> ]
LaTeX=LaTeX
LaTeX.Syntax=[ <Alakzat> ]\n[ <Alakzat>, <V??ltoz??k behelyettes??t??se - logikai ??rt??k> ]\n[ <Alakzat>, <V??ltoz??k behelyettes??t??se - logikai ??rt??k>, <Nevek megjelen??t??se - logikai ??rt??k> ]
Laplace.Syntax=[ <F??ggv??ny> ]\n[ <F??ggv??ny>, <V??ltoz??> ]\n[ <F??ggv??ny>, <V??ltoz??>, <V??ltoz??> ]
Last=Utols??
Last.Syntax=[ <Lista> ]\n[ <Sz??veg> ]\n[ <Lista>, <Elemek sz??ma> ]\n[ <Sz??veg>, <Elemek sz??ma> ]
Last.SyntaxCAS=[ <Lista> ]\n[ <Lista>, <Elemek sz??ma> ]
LeftSide=EgyenletBalOldala
LeftSide.Syntax=[ <Egyenlet> ]
LeftSide.SyntaxCAS=[ <Egyenlet> ]\n[ <Egyenletek list??ja> ]\n[ <Egyenletek list??ja>, <Sorsz??m> ]
LeftSum=Baloldali??sszeg
LeftSum.Syntax=[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k>, <T??glalapok sz??ma> ]
Length=Hossz
Length.Syntax=[ <Alakzat> ]\n[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]\n[ <F??ggv??ny>, <Kezd??pont>, <V??gpont> ]\n[ <G??rbe>, <Kezd?? t-??rt??k>, <Lez??r?? t-??rt??k> ]\n[ <G??rbe>, <Kezd??pont>, <V??gpont> ]
Length.SyntaxCAS=[ <Lista> ]\n[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]\n[ <F??ggv??ny>, <V??ltoz??>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]
LetterToUnicode=Bet??tUnicode
LetterToUnicode.Syntax=[ <Bet??> ]
Limit=Hat??r??rt??k
Limit.Syntax=[ <F??ggv??ny>, <??rt??k> ]
Limit.SyntaxCAS=[ <Kifejez??s>, <??rt??k> ]\n[ <Kifejez??s>, <V??ltoz??>, <??rt??k> ]
LimitAbove=JobboldaliHat??r??rt??k
LimitAbove.Syntax=[ <F??ggv??ny>, <??rt??k> ]
LimitAbove.SyntaxCAS=[ <Kifejez??s>, <??rt??k> ]\n[ <Kifejez??s>, <V??ltoz??>, <??rt??k> ]
LimitBelow=BaloldaliHat??r??rt??k
LimitBelow.Syntax=[ <F??ggv??ny>, <??rt??k> ]
LimitBelow.SyntaxCAS=[ <Kifejez??s>, <??rt??k> ]\n[ <Kifejez??s>, <V??ltoz??>, <??rt??k> ]
Line=Egyenes
Line.Syntax=[ <Pont>, <Pont> ]\n[ <Pont>, <P??rhuzamos egyenes> ]\n[ <Pont>, <Ir??nyvektor> ]
LineBisector=Szakaszfelez??
LineBisector.Syntax=[ <Szakasz> ]\n[ <Pont>, <Pont> ]
LineBisector.Syntax3D=[ <Szakasz> ]\n[ <Pont>, <Pont> ]\n[ <Pont>, <Pont>, <Ir??ny> ]
LineGraph=VonalDiagram
LineGraph.Syntax=[ <X ??rt??kek list??ja>, <Y ??rt??kek list??ja> ]
Locus=M??rtaniHely
Locus.Syntax=[ <Pont a m??rtani hely kirajzol??s??hoz>, <Pont> ]\n[ <Pont a m??rtani hely kirajzol??s??hoz>, <Cs??szka> ]\n[ <Ir??nymez??>, <Pont> ]\n[ <f(x, y)>, <Pont> ]
LocusEquation=M??rtanihelyEgyenlete
LocusEquation.Syntax=[ <M??rtani hely> ]\n[ <M??rtani hely pontja>, <Mozg?? pont> ]\n[ <Logikai kifejez??s>, <Mozg?? pont> ]
LogNormal=Lognorm??lisEloszl??s
LogNormal.Syntax=[ <K??z??p??rt??k>, <Sz??r??s>, <V??ltoz?? ??rt??ke> ]\n[ <K??z??p??rt??k>, <Sz??r??s>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke>  ]\n[ <K??z??p??rt??k>, <Sz??r??s>, x, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
Logistic=LogisztikusEloszl??s
Logistic.Syntax=[ <K??z??p??rt??k>, <Sz??less??g>, <V??ltoz?? ??rt??ke> ]\n[ <K??z??p??rt??k>, <Sz??less??g>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke>  ]\n[ <K??z??p??rt??k>, <Sz??less??g>, x, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
LowerSum=Als????sszeg
LowerSum.Syntax=[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k>, <T??glalapok sz??ma> ]
MAD=??tlagosAbszol??tElt??r??s
MatrixPlot=M??trix
MatrixRank=M??trixRangja
MatrixRank.Syntax=[ <M??trix> ]
Max=Maximum
Max.Syntax=[ <Intervallum> ]\n[ <Sz??m>, <Sz??m> ]\n[ <Lista> ]\n[ <Adatok list??ja>, <Gyakoris??gok list??ja> ]\n[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]
Max.SyntaxCAS=[ <Lista> ]\n[ <Intervallum> ]\n[ <Sz??m>, <Sz??m> ]\n[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]\n[ <Adatok list??ja>, <Gyakoris??gok list??ja> ]
Maximize=MaximumKeres??s
Maximize.Syntax=[ <F??gg?? sz??m>, <Szabad sz??m> ]\n[ <F??gg?? sz??m>, <Mozg?? pont> ]
Mean=??tlag
Mean.Syntax=[ <Nyers adatok list??ja> ]\n[ <Sz??mok list??ja>, <Gyakoris??gok list??ja> ]
MeanX=??tlagX
MeanX.Syntax=[ <Pontok list??ja> ]
MeanY=??tlagY
MeanY.Syntax=[ <Pontok list??ja> ]
Median=Medi??n
Median.Syntax=[ <Nyers adatok list??ja> ]\n[ <Sz??mok list??ja>, <Gyakoris??gok list??ja> ]
Median.SyntaxCAS=[ <Sz??mok list??ja> ]
Midpoint=K??z??ppont
Midpoint.Syntax=[ <Szakasz> ]\n[ <K??pszelet> ]\n[ <Intervallum> ]\n[ <Pont>, <Pont> ]
Min=Minimum
Min.Syntax=[ <Intervallum> ]\n[ <Sz??m>, <Sz??m> ]\n[ <Lista> ]\n[ <Adatok list??ja>, <Gyakoris??gok list??ja> ]\n[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]
Min.SyntaxCAS=[ <Lista> ]\n[ <Intervallum> ]\n[ <Sz??m>, <Sz??m> ]\n[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]\n[ <Adatok list??ja>, <Gyakoris??gok list??ja> ]
MinimalPolynomial=Minim??lPolinom
MinimalPolynomial.Syntax=[ <M??trix> ]
Minimize=MinimumKeres??s
Minimize.Syntax=[ <F??gg?? sz??m>, <Szabad sz??m> ]\n[ <F??gg?? sz??m>, <Mozg?? pont> ]
MinimumSpanningTree=Minim??lisFesz??t??Fa
MinimumSpanningTree.Syntax=[ <Pontok list??ja> ]
Mirror=T??kr??z??s
Mirror.Syntax=[ <Alakzat>, <Pont> ]\n[ <Alakzat>, <Egyenes> ]\n[ <Alakzat>, <K??pszelet> ]
Mirror.Syntax3D=[ <Alakzat>, <Pont> ]\n[ <Alakzat>, <Egyenes> ]\n[ <Alakzat>, <S??k> ]\n[ <Alakzat>, <K??pszelet> ]
MixedNumber=VegyesT??rt
MixedNumber.SyntaxCAS=[ <Sz??m> ]
Mod=Marad??k
Mod.Syntax=[ <Osztand?? sz??m>, <Oszt?? sz??m> ]\n[ <Osztand?? polinom>, <Oszt?? polinom> ]
Mode=M??dusz
Mode.Syntax=[ <Sz??mok list??ja> ]
ModularExponent=Modul??risHatv??nyoz??s
ModularExponent.Syntax=[ <Sz??m>, <Sz??m>, <Sz??m> ]
NDerivative=NDeriv??lt
NDerivative.Syntax=[ <F??ggv??ny> ]\n[ <F??ggv??ny>, <G??rbe rendje> ]
NIntegral=Hat??rozottIntegr??l
NIntegral.Syntax=[ <F??ggv??ny> ]\n[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]\n[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Start y-Value>, <Lez??r?? x-??rt??k> ]
NIntegral.SyntaxCAS=[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]\n[ <F??ggv??ny>, <V??ltoz??>, <Kezd????rt??k>, <V??g??rt??k> ]
NInvert=NInverz
NInvert.Syntax=[ <F??ggv??ny> ]
NSolutions=NumerikusMegold??s
NSolutions.Syntax=[ <Egyenlet> ]
NSolutions.SyntaxCAS=[ <Egyenlet> ]\n[ <Egyenlet>, <V??ltoz??> ]\n[ <Egyenlet>, <V??ltoz??=Kezd????rt??k> ]\n[ <Egyenletek list??ja>, <V??ltoz??k list??ja> ]
NSolve=NumerikusanMegold
NSolve.Syntax=[ <Egyenlet> ]
NSolve.SyntaxCAS=[ <Egyenlet> ]\n[ <Egyenlet>, <V??ltoz??> ]\n[ <Egyenlet>, <V??ltoz??=Kezd????rt??k> ]\n[ <Egyenletek list??ja>, <V??ltoz??k list??ja> ]
NSolveODE=DiffEgyenlNumMegold??s
NSolveODE.Syntax=[ <Deriv??ltak list??ja>, <Kezd?? x-koordin??ta>, <Kezdeti y-koordin??t??k list??ja>, <V??gs??  x-koordin??ta> ]
Name=N??v
Name.Syntax=[ <Alakzat> ]
Net=H??l??
Net.Syntax=[ <Poli??der>, <Sz??m> ]\n[ <Poli??der>, <Sz??m>, <Fel??let>, <Cs??cs>, <Cs??cs>, ... ]
NextPrime=K??vetkez??Pr??m
NextPrime.Syntax=[ <Sz??m> ]
Normal=Norm??lisEloszl??s
Normal.Syntax=[ <K??z??p??rt??k>, <Sz??r??s>, <V??ltoz?? ??rt??ke> ]\n[ <K??z??p??rt??k>, <Sz??r??s>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]\n[ <K??z??p??rt??k>, <Sz??r??s>, x, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
NormalQuantilePlot=Norm??lKvantilisF??ggv??ny
NormalQuantilePlot.Syntax=[ <Nyers adatok list??ja> ]
Normalize=Normaliz??l
Normalize.Syntax=[ <Sz??mok list??ja> ]\n[ <Pontok list??ja> ]
Numerator=Sz??ml??l??
Numerator.Syntax=[ <Sz??m> ]\n[ <F??ggv??ny> ]
Numerator.SyntaxCAS=[ <Kifejez??s> ]
Numeric=K??zel??t??s
Numeric.SyntaxCAS=[ <Kifejez??s> ]\n[ <Kifejez??s>, <Pontoss??g> ]
Object=Alakzat
Object.Syntax=[ <Alakzat neve sz??vegk??nt (id??z??jelek k??z??tt)> ]
Octahedron=Okta??der
Octahedron.Syntax=[ <Equilateral Triangle> ]\n[ <Pont>, <Pont>, <Pont> ]\n[ <Pont>, <Pont>, <Ir??ny> ]
Ordinal=Sorsz??m
Ordinal.Syntax=[ <Eg??sz> ]
OrdinalRank=Sorrend
OrdinalRank.Syntax=[ <Lista> ]
OrthogonalLine=Mer??leges
OrthogonalLine.Syntax=[ <Pont>, <Egyenes> ]\n[ <Pont>, <Szakasz> ]\n[ <Pont>, <Vektor> ]
OrthogonalLine.Syntax3D=[ <Pont>, <Egyenes> ]\n[ <Pont>, <Szakasz> ]\n[ <Pont>, <Vektor> ]\n[ <Pont>, <S??k> ]\n[ <Egyenes>, <Egyenes> ]\n[ <Pont>, <Ir??ny>, <Ir??ny> ]\n[ <Pont>, <Egyenes>, <Context> ]
OrthogonalPlane=Mer??legesS??k
OrthogonalPlane.Syntax=[ <Pont>, <Egyenes> ]\n[ <Pont>, <Vektor> ]
OrthogonalVector=Norm??lVektor
OrthogonalVector.Syntax=[ <Egyenes> ]\n[ <Szakasz> ]\n[ <Vektor> ]
OrthogonalVector.Syntax3D=[ <Egyenes> ]\n[ <Szakasz> ]\n[ <Vektor> ]\n[ <S??k> ]
OrthogonalVector.SyntaxCAS=[ <Vektor> ]
OsculatingCircle=Simul??K??r
OsculatingCircle.Syntax=[ <Pont>, <Alakzat> ]
PMCC=Korrel??ci??sEgy??tthat??
PMCC.Syntax=[ <Pontok list??ja> ]\n[ <X ??rt??kek list??ja>, <Y ??rt??kek list??ja> ]
Pan=RajzlapEltol??sa
Pan.Syntax=[ <x>, <y> ]
Pan.Syntax3D=[ <x>, <y> ]\n[ <x>, <y>, <z> ]
Parabola.Syntax=[ <Pont>, <Egyenes> ]
Parameter=Param??ter
Parameter.Syntax=[ <K??pszelet> ]
ParametricDerivative=Deriv??ltParam??teres
ParametricDerivative.Syntax=[ <G??rbe> ]
ParseToFunction=F??ggv??nyk??ntMegad
ParseToFunction.Syntax=[ <F??ggv??ny>, <Kifejez??s (id??z??jelek k??z??tt)> ]
ParseToNumber=Sz??mk??ntMegad
ParseToNumber.Syntax=[ <Sz??m>, <Kifejez??s (id??z??jelek k??z??tt)> ]
PartialFractions=Parci??lisT??rt
PartialFractions.Syntax=[ <F??ggv??ny> ]
PartialFractions.SyntaxCAS=[ <F??ggv??ny> ]\n[ <F??ggv??ny>, <V??ltoz??> ]
Pascal=Negat??vBinomi??lisEloszl??s
Pascal.Syntax=[ <n>, <p> ]\n[ <n>, <p>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]\n[ <n>, <p>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
Pascal.SyntaxCAS=[ <n>, <p>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
PathParameter=??tParam??ter
PathParameter.Syntax=[ <Az ??t egy ponja> ]
Payment=T??rleszt??R??szlet
Payment.Syntax=[ <Kamatr??ta>, <Id??szakok sz??ma>, <Jelen ??rt??k>, <J??v?? ??rt??k (opcion??lis)>, <T??pus (opcion??lis)> ]
PenStroke.Syntax=[ <Pont>, ..., <Pont> ]
Percentile=Percentilis
Percentile.Syntax=[ <Sz??mok list??ja>, <Sz??zal??k (t??rtk??nt)> ]
Perimeter=Ker??let
Perimeter.Syntax=[ <Soksz??g> ]\n[ <K??pszelet> ]\n[ <M??rtani hely> ]
Periods=Id??szakokSz??ma
Periods.Syntax=[ <Kamatr??ta>, <R??szlet fizet??s>, <Jelen ??rt??k>, <J??v?? ??rt??k (opcion??lis)>, <T??pus (opcion??lis)> ]
PieChart=K??rDiagram
PieChart.Syntax=[ <Gyakoris??gok list??ja> ]\n[ <Gyakoris??gok list??ja>, <Center>, <Sug??r> ]
Plane=S??k
Plane.Syntax=[ <Soksz??g> ]\n[ <K??pszelet> ]\n[ <Pont>, <S??k> ]\n[ <Pont>, <Egyenes> ]\n[ <Egyenes>, <Egyenes> ]\n[ <Pont>, <Pont>, <Pont> ]\n[ <Pont>, <Vektor>, <Vektor> ]
PlaneBisector=Sz??gfelez??S??k
PlaneBisector.Syntax=[ <Szakasz> ]\n[ <Pont>, <Pont> ]
PlaySound=HangLej??tsz??s
PlaySound.Syntax=[ <F??jl> ]\n[ <Logikai ??rt??k lej??tsz??shoz> ]\n[ <F??ggv??ny>, <Kezd????rt??k>, <V??g??rt??k> ]\n[ <F??ggv??ny>, <Kezd????rt??k>, <V??g??rt??k>, <Mintav??tel s??r??s??ge>, <Mintav??tel m??lys??ge> ]
PlotSolve=Megold??br??zol
PlotSolve.Syntax=[ <Equation in x> ]
Point=Pont
Point.Syntax=[ <Alakzat> ]\n[ <Alakzat>, <Param??ter> ]\n[ <Pont>, <Vektor> ]\n[ <Lista> ]
PointIn=Bels??Pont
PointIn.Syntax=[ <Tartom??ny> ]
PointList=PontLista
PointList.Syntax=[ <Lista> ]
Poisson=PoissonEloszl??s
Poisson.Syntax=[ <K??z??p??rt??k> ]\n[ <K??z??p??rt??k>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]\n[ <K??z??p??rt??k>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
Poisson.SyntaxCAS=[ <K??z??p??rt??k>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
Polar=Pol??ris
Polar.Syntax=[ <Pont>, <K??pszelet> ]\n[ <Egyenes>, <K??pszelet> ]
PolyLine=T??r??ttVonal
PolyLine.Syntax=[ <Pontok list??ja> ]\n[ <Pont>, ..., <Pont> ]
Polygon=Soksz??g
Polygon.Syntax=[ <Pontok list??ja> ]\n[ <Pont>, ..., <Pont> ]\n[ <Pont>, <Pont>, <Cs??csok sz??ma> ]
Polygon.Syntax3D=[ <Pontok list??ja> ]\n[ <Pont>, ..., <Pont> ]\n[ <Pont>, <Pont>, <Cs??csok sz??ma> ]\n[ <Pont>, <Pont>, <Cs??csok sz??ma>, <Ir??ny> ]
Polynomial=Polinom
Polynomial.Syntax=[ <F??ggv??ny> ]\n[ <Pontok list??ja> ]
Polynomial.SyntaxCAS=[ <F??ggv??ny> ]\n[ <F??ggv??ny>, <V??ltoz??> ]
PresentValue=Jelen??rt??k
PresentValue.Syntax=[ <Kamatr??ta>, <Id??szakok sz??ma>, <R??szlet fizet??s>, <J??v?? ??rt??k (opcion??lis)>, <T??pus (opcion??lis)> ]
PreviousPrime=El??z??Pr??m
PreviousPrime.Syntax=[ <Sz??m> ]
PrimeFactors=Pr??mT??nyez??k
PrimeFactors.Syntax=[ <Sz??m> ]
Prism=Has??b
Prism.Syntax=[ <Soksz??g>, <Pont> ]\n[ <Soksz??g>, <Magass??g> ]\n[ <Pont>, <Pont>, ... ]
Product=Szorzat
Product.Syntax=[ <Nyers adatok list??ja> ]\n[ <Sz??mok list??ja>, <Elemek sz??ma> ]\n[ <Sz??mok list??ja>, <Gyakoris??gok list??ja> ]\n[ <Kifejez??s>, <V??ltoz??>, <Kezd????rt??k>, <V??g??rt??k> ]
Product.SyntaxCAS=[ <Kifejez??sek list??ja> ]\n[ <Kifejez??s>, <V??ltoz??>, <Kezd?? sorsz??m>, <Z??r?? sorsz??m> ]
Prove=Bizony??t
Prove.Syntax=[ <Logikai kifejez??s> ]
ProveDetails=Bizony??t??sR??szletek
ProveDetails.Syntax=[ <Logikai kifejez??s> ]
Pyramid=G??la
Pyramid.Syntax=[ <Soksz??g>, <Pont> ]\n[ <Soksz??g>, <Magass??g> ]\n[ <Pont>, <Pont>, <Pont>, <Pont>, ... ]
Q1=Els??Kvartilis
Q1.Syntax=[ <Nyers adatok list??ja> ]\n[ <Sz??mok list??ja>, <Gyakoris??gok list??ja> ]
Q3=HarmadikKvartilis
Q3.Syntax=[ <Nyers adatok list??ja> ]\n[ <Sz??mok list??ja>, <Gyakoris??gok list??ja> ]
QRDecomposition=QRM??trixFelbont??s
QRDecomposition.Syntax=[ <M??trix> ]
QuadricSide=Oldal
QuadricSide.Syntax=[ <M??sodrend?? g??rbe> ]
RSquare=RN??gyzet
RSquare.Syntax=[ <Pontok list??ja>, <F??ggv??ny> ]
Radius=Sug??r
Radius.Syntax=[ <K??pszelet> ]
Random=V??letlensz??m
Random.Syntax=[ <Legkisebb ??rt??k(eg??sz sz??m)>, <Legnagyobb ??rt??k(eg??sz sz??m> ]\n[ <Legkisebb ??rt??k(eg??sz sz??m)>, <Legnagyobb ??rt??k(eg??sz sz??m>, <Mint??k sz??ma> ]\n[ <Legkisebb ??rt??k(eg??sz sz??m)>, <Legnagyobb ??rt??k(eg??sz sz??m>, <Logikai konstans> ]
Random.SyntaxCAS=[ <Legkisebb ??rt??k(eg??sz sz??m)>, <Legnagyobb ??rt??k(eg??sz sz??m> ]\n[ <Legkisebb ??rt??k(eg??sz sz??m)>, <Legnagyobb ??rt??k(eg??sz sz??m>, <Mint??k sz??ma> ]
RandomBinomial=V??letlensz??mBinomi??lisEloszl??s
RandomBinomial.Syntax=[ <K??s??rletek sz??ma>, <Val??sz??n??s??g> ]
RandomDiscrete=V??letlensz??mDiszkr??t
RandomDiscrete.Syntax=[ <Lista>, <Lista> ]
RandomElement=V??letlenElem
RandomElement.Syntax=[ <Lista> ]
RandomNormal=V??letlensz??mNorm??lisEloszl??s
RandomNormal.Syntax=[ <K??z??p??rt??k>, <Sz??r??s> ]
RandomPointIn=V??letlenPont
RandomPointIn.Syntax=[ <Tartom??ny> ]\n[ <Pontok list??ja> ]\n[ <xMin>, <xMax>, <yMin>, <yMax> ]
RandomPoisson=V??letlensz??mPoissonEloszl??s
RandomPoisson.Syntax=[ <K??z??p??rt??k> ]
RandomPolynomial=V??letlenPolinom
RandomPolynomial.Syntax=[ <Foksz??m>, <Egy??tthat??k minimuma>, <Egy??tthat??k maximuma> ]
RandomPolynomial.SyntaxCAS=[ <Foksz??m>, <Egy??tthat??k minimuma>, <Egy??tthat??k maximuma> ]\n[ <V??ltoz??>, <Foksz??m>, <Egy??tthat??k minimuma>, <Egy??tthat??k maximuma> ]
RandomUniform=V??letlensz??mEgyenletesEloszl??s
RandomUniform.Syntax=[ <Minimum>, <Maximum> ]\n[ <Minimum>, <Maximum>, <Mint??k sz??ma> ]
Rate=Kamatr??ta
Rate.Syntax=[ <Id??szakok sz??ma>, <R??szlet fizet??s>, <Jelen ??rt??k>, <J??v?? ??rt??k (opcion??lis)>, <T??pus (opcion??lis)>, <Becsl??s (opcion??lis)> ]
Rationalize=Racion??lisSz??mk??nt
Rationalize.SyntaxCAS=[ <Sz??m> ]
Ray=F??legyenes
Ray.Syntax=[ <Kezd??pont>, <Pont> ]\n[ <Kezd??pont>, <Ir??nyvektor> ]
ReadText=Felolvas
ReadText.Syntax=[ <Sz??veg> ]
RectangleSum=T??glalap??sszeg
RectangleSum.Syntax=[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k>, <T??glalapok sz??ma>, <T??glalapok magass??g??nak ar??nya> ]
ReducedRowEchelonForm=Reduk??ltL??pcs??sAlak??M??trix
ReducedRowEchelonForm.Syntax=[ <M??trix> ]
Relation=Kapcsolat
Relation.Syntax=[ <Lista> ]\n[ <Alakzat>, <Alakzat> ]
RemovableDiscontinuity=Megsz??ntethet??Szakad??s
RemovableDiscontinuity.Syntax=[ <F??ggv??ny> ]
Remove=Elt??vol??t??s
Remove.Syntax=[ <Lista>, <Lista> ]
RemoveUndefined=NemDefini??ltT??rl??se
RemoveUndefined.Syntax=[ <Lista> ]
Rename=??tnevez??s
Rename.Syntax=[ <Alakzat>, <N??v> ]
Repeat=Ism??tl??s
Repeat.Syntax=[ <Sz??m>, <Parancs>, <Parancs>, ... ]
ReplaceAll=ElemekHelyettes??t??se
ReplaceAll.Syntax=[ <Sz??veg>, <Text to Match>, <Text to Replace> ]
ResidualPlot=K??l??nbs??gF??ggv??ny
ResidualPlot.Syntax=[ <Pontok list??ja>, <F??ggv??ny> ]
Reverse=Ford??t
Reverse.Syntax=[ <Lista> ]
RightSide=EgyenletJobbOldala
RightSide.Syntax=[ <Egyenlet> ]
RightSide.SyntaxCAS=[ <Egyenlet> ]\n[ <Egyenletek list??ja> ]\n[ <Egyenletek list??ja>, <Sorsz??m> ]
RigidPolygon=MerevSoksz??g
RigidPolygon.Syntax=[ <Soksz??g> ]\n[ <Soksz??g>, <x eltol??s>, <y eltol??s> ]\n[ <Szabad pont>, ..., <Szabad pont> ]
Root=Gy??k
Root.Syntax=[ <Polinom> ]\n[ <F??ggv??ny>, <Kezd?? x -rt??k> ]\n[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]
Root.SyntaxCAS=[ <Polinom> ]
RootList=Gy??k??kList??ja
RootList.Syntax=[ <Lista> ]
RootMeanSquare=N??gyzetesK??z??p
RootMeanSquare.Syntax=[ <Sz??mok list??ja> ]
Roots=Gy??k??k
Roots.Syntax=[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k> ]
Rotate=Forgat??s
Rotate.Syntax=[ <Alakzat>, <Sz??g> ]\n[ <Alakzat>, <Sz??g>, <Pont> ]
Rotate.Syntax3D=[ <Alakzat>, <Sz??g> ]\n[ <Alakzat>, <Sz??g>, <Pont> ]\n[ <Alakzat>, <Sz??g>, <Forgat??si tengely> ]\n[ <Alakzat>, <Sz??g>, <Pont a tengelyen>, <Tengely ir??nya vagy s??k> ]
RotateText=Sz??vegForgat??s
RotateText.Syntax=[ <Sz??veg>, <Sz??g> ]
Row=Sor
Row.Syntax=[ <Cella n??v> ]
RunClickScript=ScriptFuttat??saKattint??sn??l
RunClickScript.Syntax=[ <Alakzat> ]
RunUpdateScript=ScriptFuttat??saFriss??t??sn??l
RunUpdateScript.Syntax=[ <Alakzat> ]
SD=Sz??r??s
SDX.Syntax=[ <Pontok list??ja> ]
SDY.Syntax=[ <Pontok list??ja> ]
SVD=Szingul??ris??rt??kfelbont??s
SVD.Syntax=[ <M??trix> ]
SXX.Syntax=[ <Sz??mok list??ja> ]\n[ <Pontok list??ja> ]
SXY.Syntax=[ <Pontok list??ja> ]\n[ <Sz??mok list??ja>, <Sz??mok list??ja> ]
SYY.Syntax=[ <Pontok list??ja> ]
Sample=Minta
Sample.Syntax=[ <Lista>, <Elemsz??m> ]\n[ <Lista>, <Elemsz??m>, <Logikai ??rt??k ism??tl??d??sre> ]
SampleSD=Korrig??ltSz??r??s
SampleSD.SyntaxCAS=[ <Sz??mok list??ja> ]
SampleSDX=MintaXKoordin??taSz??r??sa
SampleSDX.Syntax=[ <Pontok list??ja> ]
SampleSDY=MintaYKoordin??taSz??r??sa
SampleSDY.Syntax=[ <Pontok list??ja> ]
SampleVariance=MintaVariancia
SampleVariance.Syntax=[ <Nyers adatok list??ja> ]\n[ <Sz??mok list??ja>, <Gyakoris??gok list??ja> ]
SampleVariance.SyntaxCAS=[ <Sz??mok list??ja> ]
ScientificText=Norm??lAlak
ScientificText.Syntax=[ <Sz??m> ]\n[ <Sz??m>, <??rt??kes jegyek sz??ma> ]
SecondAxis=KisTengely
SecondAxis.Syntax=[ <K??pszelet> ]
SecondAxisLength=KisTengelyHossz
SecondAxisLength.Syntax=[ <K??pszelet> ]
Sector=Cikk
Sector.Syntax=[ <K??pszelet>, <Pont>, <Pont> ]\n[ <K??pszelet>, <Pont>, <Pont> ]
Segment=Szakasz
Segment.Syntax=[ <Pont>, <Pont> ]\n[ <Pont>, <Sz??m> ]
SelectObjects=AlakzatokKijel??l??se
SelectObjects.Syntax=[ ]\n[ <Alakzat>, <Alakzat>, ... ]
SelectedElement=Kijel??ltElem
SelectedElement.Syntax=[ <Lista> ]
SelectedIndex=Kijel??ltElemSorsz??ma
SelectedIndex.Syntax=[ <Lista> ]
Semicircle=F??lk??r
Semicircle.Syntax=[ <Pont>, <Pont> ]
Sequence=Sorozat
Sequence.Syntax=[ <V??g??rt??k> ]\n[ <Kezd????rt??k>, <V??g??rt??k> ]\n[ <Kezd????rt??k>, <V??g??rt??k>, <L??p??sk??z> ]\n[ <Kifejez??s>, <V??ltoz??>, <Kezd????rt??k>, <V??g??rt??k> ]\n[ <Kifejez??s>, <V??ltoz??>, <Kezd????rt??k>, <V??g??rt??k>, <L??p??sk??z> ]
SetActiveView=Akt??vRajzlap
SetActiveView.Syntax=[ <N??zet> ]\n[ <S??k> ]
SetAxesRatio=TengelyekAr??nya
SetAxesRatio.Syntax=[ <Sz??m>, <Sz??m> ]
SetAxesRatio.Syntax3D=[ <Sz??m>, <Sz??m> ]\n[ <Sz??m>, <Sz??m>, <Sz??m> ]
SetBackgroundColor=H??tt??rsz??n
SetBackgroundColor.Syntax=[ <Sz??n> ]\n[ <Alakzat>, <Sz??n> ]\n[ <Piros>, <Z??ld>, <K??k> ]\n[ <Alakzat>, <Piros>, <Z??ld>, <K??k> ]
SetCaption=C??mke
SetCaption.Syntax=[ <Alakzat>, <Sz??veg> ]
SetColor=Sz??n
SetColor.Syntax=[ <Alakzat>, <Sz??n> ]\n[ <Alakzat>, <Piros>, <Z??ld>, <K??k> ]
SetConditionToShowObject=MutatHa
SetConditionToShowObject.Syntax=[ <Alakzat>, <Felt??tel> ]
SetConstructionStep=Szerkeszt??siL??p??sBe??ll??t??sa
SetConstructionStep.Syntax=[ <Sz??m> ]
SetCoords=PontKoordin??t??i
SetCoords.Syntax=[ <Alakzat>, <x>, <y> ]\n[ <Alakzat>, <x>, <y>, <z> ]
SetDecoration=D??sz??t??Elem
SetDecoration.Syntax=[ <Alakzat>, <Sz??m> ]\n[ <Szakasz>, <Sz??m>, <Sz??m>]
SetDynamicColor=DinamikusSzinek
SetDynamicColor.Syntax=[ <Alakzat>, <Piros>, <Z??ld>, <K??k> ]\n[ <Alakzat>, <Piros>, <Z??ld>, <K??k>, <??tl??tszatlans??g> ]
SetFilling=Kit??lt??s
SetFilling.Syntax=[ <Alakzat>, <Sz??m> ]
SetFixed=FixAlakzat
SetFixed.Syntax=[ <Alakzat>, <true | false> ]\n[ <Alakzat>, <true | false>, <true | false> ]
SetImage=AlakzatKit??lt??seK??ppel
SetImage.Syntax=[ <Alakzat>, <K??p> ]\n[ <Alakzat>, <Sz??veg> ]
SetLabelMode=FeliratM??d
SetLabelMode.Syntax=[ <Alakzat>, <Sz??m> ]
SetLayer=R??teg
SetLayer.Syntax=[ <Alakzat>, <S??k> ]
SetLevelOfDetail=R??szletezetts??gFoka
SetLevelOfDetail.Syntax=[ <Fel??let>, <R??szletezetts??g foka> ]
SetLineStyle=VonalSt??lus
SetLineStyle.Syntax=[ <Alakzat>, <Sz??m> ]
SetLineThickness=VonalVastags??g
SetLineThickness.Syntax=[ <Alakzat>, <Sz??m> ]
SetPerspective=Munkaasztal
SetPerspective.Syntax=[ <Sz??veg> ]
SetPointSize=PontM??ret
SetPointSize.Syntax=[ <Alakzat>, <Sz??m> ]
SetPointStyle=PontSt??lus
SetPointStyle.Syntax=[ <Pont>, <Sz??m> ]
SetSeed=V??letlensz??mMag
SetSeed.Syntax=[ <Eg??sz> ]
SetSpinSpeed=Forg??siSebess??g
SetSpinSpeed.Syntax=[ <Sz??m> ]
SetTooltipMode=AlakzatInform??ci??k
SetTooltipMode.Syntax=[ <Alakzat>, <Sz??m> ]
SetTrace=NyomvonalatKapcsol
SetTrace.Syntax=[ <Alakzat>, <true | false> ]
SetValue=??rt??k
SetValue.Syntax=[ <Logikai>, <0|1> ]\n[ <Alakzat>, <Alakzat> ]\n[ <Lista>, <Sz??m>, <Alakzat> ]
SetViewDirection=N??zetBe??ll??t??sa
SetViewDirection.Syntax=[ ]\n[ <Ir??ny> ]\n[ <Ir??ny>, <Anim??ci?? - logikai ??rt??k> ]
SetVisibleInView=Megjelen??t??sRajzlapon
SetVisibleInView.Syntax=[ <Alakzat>, <Rajzlap1l2>, <Logikai> ]
Shear=Ny??r??s
Shear.Syntax=[ <Alakzat>, <Egyenes>, <Ar??ny> ]
ShortestDistance=Legr??videbb??t
ShortestDistance.Syntax=[ <Szakaszok list??ja>, <Kezd??pont>, <V??gpont>, <Logikai ??rt??k s??lyoz??shoz> ]
ShowAxes=TengelyekMutat??sa
ShowAxes.Syntax=[]\n[ <Logikai> ]\n[ <N??zet>, <Logikai> ]
ShowGrid=R??csMutat??sa
ShowGrid.Syntax=[]\n[ <Logikai> ]\n[ <N??zet>, <Logikai> ]
ShowLabel=FeliratMutat??sa
ShowLabel.Syntax=[ <Alakzat>, <Logikai> ]
ShowLayer=R??tegMutat??sa
ShowLayer.Syntax=[ <Sz??m> ]
Shuffle=Kever??s
Shuffle.Syntax=[ <Lista> ]
SigmaXX=N??gyzet??szegXX
SigmaXX.Syntax=[ <Pontok list??ja> ]\n[ <Nyers adatok list??ja> ]\n[ <Sz??mok list??ja>, <Gyakoris??gok list??ja> ]
SigmaXY=N??gyzet??sszegXY
SigmaXY.Syntax=[ <Pontok list??ja> ]\n[ <X ??rt??kek list??ja>, <Y ??rt??kek list??ja> ]
SigmaYY=N??gyzet??sszegYY
SigmaYY.Syntax=[ <Pontok list??ja> ]
Simplify=Egyszer??s??t
Simplify.Syntax=[ <F??ggv??ny> ]\n[ <Sz??veg> ]
Simplify.SyntaxCAS=[ <F??ggv??ny> ]
Slider=Cs??szka
Slider.Syntax=[ <Minimum>, <Maximum>, <L??p??sk??z>, <Speed>, <Width>, <Is Angle>, <Horizontal>, <Animating>, <Random> ]
Slope=Meredeks??g
Slope.Syntax=[ <Egyenes> ]
SlopeField=Ir??nyMez??
SlopeField.Syntax=[ <f(x, y)> ]\n[ <f(x, y)>, <Sz??m (n)> ]\n[ <f(x, y)>, <Sz??m (n)>, <Hossz szorz??ja> ]\n[ <f(x, y)>, <Sz??m (n)>, <Hossz szorz??ja>, <Min x>, <Min y>, <Max x>, <Max y> ]
SlowPlot=F??ggv??nyRajzol??s
SlowPlot.Syntax=[ <F??ggv??ny> ]\n[ <F??ggv??ny>, <Ism??tl??s - logikai ??rt??k> ]
Solutions=Megold??sok
Solutions.Syntax=[ <Egyenlet> ]
Solutions.SyntaxCAS=[ <Egyenlet> ]\n[ <Egyenlet>, <V??ltoz??> ]\n[ <Egyenletek list??ja>, <V??ltoz??k list??ja> ]
Solve=Megold
Solve.Syntax=[ <Egyenlet> ]
Solve.SyntaxCAS=[ <Equation in x> ]\n[ <Egyenlet>, <V??ltoz??> ]\n[ <Egyenletek list??ja>, <V??ltoz??k list??ja> ]\n[ <List of Parametric Equations>, <V??ltoz??k list??ja> ]\n[ <Egyenlet>, <V??ltoz??>, <List of assumptions> ]
SolveCubic=Harmadfok??tMegold
SolveCubic.SyntaxCAS=[ <Harmadfok?? polinom> ]
SolveODE=Differenci??lEgyenletNumerikusan
SolveODE.Syntax=[ <f'(x, y)> ]\n[ <f'(x, y)>, <Pont f-en> ]\n[ <f'(x, y)>, <Kezd?? x ??rt??k>, <Kezd?? y ??rt??k>, <Z??r?? x ??rt??k>, <L??p??sk??z> ]\n[ <y'>, <x'>, <Kezd?? x ??rt??k>, <Kezd?? y ??rt??k>, <Z??r?? t ??rt??k>, <L??p??sk??z> ]\n[ <b(x)>, <c(x)>, <f(x)>, <Kezd?? x ??rt??k>, <Kezd?? y ??rt??k>, <Kezd?? y' ??rt??k>, <Z??r?? x ??rt??k>, <L??p??sk??z> ]
SolveODE.SyntaxCAS=[ <Egyenlet> ]\n[ <Egyenlet>, <Point(s) on f> ]\n[ <Egyenlet>, <Point(s) on f>, <Point(s) on f'> ]\n[ <Egyenlet>, <F??gg?? v??ltoz??>, <F??ggetlen v??ltoz??>, <Point(s) on f> ] \n[ <Egyenlet>, <F??gg?? v??ltoz??>, <F??ggetlen v??ltoz??>, <Point(s) on f>, <Point(s) on f'> ]
SolveQuartic=Negyedfok??tMegold
SolveQuartic.SyntaxCAS=[ <Negyedfok?? polinom> ]
Sort=Rendez??s
Sort.Syntax=[ <Lista> ]\n[ <??rt??kek>, <Kulcsok> ]
Spearman=SpearmanRangkorrel??ci??
Spearman.Syntax=[ <Pontok list??ja> ]\n[ <Sz??mok list??ja>, <Sz??mok list??ja> ]
Sphere=G??mb
Sphere.Syntax=[ <Pont>, <Sug??r> ]\n[ <Pont>, <Pont> ]
Spline=Szpl??jn
Spline.Syntax=[ <Pontok list??ja> ]\n[ <Pontok list??ja>, <Order ??? 3> ]\n[ <Pontok list??ja>, <Order ??? 3>, <Weight Function> ]
Split=ElemekKiv??g??sa
Split.Syntax=[ <Sz??veg>, <List of Texts to split on> ]
StartAnimation=Anim??l
StartAnimation.Syntax=[ ]\n[ <Logikai> ]\n[ <Cs??szka vagy pont>, <Cs??szka vagy pont>, ... ]\n[ <Cs??szka vagy pont>, <Cs??szka vagy pont>, ..., <Logikai> ]
StartRecord=T??bl??zatbaMent??sInd??t??sa
StartRecord.Syntax=[ ]\n[ <Logikai> ]
StemPlot=Lev??l??gDiagram
StemPlot.Syntax=[ <Lista> ]\n[ <Lista>, <Igaz??t??s -1|0|1> ]
StepGraph=L??p??sVonal
StepGraph.Syntax=[ <Pontok list??ja> ]\n[ <Pontok list??ja>, <y-koordin??t??k list??ja> ]\n[ <X ??rt??kek list??ja>, <Y ??rt??kek list??ja> ]\n[ <Pontok list??ja>, <y-koordin??t??k list??ja>, <Pont st??lusa> ]\n[ <X ??rt??kek list??ja>, <Y ??rt??kek list??ja>, <y-koordin??t??k list??ja> ]\n[ <X ??rt??kek list??ja>, <Y ??rt??kek list??ja>, <y-koordin??t??k list??ja>, <Pont st??lusa> ]
StickGraph=VonalGrafikon
StickGraph.Syntax=[ <Pontok list??ja> ]\n[ <Pontok list??ja>, <Logikai ??rt??k (V??zszintes?)> ]\n[ <X ??rt??kek list??ja>, <Y ??rt??kek list??ja> ]\n[ <X ??rt??kek list??ja>, <Y ??rt??kek list??ja>, <Logikai ??rt??k (V??zszintes?)> ]
Stretch=Affin??t??s
Stretch.Syntax=[ <Alakzat>, <Vektor> ]\n[ <Alakzat>, <Egyenes>, <Ar??ny> ]
Substitute=Helyettes??t
Substitute.SyntaxCAS=[ <Kifejez??s>, <Csere lista> ]\n[ <Kifejez??s>, <Mit>, <Mire> ]
Sum=??sszeg
Sum.Syntax=[ <Lista> ]\n[ <Lista>, <Elemek sz??ma> ]\n[ <Lista>, <Gyakoris??gok list??ja> ]\n[ <Kifejez??s>, <V??ltoz??>, <Kezd????rt??k>, <V??g??rt??k> ]
Sum.SyntaxCAS=[ <Lista> ]\n[ <Kifejez??s>, <V??ltoz??>, <Kezd????rt??k>, <V??g??rt??k> ]
SumSquaredErrors=N??gyzet??sszegElt??r??s
SumSquaredErrors.Syntax=[ <Pontok list??ja>, <F??ggv??ny> ]
SurdText=Gy??k??sAlak
SurdText.Syntax=[ <Pont> ]\n[ <Sz??m> ]\n[ <Sz??m>, <Lista> ]
Surface=Fel??let
Surface.Syntax=[ <F??ggv??ny>, <Sz??g> ]\n[ <G??rbe>, <Sz??g>, <Egyenes> ]\n[ <Kifejez??s>, <Kifejez??s>, <Kifejez??s>, <V??ltoz?? 1>, <Kezd????rt??k>, <V??g??rt??k>, <V??ltoz?? 2>, <Kezd????rt??k>, <V??g??rt??k> ]
TDistribution=TEloszl??s
TDistribution.Syntax=[ <Szabads??gfokok>, <V??ltoz?? ??rt??ke> ]\n[ <Szabads??gfokok>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]\n[ <Szabads??gfokok>, x, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
TDistribution.SyntaxCAS=[ <Szabads??gfokok>, <V??ltoz?? ??rt??ke> ]
TMean2Estimate=K??tMint??sTPr??ba??tlagBecsl??se
TMean2Estimate.Syntax=[ <1. minta elemeinek list??ja>, <2. minta elemeinek list??ja>, <Konfidencia szint>, <igaz I hamis> ]\n[ <1 minta ??tlaga>, <1. minta sz??r??sa>, <1. minta elemsz??ma>, <2. minta ??tlaga>, <2. minta sz??r??sa>, <2. minta elemsz??ma>, <Konfidencia szint>, <igaz I hamis> ]
TMeanEstimate=TPr??ba??tlagBecsl??se
TMeanEstimate.Syntax=[ <Minta elemeinek list??ja>, <Konfidencia szint> ]\n[ <Minta ??tlaga>, <Minta sz??r??sa>, <Minta m??rete>, <Konfidencia szint> ]
TTest=TPr??ba
TTest.Syntax=[ <Minta elemeinek list??ja>, <Becs??lt ??tlag>, <"<" | ">" | "???"> ]\n[ <Minta ??tlaga>, <Minta sz??r??sa>, <Minta m??rete>, <Becs??lt ??tlag>, <"<" | ">" | "???"> ]
TTest2=K??tmint??sTPr??ba
TTest2.Syntax=[ <1. minta elemeinek list??ja>, <2. minta elemeinek list??ja>, <"<" | ">" | "???">, <igaz I hamis> ]\n[ <1 minta ??tlaga>, <1. minta sz??r??sa>, <1. minta elemsz??ma>, <2. minta ??tlaga>, <2. minta sz??r??sa>, <2. minta elemsz??ma>, <"<" | ">" | "???">, <igaz I hamis> ]
TTestPaired=P??rosTPr??ba
TTestPaired.Syntax=[ <1. minta elemeinek list??ja>, <2. minta elemeinek list??ja>, <"<" | ">" | "???"> ]
TableText=T??bl??zatSz??veg
TableText.Syntax=[ <Lista>, <Lista>, ... ]\n[ <Lista>, <Lista>, ..., <Sz??veg igaz??t??sa> ]\n[ <Lista>, <Lista>, ..., <Sz??veg igaz??t??sa>, <Minimum Cell Width> ]\n[ <Lista>, <Lista>, ..., <Sz??veg igaz??t??sa>, <Minimum Cell Width>, <Minimum Cell Height> ]
Take=ListaR??sz
Take.Syntax=[ <Lista>, <T??l>, <Ig> ]\n[ <Lista>, <T??l> ]\n[ <Sz??veg>, <T??l>, <Ig> ]\n[ <Sz??veg>, <T??l> ]
Take.SyntaxCAS=[ <Lista>, <T??l> ]\n[ <Lista>, <T??l>, <Ig> ]\n[ <Sz??veg>, <T??l>, <Ig> ]\n[ <Sz??veg>, <T??l> ]
Tangent=??rint??
Tangent.Syntax=[ <Pont>, <K??pszelet> ]\n[ <Pont>, <F??ggv??ny> ]\n[ <Pont a g??rb??n>, <G??rbe> ]\n[ <x- ??rt??k>, <F??ggv??ny> ]\n[ <Egyenes>, <K??pszelet> ]\n[ <K??pszelet>, <K??pszelet> ]
Tangent.SyntaxCAS=[ <Sz??m>, <F??ggv??ny> ]\n[ <Pont>, <Alakzat> ]
TaylorSeries=TaylorPolinom
TaylorSeries.Syntax=[ <F??ggv??ny>, <x- ??rt??k>, <Foksz??m> ]
TaylorSeries.SyntaxCAS=[ <Kifejez??s>, <x- ??rt??k>, <Foksz??m> ]\n[ <Kifejez??s>, <V??ltoz??>, <V??ltoz?? ??rt??ke>, <Foksz??m> ]
Tetrahedron=Tetra??der
Tetrahedron.Syntax=[ <Equilateral Triangle> ]\n[ <Pont>, <Pont>, <Pont> ]\n[ <Pont>, <Pont>, <Ir??ny> ]
Text=Sz??veg
Text.Syntax=[ <Alakzat> ]\n[ <Alakzat>, <V??ltoz??k behelyettes??t??se - logikai ??rt??k> ]\n[ <Alakzat>, <Pont> ]\n[ <Alakzat>, <Pont>, <V??ltoz??k behelyettes??t??se - logikai ??rt??k> ]\n[ <Alakzat>, <Pont>, <V??ltoz??k behelyettes??t??se - logikai ??rt??k>, <Boolean for LaTeX formula> ]\n[ <Alakzat>, <Pont>, <V??ltoz??k behelyettes??t??se - logikai ??rt??k>, <Boolean for LaTeX formula>, <Horizontal alignment -1|0|1> ]\n[ <Alakzat>, <Pont>, <V??ltoz??k behelyettes??t??se - logikai ??rt??k>, <Boolean for LaTeX formula>, <Horizontal alignment -1|0|1>, <Vertical alignment -1|0|1> ]
TextToUnicode=Sz??vegetUnicode
TextToUnicode.Syntax=[ <Sz??veg> ]
Textfield=BeviteliMez??
Textfield.Syntax=[ <Csatolt alakzat> ]
TiedRank=Rangsor
TiedRank.Syntax=[ <Lista> ]
ToBase=??tv??ltAlapra
ToBase.Syntax=[ <Sz??m>, <Alap> ]
ToComplex=Komplexsz??mk??nt
ToComplex.Syntax=[ <Vektor> ]
ToExponential=Exponenci??lisAlakban
ToExponential.SyntaxCAS=[ <Komplex sz??m> ]
ToPoint=Pontk??nt
ToPoint.Syntax=[ <Komplex sz??m> ]
ToPolar=Pol??rAlakban
ToPolar.Syntax=[ <Komplex sz??m> ]\n[ <Vektor> ]
ToolImage=Eszk??zIkon
ToolImage.Syntax=[ <Sz??m> ]\n[ <Sz??m>, <Pont> ]\n[ <Sz??m>, <Pont>, <Pont> ]
Top=Fed??lap
Top.Syntax=[ <M??sodrend?? g??rbe> ]
Translate=Eltol??s
Translate.Syntax=[ <Alakzat>, <Vektor> ]\n[ <Vektor>, <Kezd??pont> ]
Transpose=Transzpon??lt
Transpose.Syntax=[ <M??trix> ]
TrapezoidalSum=Trap??z??sszeg
TrapezoidalSum.Syntax=[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k>, <Trap??zok sz??ma> ]
TravelingSalesman=Utaz????gyn??k
TravelingSalesman.Syntax=[ <Pontok list??ja> ]
TriangleCenter=H??romsz??gNevezetesPontja
TriangleCenter.Syntax=[ <Pont>, <Pont>, <Pont>, <Sz??m> ]
TriangleCurve=BaricentrikusG??rbe
TriangleCurve.Syntax=[ <Pont>, <Pont>, <Pont>, <Egyenlet> ]
Triangular=H??romsz??gEloszl??s
Triangular.Syntax=[ <Lower Bound>, <Upper Bound>, <Mode>, <V??ltoz?? ??rt??ke> ]\n[ <Lower Bound>, <Upper Bound>, <Mode>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]\n[ <Lower Bound>, <Upper Bound>, <Mode>, x, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
TrigCombine=TrigEgyes??t
TrigCombine.Syntax=[ <Kifejez??s> ]\n[ <Kifejez??s>, <C??l f??ggv??ny> ]
TrigExpand=TrigFelbont
TrigExpand.Syntax=[ <Kifejez??s> ]\n[ <Kifejez??s>, <C??l f??ggv??ny> ]
TrigExpand.SyntaxCAS=[ <Kifejez??s> ]\n[ <Kifejez??s>, <C??l f??ggv??ny> ]\n[ <Kifejez??s>, <C??l f??ggv??ny>, <C??lv??ltoz??> ]\n[ <Kifejez??s>, <C??l f??ggv??ny>, <C??lv??ltoz??>, <C??lv??ltoz??> ]
TrigSimplify=TrigEgyszer??s??t
TrigSimplify.Syntax=[ <Kifejez??s> ]
Trilinear=Triline??ris
Trilinear.Syntax=[ <Pont>, <Pont>, <Pont>, <Sz??m>, <Sz??m>, <Sz??m> ]
TurningPoint=Inflexi??spont
TurningPoint.Syntax=[ <Polinom> ]
TurningPoint.SyntaxCAS=[ <F??ggv??ny> ]
Turtle=Tekn??c
Turtle.Syntax=[]
TurtleBack=Tekn??cH??tra
TurtleBack.Syntax=[ <Tekn??c>, <T??vols??g> ]
TurtleDown=TollatLe
TurtleDown.Syntax=[ <Tekn??c> ]
TurtleForward=Tekn??cEl??re
TurtleForward.Syntax=[ <Tekn??c>, <T??vols??g> ]
TurtleLeft=Tekn??cBalra
TurtleLeft.Syntax=[ <Tekn??c>, <Sz??g> ]
TurtleRight=Tekn??cJobbra
TurtleRight.Syntax=[ <Tekn??c>, <Sz??g> ]
TurtleUp=TollatFel
TurtleUp.Syntax=[ <Tekn??c> ]
Type=T??pus
Type.Syntax=[ <Alakzat> ]
UnicodeToLetter=UnicodeBet??v??
UnicodeToLetter.Syntax=[ <Eg??sz> ]
UnicodeToText=UnicodeSz??vegg??
UnicodeToText.Syntax=[ <Eg??szek list??ja> ]
Uniform=EgyenletesEloszl??s
Uniform.Syntax=[ <Lower Bound>, <Upper Bound>, <V??ltoz?? ??rt??ke> ]\n[ <Lower Bound>, <Upper Bound>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]\n[ <Lower Bound>, <Upper Bound>, x, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
Union=Uni??
Union.Syntax=[ <Lista>, <Lista> ]\n[ <Soksz??g>, <Soksz??g> ]
Unique=Elemek
Unique.Syntax=[ <Lista> ]
UnitOrthogonalVector=Egys??gnyiNorm??lVektor
UnitOrthogonalVector.Syntax=[ <Egyenes> ]\n[ <Szakasz> ]\n[ <Vektor> ]
UnitOrthogonalVector.Syntax3D=[ <Egyenes> ]\n[ <Szakasz> ]\n[ <Vektor> ]\n[ <S??k> ]
UnitOrthogonalVector.SyntaxCAS=[ <Vektor> ]
UnitVector=Egys??gVektor
UnitVector.Syntax=[ <Alakzat> ]
UnitVector.SyntaxCAS=[ <Vektor> ]
UpdateConstruction=Szerkeszt??sFriss??t??se
UpdateConstruction.Syntax=[ ]\n[ <H??nyszor> ]
UpperSum=Fels????sszeg
UpperSum.Syntax=[ <F??ggv??ny>, <Kezd?? x-??rt??k>, <Lez??r?? x-??rt??k>, <T??glalapok sz??ma> ]
Variance=Sz??r??sN??gyzet
Variance.Syntax=[ <Nyers adatok list??ja> ]\n[ <Sz??mok list??ja>, <Gyakoris??gok list??ja> ]
Vector=Vektor
Vector.Syntax=[ <Pont> ]\n[ <Kezd??pont>, <V??gpont> ]
Vertex=Cs??cspont
Vertex.Syntax=[ <K??pszelet> ]\n[ <Inequality> ]\n[ <Soksz??g> ]\n[ <Soksz??g>, <Sorsz??m> ]\n[ <Szakasz>, <Sorsz??m> ]
VerticalText=F??gg??legesSz??veg
VerticalText.Syntax=[ <Sz??veg> ]\n[ <Sz??veg>, <Pont> ]
Volume=T??rfogat
Volume.Syntax=[ <Test> ]
Voronoi.Syntax=[ <Pontok list??ja> ]
Weibull=WeibullEloszl??s
Weibull.Syntax=[ <Alakparam??ter>, <Sz??less??g>, <V??ltoz?? ??rt??ke> ]\n[ <Alakparam??ter>, <Sz??less??g>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]\n[ <Alakparam??ter>, <Sz??less??g>, x, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
Weibull.SyntaxCAS=[ <Alakparam??ter>, <Sz??less??g>, <V??ltoz?? ??rt??ke> ]
ZMean2Estimate=Z??tlagBecsl??seK??tmint??s
ZMean2Estimate.Syntax=[ <1. minta elemeinek list??ja>, <2. minta elemeinek list??ja>, <Sz??r??s1>, <Sz??r??s2>, <Konfidencia szint> ]\n[ <1 minta ??tlaga>, <Sz??r??s1>, <1. minta elemsz??ma>, <2. minta ??tlaga>, <Sz??r??s2>, <2. minta elemsz??ma>, <Konfidencia szint> ]
ZMean2Test=ZPr??baK??tmint??s
ZMean2Test.Syntax=[ <1. minta elemeinek list??ja>, <Sz??r??s1>, <2. minta elemeinek list??ja>, <Sz??r??s2>, <"<" | ">" | "???"> ]\n[ <1 minta ??tlaga>, <Sz??r??s1>, <1. minta elemsz??ma>, <2. minta ??tlaga>, <Sz??r??s2>, <2. minta elemsz??ma>, <"<" | ">" | "???"> ]
ZMeanEstimate=Z??tlagBecsl??se
ZMeanEstimate.Syntax=[ <Minta elemeinek list??ja>, <Sz??r??s>, <Konfidencia szint> ]\n[ <Minta ??tlaga>, <Sz??r??s>, <Minta m??rete>, <Konfidencia szint> ]
ZMeanTest=ZPr??ba
ZMeanTest.Syntax=[ <Minta elemeinek list??ja>, <Sz??r??s>, <Becs??lt ??tlag>, <"<" | ">" | "???"> ]\n[ <Minta ??tlaga>, <Sz??r??s>, <Minta m??rete>, <Becs??lt ??tlag>, <"<" | ">" | "???"> ]
ZProportion2Estimate=ZAr??nyBecsl??seK??tmint??s
ZProportion2Estimate.Syntax=[ <Minta ar??ny1>, <1. minta elemsz??ma>, <Minta ar??ny2>, <2. minta elemsz??ma>, <Konfidencia szint> ]
ZProportion2Test=ZAr??nyPr??baK??tmint??s
ZProportion2Test.Syntax=[ <Minta ar??ny1>, <1. minta elemsz??ma>, <Minta ar??ny2>, <2. minta elemsz??ma>, <"<" | ">" | "???"> ]
ZProportionEstimate=ZAr??nyBecsl??se
ZProportionEstimate.Syntax=[ <Minta ar??ny>, <Minta m??rete>, <Konfidencia szint> ]
ZProportionTest=ZAr??nyPr??ba
ZProportionTest.Syntax=[ <Minta ar??ny>, <Minta m??rete>, <Hipot??zis ar??nyra>, <"<" | ">" | "???"> ]
Zip=Eredm??nyLista
Zip.Syntax=[ <Kifejez??s>, <V??ltoz??1>, <Lista1>, <V??ltoz??2y>, <Lista2>, ... ]
Zipf=Z??taEloszl??s
Zipf.Syntax=[ <Elemek sz??ma>, <Kitev??> ]\n[ <Elemek sz??ma>, <Kitev??>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]\n[ <Elemek sz??ma>, <Kitev??>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
Zipf.SyntaxCAS=[ <Elemek sz??ma>, <Kitev??>, <V??ltoz?? ??rt??ke>, <Eloszl??sf??ggv??ny logikai ??rt??ke> ]
ZoomIn=Nagy??t??s
ZoomIn.Syntax=[ ]\n[ <Ar??ny> ]\n[ <Ar??ny>, <K??z??ppont> ]\n[ <Min x>, <Min y>, <Max x>, <Max y> ]\n[ <Min x>, <Min y>, <Min z>, <Max x>, <Max y>, <Max z> ]
ZoomOut=Kicsiny??t??s
ZoomOut.Syntax=[ <Ar??ny> ]\n[ <Ar??ny>, <K??z??ppont> ]
mad=??ae
mad.Syntax=[ <Nyers adatok list??ja> ]\n[ <Sz??mok list??ja>, <Gyakoris??gok list??ja> ]
mean=??tlag
mean.Syntax=[ <Nyers adatok list??ja> ]\n[ <Sz??mok list??ja>, <Gyakoris??gok list??ja> ]
nCr=BinEh
nCr.Syntax=[ <Sz??m (n)>, <Sz??m (k)> ]
stdev=sz??r??s
stdev.Syntax=[ <Nyers adatok list??ja> ]\n[ <Sz??mok list??ja>, <Gyakoris??gok list??ja> ]
stdevp=ksz??r
stdevp.Syntax=[ <Nyers adatok list??ja> ]\n[ <Sz??mok list??ja>, <Gyakoris??gok list??ja> ]