plugins {
    id 'application'
    id 'checkstyle-conventions'
    id 'spotbugs-conventions'
    id 'variants'
}

description 'Parts of GeoGebra related to desktop platforms'

sourceSets {
    nonfree
    gpl
    main {
        resources {
            if (project.hasProperty("usegpl")) {
                srcDirs += gpl.resources.srcDirs
            } else {
                srcDirs += nonfree.resources.srcDirs
            }
        }
    }
    e2eTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output
    }
}

configurations {
    e2eTestImplementation.extendsFrom testImplementation
    e2eTestImplementation.extendsFrom testRuntime
}

dependencies {
    implementation project(':common')
    implementation project(':common-jre')
    implementation project(':editor-desktop')
    implementation project(':jogl2')
    implementation project(':giac-jni')
    implementation libs.jsObject
    implementation libs.openGeoProver
    implementation libs.jna
    implementation libs.echosvg

    implementation variants.nativesLinuxAmd64(libs.jogl)
    implementation variants.nativesWindowsAmd64(libs.jogl)
    implementation variants.nativesMacOSXUniversal(libs.jogl)

    runtimeOnly variants.nativesLinuxAmd64(libs.gluegen.rt)
    runtimeOnly variants.nativesWindowsAmd64(libs.gluegen.rt)
    runtimeOnly variants.nativesMacOSXUniversal(libs.gluegen.rt)

    runtimeOnly variants.nativesLinuxAmd64(libs.giac.java)
    runtimeOnly variants.nativesWindowsAmd64(libs.giac.java)
    runtimeOnly variants.nativesMacOSXUniversal(libs.giac.java)

    testImplementation project(':keyboard-base')
    testImplementation project(':ggbjdk')
    testImplementation testFixtures(project(':common-jre'))
    testImplementation libs.junit
    testImplementation libs.mockito.core
    testImplementation libs.hamcrest
}

application {
    mainClassName = "org.geogebra.desktop.GeoGebra3D"
}

run {
    // Copying JOGL related native JARs into the same directory where the non-native JAR takes place.
    // JOGL is simply dumb, it cannot work neither with java.library.path nor classpath or anything. Arrgh.
    def joglVersion = libs.versions.jogl.get()
    def gluegen = project.configurations.runtimeClasspath.find { it.name == "gluegen-rt-${joglVersion}.jar" }
    def gluegen_natives = project.configurations.runtimeClasspath.findAll { it.name.startsWith("gluegen-rt-$joglVersion-natives") }
    def gluegen_dir = gluegen.getParent()
    for (i in gluegen_natives) {
        def gluegen_native_path = i.getPath()
        ant.copy(file: "$gluegen_native_path", todir: "$gluegen_dir")
    }
    def jogl = project.configurations.runtimeClasspath.find { it.name == "jogl-all-${joglVersion}.jar" }
    def jogl_natives = project.configurations.runtimeClasspath.findAll { it.name.startsWith("jogl-all-$joglVersion-natives") }
    def jogl_dir = jogl.getParent()
    for (i in jogl_natives) {
        def jogl_native_path = i.getPath()
        ant.copy(file: "$jogl_native_path", todir: "$jogl_dir")
    }

}

test {
    systemProperty "ggb.prerelease", project.findProperty("prerelease") ?: "true";

    ignoreFailures = true
    outputs.upToDateWhen { false }
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
                'Main-Class': 'org.geogebra.desktop.GeoGebra3D'
        )
    }
}

tasks.register('debugJars', Zip) {
    dependsOn 'jar'
    description = 'Collect all jar files in a single archive. Fast: no proguard or code signing.'
    archiveBaseName = 'jars'
    destinationDirectory = file('build')
    from 'build/libs'
    doLast {
        configurations.runtimeClasspath.each { jarFile ->
            copy {
                from jarFile
                into 'build/libs'
            }
        }
    }
}

tasks['checkstyleMain'].setSource(files([]))

tasks.register('e2eTest', Test) {
    description 'Run end-to-end tests'
    testClassesDirs = sourceSets.e2eTest.output.classesDirs
    classpath = sourceSets.e2eTest.runtimeClasspath
}